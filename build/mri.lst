ARM GAS  /tmp/cccmYxwc.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"mri.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "mri/core/mri.c"
  20              		.section	.text.setFirstExceptionFlag,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	setFirstExceptionFlag:
  27              	.LFB10:
   1:mri/core/mri.c **** /* Copyright 2022 Adam Green (https://github.com/adamgreen/)
   2:mri/core/mri.c **** 
   3:mri/core/mri.c ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/mri.c ****    you may not use this file except in compliance with the License.
   5:mri/core/mri.c ****    You may obtain a copy of the License at
   6:mri/core/mri.c **** 
   7:mri/core/mri.c ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/mri.c **** 
   9:mri/core/mri.c ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/mri.c ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/mri.c ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/mri.c ****    See the License for the specific language governing permissions and
  13:mri/core/mri.c ****    limitations under the License.
  14:mri/core/mri.c **** */
  15:mri/core/mri.c **** /* Monitor for Remote Inspection - Provides core mri routines to initialize the debug monitor, quer
  16:mri/core/mri.c ****    invoke it into action when a debug event occurs on the target hardware. */
  17:mri/core/mri.c **** #include <errno.h>
  18:mri/core/mri.c **** #include <core/libc.h>
  19:mri/core/mri.c **** #include <core/mri.h>
  20:mri/core/mri.c **** #include <core/buffer.h>
  21:mri/core/mri.c **** #include <core/hex_convert.h>
  22:mri/core/mri.c **** #include <core/try_catch.h>
  23:mri/core/mri.c **** #include <core/packet.h>
  24:mri/core/mri.c **** #include <core/token.h>
  25:mri/core/mri.c **** #include <core/core.h>
  26:mri/core/mri.c **** #include <core/platforms.h>
  27:mri/core/mri.c **** #include <core/signal.h>
  28:mri/core/mri.c **** #include <core/semihost.h>
  29:mri/core/mri.c **** #include <core/cmd_common.h>
  30:mri/core/mri.c **** #include <core/cmd_file.h>
  31:mri/core/mri.c **** #include <core/cmd_registers.h>
ARM GAS  /tmp/cccmYxwc.s 			page 2


  32:mri/core/mri.c **** #include <core/cmd_memory.h>
  33:mri/core/mri.c **** #include <core/cmd_continue.h>
  34:mri/core/mri.c **** #include <core/cmd_query.h>
  35:mri/core/mri.c **** #include <core/cmd_break_watch.h>
  36:mri/core/mri.c **** #include <core/cmd_step.h>
  37:mri/core/mri.c **** #include <core/cmd_thread.h>
  38:mri/core/mri.c **** #include <core/cmd_vcont.h>
  39:mri/core/mri.c **** #include <core/memory.h>
  40:mri/core/mri.c **** 
  41:mri/core/mri.c **** 
  42:mri/core/mri.c **** typedef struct
  43:mri/core/mri.c **** {
  44:mri/core/mri.c ****     TempBreakpointCallbackPtr   pTempBreakpointCallback;
  45:mri/core/mri.c ****     void*                       pvTempBreakpointContext;
  46:mri/core/mri.c ****     MriDebuggerHookPtr          pEnteringHook;
  47:mri/core/mri.c ****     MriDebuggerHookPtr          pLeavingHook;
  48:mri/core/mri.c ****     void*                       pvEnteringLeavingContext;
  49:mri/core/mri.c ****     MriContext*                 pContext;
  50:mri/core/mri.c ****     Packet                      packet;
  51:mri/core/mri.c ****     uint32_t                    tempBreakpointAddress;
  52:mri/core/mri.c ****     uint32_t                    flags;
  53:mri/core/mri.c ****     AddressRange                rangeForSingleStepping;
  54:mri/core/mri.c ****     int                         semihostReturnCode;
  55:mri/core/mri.c ****     int                         semihostErrno;
  56:mri/core/mri.c ****     uint8_t                     signalValue;
  57:mri/core/mri.c **** } MriCore;
  58:mri/core/mri.c **** 
  59:mri/core/mri.c **** static MriCore g_mri;
  60:mri/core/mri.c **** 
  61:mri/core/mri.c **** /* MriCore::flags bit definitions. */
  62:mri/core/mri.c **** #define MRI_FLAGS_SUCCESSFUL_INIT       (1 << 0)
  63:mri/core/mri.c **** #define MRI_FLAGS_FIRST_EXCEPTION       (1 << 1)
  64:mri/core/mri.c **** #define MRI_FLAGS_SEMIHOST_CTRL_C       (1 << 2)
  65:mri/core/mri.c **** #define MRI_FLAGS_TEMP_BREAKPOINT       (1 << 3)
  66:mri/core/mri.c **** #define MRI_FLAGS_RESET_ON_CONTINUE     (1 << 4)
  67:mri/core/mri.c **** #define MRI_FLAGS_RANGED_SINGLE_STEP    (1 << 5)
  68:mri/core/mri.c **** #define MRI_FLAGS_ENCOUNTERED_CTRL_C    (1 << 6)
  69:mri/core/mri.c **** 
  70:mri/core/mri.c **** /* Calculates the number of items in a static array at compile time. */
  71:mri/core/mri.c **** #define ARRAY_SIZE(X) (sizeof(X)/sizeof(X[0]))
  72:mri/core/mri.c **** 
  73:mri/core/mri.c **** static void clearCoreStructure(void);
  74:mri/core/mri.c **** static void initializePlatformSpecificModulesWithDebuggerParameters(const char* pDebuggerParameters
  75:mri/core/mri.c **** static void setFirstExceptionFlag(void);
  76:mri/core/mri.c **** static void setSuccessfulInitFlag(void);
  77:mri/core/mri.c **** void mriInit(const char* pDebuggerParameters)
  78:mri/core/mri.c **** {
  79:mri/core/mri.c ****     clearCoreStructure();
  80:mri/core/mri.c **** 
  81:mri/core/mri.c ****     __try
  82:mri/core/mri.c ****         initializePlatformSpecificModulesWithDebuggerParameters(pDebuggerParameters);
  83:mri/core/mri.c ****     __catch
  84:mri/core/mri.c ****         return;
  85:mri/core/mri.c **** 
  86:mri/core/mri.c ****     setFirstExceptionFlag();
  87:mri/core/mri.c ****     setSuccessfulInitFlag();
  88:mri/core/mri.c **** }
ARM GAS  /tmp/cccmYxwc.s 			page 3


  89:mri/core/mri.c **** 
  90:mri/core/mri.c **** static void clearCoreStructure(void)
  91:mri/core/mri.c **** {
  92:mri/core/mri.c ****     mri_memset(&g_mri, 0, sizeof(g_mri));
  93:mri/core/mri.c **** }
  94:mri/core/mri.c **** 
  95:mri/core/mri.c **** static void initializePlatformSpecificModulesWithDebuggerParameters(const char* pDebuggerParameters
  96:mri/core/mri.c **** {
  97:mri/core/mri.c ****     Token    tokens;
  98:mri/core/mri.c **** 
  99:mri/core/mri.c ****     Token_Init(&tokens);
 100:mri/core/mri.c ****     __try
 101:mri/core/mri.c ****     {
 102:mri/core/mri.c ****         __throwing_func( Token_SplitString(&tokens, pDebuggerParameters) );
 103:mri/core/mri.c ****         __throwing_func( Platform_Init(&tokens) );
 104:mri/core/mri.c ****     }
 105:mri/core/mri.c ****     __catch
 106:mri/core/mri.c ****         __rethrow;
 107:mri/core/mri.c **** }
 108:mri/core/mri.c **** 
 109:mri/core/mri.c **** static void setFirstExceptionFlag(void)
 110:mri/core/mri.c **** {
  28              		.loc 1 110 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 111:mri/core/mri.c ****     g_mri.flags |= MRI_FLAGS_FIRST_EXCEPTION;
  33              		.loc 1 111 5 view .LVU1
  34              		.loc 1 111 10 is_stmt 0 view .LVU2
  35 0000 024A     		ldr	r2, .L2
  36 0002 936B     		ldr	r3, [r2, #56]
  37              		.loc 1 111 17 view .LVU3
  38 0004 43F00203 		orr	r3, r3, #2
  39 0008 9363     		str	r3, [r2, #56]
 112:mri/core/mri.c **** }
  40              		.loc 1 112 1 view .LVU4
  41 000a 7047     		bx	lr
  42              	.L3:
  43              		.align	2
  44              	.L2:
  45 000c 00000000 		.word	g_mri
  46              		.cfi_endproc
  47              	.LFE10:
  49              		.section	.text.setSuccessfulInitFlag,"ax",%progbits
  50              		.align	1
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  55              	setSuccessfulInitFlag:
  56              	.LFB11:
 113:mri/core/mri.c **** 
 114:mri/core/mri.c **** static void setSuccessfulInitFlag(void)
 115:mri/core/mri.c **** {
  57              		.loc 1 115 1 is_stmt 1 view -0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cccmYxwc.s 			page 4


  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
 116:mri/core/mri.c ****     g_mri.flags |= MRI_FLAGS_SUCCESSFUL_INIT;
  62              		.loc 1 116 5 view .LVU6
  63              		.loc 1 116 10 is_stmt 0 view .LVU7
  64 0000 024A     		ldr	r2, .L5
  65 0002 936B     		ldr	r3, [r2, #56]
  66              		.loc 1 116 17 view .LVU8
  67 0004 43F00103 		orr	r3, r3, #1
  68 0008 9363     		str	r3, [r2, #56]
 117:mri/core/mri.c **** }
  69              		.loc 1 117 1 view .LVU9
  70 000a 7047     		bx	lr
  71              	.L6:
  72              		.align	2
  73              	.L5:
  74 000c 00000000 		.word	g_mri
  75              		.cfi_endproc
  76              	.LFE11:
  78              		.section	.text.isTempBreakpointSet,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	isTempBreakpointSet:
  85              	.LFB13:
 118:mri/core/mri.c **** 
 119:mri/core/mri.c **** 
 120:mri/core/mri.c **** static int isTempBreakpointSet(void);
 121:mri/core/mri.c **** static uint32_t clearThumbBitOfAddress(uint32_t address);
 122:mri/core/mri.c **** static void setTempBreakpointFlag(void);
 123:mri/core/mri.c **** int SetTempBreakpoint(uint32_t breakpointAddress, TempBreakpointCallbackPtr pCallback, void* pvCont
 124:mri/core/mri.c **** {
 125:mri/core/mri.c ****     if (isTempBreakpointSet())
 126:mri/core/mri.c ****         return 0;
 127:mri/core/mri.c **** 
 128:mri/core/mri.c ****     breakpointAddress = clearThumbBitOfAddress(breakpointAddress);
 129:mri/core/mri.c ****     __try
 130:mri/core/mri.c ****         Platform_SetHardwareBreakpoint(breakpointAddress);
 131:mri/core/mri.c ****     __catch
 132:mri/core/mri.c ****     {
 133:mri/core/mri.c ****         clearExceptionCode();
 134:mri/core/mri.c ****         return 0;
 135:mri/core/mri.c ****     }
 136:mri/core/mri.c ****     g_mri.tempBreakpointAddress = breakpointAddress;
 137:mri/core/mri.c ****     g_mri.pTempBreakpointCallback = pCallback;
 138:mri/core/mri.c ****     g_mri.pvTempBreakpointContext = pvContext;
 139:mri/core/mri.c ****     setTempBreakpointFlag();
 140:mri/core/mri.c ****     return 1;
 141:mri/core/mri.c **** }
 142:mri/core/mri.c **** 
 143:mri/core/mri.c **** static int isTempBreakpointSet(void)
 144:mri/core/mri.c **** {
  86              		.loc 1 144 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccmYxwc.s 			page 5


  90              		@ link register save eliminated.
 145:mri/core/mri.c ****     return g_mri.flags & MRI_FLAGS_TEMP_BREAKPOINT;
  91              		.loc 1 145 5 view .LVU11
  92              		.loc 1 145 17 is_stmt 0 view .LVU12
  93 0000 024B     		ldr	r3, .L8
  94 0002 986B     		ldr	r0, [r3, #56]
 146:mri/core/mri.c **** }
  95              		.loc 1 146 1 view .LVU13
  96 0004 00F00800 		and	r0, r0, #8
  97 0008 7047     		bx	lr
  98              	.L9:
  99 000a 00BF     		.align	2
 100              	.L8:
 101 000c 00000000 		.word	g_mri
 102              		.cfi_endproc
 103              	.LFE13:
 105              		.section	.text.clearThumbBitOfAddress,"ax",%progbits
 106              		.align	1
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 111              	clearThumbBitOfAddress:
 112              	.LVL0:
 113              	.LFB14:
 147:mri/core/mri.c **** 
 148:mri/core/mri.c **** static uint32_t clearThumbBitOfAddress(uint32_t address)
 149:mri/core/mri.c **** {
 114              		.loc 1 149 1 is_stmt 1 view -0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 150:mri/core/mri.c ****     return address & ~1;
 119              		.loc 1 150 5 view .LVU15
 151:mri/core/mri.c **** }
 120              		.loc 1 151 1 is_stmt 0 view .LVU16
 121 0000 20F00100 		bic	r0, r0, #1
 122              	.LVL1:
 123              		.loc 1 151 1 view .LVU17
 124 0004 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE14:
 128              		.section	.text.setTempBreakpointFlag,"ax",%progbits
 129              		.align	1
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 134              	setTempBreakpointFlag:
 135              	.LFB15:
 152:mri/core/mri.c **** 
 153:mri/core/mri.c **** static void setTempBreakpointFlag(void)
 154:mri/core/mri.c **** {
 136              		.loc 1 154 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
ARM GAS  /tmp/cccmYxwc.s 			page 6


 155:mri/core/mri.c ****     g_mri.flags |= MRI_FLAGS_TEMP_BREAKPOINT;
 141              		.loc 1 155 5 view .LVU19
 142              		.loc 1 155 10 is_stmt 0 view .LVU20
 143 0000 024A     		ldr	r2, .L12
 144 0002 936B     		ldr	r3, [r2, #56]
 145              		.loc 1 155 17 view .LVU21
 146 0004 43F00803 		orr	r3, r3, #8
 147 0008 9363     		str	r3, [r2, #56]
 156:mri/core/mri.c **** }
 148              		.loc 1 156 1 view .LVU22
 149 000a 7047     		bx	lr
 150              	.L13:
 151              		.align	2
 152              	.L12:
 153 000c 00000000 		.word	g_mri
 154              		.cfi_endproc
 155              	.LFE15:
 157              		.section	.text.clearControlCEncounteredFlag,"ax",%progbits
 158              		.align	1
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 163              	clearControlCEncounteredFlag:
 164              	.LFB18:
 157:mri/core/mri.c **** 
 158:mri/core/mri.c **** 
 159:mri/core/mri.c **** void mriCoreSetDebuggerHooks(MriDebuggerHookPtr pEnteringHook, MriDebuggerHookPtr pLeavingHook, voi
 160:mri/core/mri.c **** {
 161:mri/core/mri.c ****     g_mri.pEnteringHook = pEnteringHook;
 162:mri/core/mri.c ****     g_mri.pLeavingHook = pLeavingHook;
 163:mri/core/mri.c ****     g_mri.pvEnteringLeavingContext = pvContext;
 164:mri/core/mri.c **** }
 165:mri/core/mri.c **** 
 166:mri/core/mri.c **** 
 167:mri/core/mri.c **** static void clearControlCEncounteredFlag(void);
 168:mri/core/mri.c **** static int wasTempBreakpointHit(void);
 169:mri/core/mri.c **** static void clearTempBreakpoint(void);
 170:mri/core/mri.c **** static void clearTempBreakpointFlag(void);
 171:mri/core/mri.c **** static int areSingleSteppingInRange(void);
 172:mri/core/mri.c **** static void clearSingleSteppingInRange(void);
 173:mri/core/mri.c **** static void determineSignalValue(void);
 174:mri/core/mri.c **** static int  isDebugTrap(void);
 175:mri/core/mri.c **** static void prepareForDebuggerExit(void);
 176:mri/core/mri.c **** static void clearFirstExceptionFlag(void);
 177:mri/core/mri.c **** static void waitForAckToBeTransmitted(void);
 178:mri/core/mri.c **** void mriDebugException(MriContext* pContext)
 179:mri/core/mri.c **** {
 180:mri/core/mri.c ****     int justSingleStepped;
 181:mri/core/mri.c **** 
 182:mri/core/mri.c ****     SetContext(pContext);
 183:mri/core/mri.c ****     clearControlCEncounteredFlag();
 184:mri/core/mri.c ****     justSingleStepped = Platform_IsSingleStepping();
 185:mri/core/mri.c **** 
 186:mri/core/mri.c ****     if (wasTempBreakpointHit())
 187:mri/core/mri.c ****     {
 188:mri/core/mri.c ****         TempBreakpointCallbackPtr pTempBreakpointCallback = g_mri.pTempBreakpointCallback;
 189:mri/core/mri.c ****         void* pvTempBreakpointContext = g_mri.pvTempBreakpointContext;
ARM GAS  /tmp/cccmYxwc.s 			page 7


 190:mri/core/mri.c ****         int resumeExecution;
 191:mri/core/mri.c **** 
 192:mri/core/mri.c ****         clearTempBreakpoint();
 193:mri/core/mri.c ****         if (pTempBreakpointCallback)
 194:mri/core/mri.c ****         {
 195:mri/core/mri.c ****             resumeExecution = pTempBreakpointCallback(pvTempBreakpointContext);
 196:mri/core/mri.c ****             if (resumeExecution)
 197:mri/core/mri.c ****             {
 198:mri/core/mri.c ****                 RestoreThreadStates();
 199:mri/core/mri.c ****                 return;
 200:mri/core/mri.c ****             }
 201:mri/core/mri.c ****         }
 202:mri/core/mri.c ****     }
 203:mri/core/mri.c **** 
 204:mri/core/mri.c ****     determineSignalValue();
 205:mri/core/mri.c ****     if (areSingleSteppingInRange())
 206:mri/core/mri.c ****     {
 207:mri/core/mri.c ****         uint32_t pc = Platform_GetProgramCounter();
 208:mri/core/mri.c ****         if (pc >= g_mri.rangeForSingleStepping.start && pc < g_mri.rangeForSingleStepping.end)
 209:mri/core/mri.c ****         {
 210:mri/core/mri.c ****             Platform_DisableSingleStep();
 211:mri/core/mri.c ****             Platform_EnableSingleStep();
 212:mri/core/mri.c ****             RestoreThreadStates();
 213:mri/core/mri.c ****             return;
 214:mri/core/mri.c ****         }
 215:mri/core/mri.c ****     }
 216:mri/core/mri.c ****     clearSingleSteppingInRange();
 217:mri/core/mri.c **** 
 218:mri/core/mri.c ****     if (g_mri.pEnteringHook)
 219:mri/core/mri.c ****         g_mri.pEnteringHook(g_mri.pvEnteringLeavingContext);
 220:mri/core/mri.c ****     Platform_EnteringDebugger();
 221:mri/core/mri.c **** 
 222:mri/core/mri.c ****     if (isDebugTrap() &&
 223:mri/core/mri.c ****         Semihost_IsDebuggeeMakingSemihostCall() &&
 224:mri/core/mri.c ****         Semihost_HandleSemihostRequest() &&
 225:mri/core/mri.c ****         !justSingleStepped )
 226:mri/core/mri.c ****     {
 227:mri/core/mri.c ****         RestoreThreadStates();
 228:mri/core/mri.c ****         prepareForDebuggerExit();
 229:mri/core/mri.c ****         return;
 230:mri/core/mri.c ****     }
 231:mri/core/mri.c **** 
 232:mri/core/mri.c ****     if (!IsFirstException())
 233:mri/core/mri.c ****         Platform_DisplayFaultCauseToGdbConsole();
 234:mri/core/mri.c ****     Send_T_StopResponse();
 235:mri/core/mri.c **** 
 236:mri/core/mri.c ****     GdbCommandHandlingLoop();
 237:mri/core/mri.c **** 
 238:mri/core/mri.c ****     prepareForDebuggerExit();
 239:mri/core/mri.c **** }
 240:mri/core/mri.c **** 
 241:mri/core/mri.c **** static void clearControlCEncounteredFlag(void)
 242:mri/core/mri.c **** {
 165              		.loc 1 242 1 is_stmt 1 view -0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccmYxwc.s 			page 8


 169              		@ link register save eliminated.
 243:mri/core/mri.c ****     g_mri.flags &= ~MRI_FLAGS_ENCOUNTERED_CTRL_C;
 170              		.loc 1 243 5 view .LVU24
 171              		.loc 1 243 10 is_stmt 0 view .LVU25
 172 0000 024A     		ldr	r2, .L15
 173 0002 936B     		ldr	r3, [r2, #56]
 174              		.loc 1 243 17 view .LVU26
 175 0004 23F04003 		bic	r3, r3, #64
 176 0008 9363     		str	r3, [r2, #56]
 244:mri/core/mri.c **** }
 177              		.loc 1 244 1 view .LVU27
 178 000a 7047     		bx	lr
 179              	.L16:
 180              		.align	2
 181              	.L15:
 182 000c 00000000 		.word	g_mri
 183              		.cfi_endproc
 184              	.LFE18:
 186              		.section	.text.clearTempBreakpointFlag,"ax",%progbits
 187              		.align	1
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 192              	clearTempBreakpointFlag:
 193              	.LFB21:
 245:mri/core/mri.c **** 
 246:mri/core/mri.c **** static int wasTempBreakpointHit(void)
 247:mri/core/mri.c **** {
 248:mri/core/mri.c ****     return (isTempBreakpointSet() &&
 249:mri/core/mri.c ****         clearThumbBitOfAddress(Platform_GetProgramCounter()) == g_mri.tempBreakpointAddress);
 250:mri/core/mri.c **** }
 251:mri/core/mri.c **** 
 252:mri/core/mri.c **** static void clearTempBreakpoint(void)
 253:mri/core/mri.c **** {
 254:mri/core/mri.c ****     __try
 255:mri/core/mri.c ****         Platform_ClearHardwareBreakpoint(g_mri.tempBreakpointAddress);
 256:mri/core/mri.c ****     __catch
 257:mri/core/mri.c ****         clearExceptionCode();
 258:mri/core/mri.c ****     g_mri.tempBreakpointAddress = 0;
 259:mri/core/mri.c ****     g_mri.pTempBreakpointCallback = NULL;
 260:mri/core/mri.c ****     g_mri.pvTempBreakpointContext = NULL;
 261:mri/core/mri.c ****     clearTempBreakpointFlag();
 262:mri/core/mri.c **** }
 263:mri/core/mri.c **** 
 264:mri/core/mri.c **** static void clearTempBreakpointFlag(void)
 265:mri/core/mri.c **** {
 194              		.loc 1 265 1 is_stmt 1 view -0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 266:mri/core/mri.c ****     g_mri.flags &= ~MRI_FLAGS_TEMP_BREAKPOINT;
 199              		.loc 1 266 5 view .LVU29
 200              		.loc 1 266 10 is_stmt 0 view .LVU30
 201 0000 024A     		ldr	r2, .L18
 202 0002 936B     		ldr	r3, [r2, #56]
 203              		.loc 1 266 17 view .LVU31
ARM GAS  /tmp/cccmYxwc.s 			page 9


 204 0004 23F00803 		bic	r3, r3, #8
 205 0008 9363     		str	r3, [r2, #56]
 267:mri/core/mri.c **** }
 206              		.loc 1 267 1 view .LVU32
 207 000a 7047     		bx	lr
 208              	.L19:
 209              		.align	2
 210              	.L18:
 211 000c 00000000 		.word	g_mri
 212              		.cfi_endproc
 213              	.LFE21:
 215              		.section	.text.clearSingleSteppingInRange,"ax",%progbits
 216              		.align	1
 217              		.syntax unified
 218              		.thumb
 219              		.thumb_func
 221              	clearSingleSteppingInRange:
 222              	.LFB23:
 268:mri/core/mri.c **** 
 269:mri/core/mri.c **** static int areSingleSteppingInRange(void)
 270:mri/core/mri.c **** {
 271:mri/core/mri.c ****     /* Ignore ranged single stepping if CTRL+C was pressed or... */
 272:mri/core/mri.c ****     if (g_mri.signalValue == SIGINT)
 273:mri/core/mri.c ****         return 0;
 274:mri/core/mri.c ****     /* if a debug breakpoint/watchpoint was hit. */
 275:mri/core/mri.c ****     if (g_mri.signalValue == SIGTRAP)
 276:mri/core/mri.c ****     {
 277:mri/core/mri.c ****         PlatformTrapReason reason = Platform_GetTrapReason();
 278:mri/core/mri.c ****         if (reason.type != MRI_PLATFORM_TRAP_TYPE_UNKNOWN)
 279:mri/core/mri.c ****             return 0;
 280:mri/core/mri.c ****     }
 281:mri/core/mri.c ****     return g_mri.flags & MRI_FLAGS_RANGED_SINGLE_STEP;
 282:mri/core/mri.c **** }
 283:mri/core/mri.c **** 
 284:mri/core/mri.c **** static void clearSingleSteppingInRange(void)
 285:mri/core/mri.c **** {
 223              		.loc 1 285 1 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 286:mri/core/mri.c ****     g_mri.flags &= ~MRI_FLAGS_RANGED_SINGLE_STEP;
 228              		.loc 1 286 5 view .LVU34
 229              		.loc 1 286 10 is_stmt 0 view .LVU35
 230 0000 024A     		ldr	r2, .L21
 231 0002 936B     		ldr	r3, [r2, #56]
 232              		.loc 1 286 17 view .LVU36
 233 0004 23F02003 		bic	r3, r3, #32
 234 0008 9363     		str	r3, [r2, #56]
 287:mri/core/mri.c **** }
 235              		.loc 1 287 1 view .LVU37
 236 000a 7047     		bx	lr
 237              	.L22:
 238              		.align	2
 239              	.L21:
 240 000c 00000000 		.word	g_mri
 241              		.cfi_endproc
ARM GAS  /tmp/cccmYxwc.s 			page 10


 242              	.LFE23:
 244              		.section	.text.isDebugTrap,"ax",%progbits
 245              		.align	1
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 250              	isDebugTrap:
 251              	.LFB25:
 288:mri/core/mri.c **** 
 289:mri/core/mri.c **** static void determineSignalValue(void)
 290:mri/core/mri.c **** {
 291:mri/core/mri.c ****     g_mri.signalValue = Platform_DetermineCauseOfException();
 292:mri/core/mri.c **** }
 293:mri/core/mri.c **** 
 294:mri/core/mri.c **** static int isDebugTrap(void)
 295:mri/core/mri.c **** {
 252              		.loc 1 295 1 is_stmt 1 view -0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 296:mri/core/mri.c ****     return g_mri.signalValue == SIGTRAP;
 257              		.loc 1 296 5 view .LVU39
 258              		.loc 1 296 17 is_stmt 0 view .LVU40
 259 0000 034B     		ldr	r3, .L24
 260 0002 93F84C00 		ldrb	r0, [r3, #76]	@ zero_extendqisi2
 297:mri/core/mri.c **** }
 261              		.loc 1 297 1 view .LVU41
 262 0006 0528     		cmp	r0, #5
 263 0008 14BF     		ite	ne
 264 000a 0020     		movne	r0, #0
 265 000c 0120     		moveq	r0, #1
 266 000e 7047     		bx	lr
 267              	.L25:
 268              		.align	2
 269              	.L24:
 270 0010 00000000 		.word	g_mri
 271              		.cfi_endproc
 272              	.LFE25:
 274              		.section	.text.clearFirstExceptionFlag,"ax",%progbits
 275              		.align	1
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 280              	clearFirstExceptionFlag:
 281              	.LFB28:
 298:mri/core/mri.c **** 
 299:mri/core/mri.c **** static void prepareForDebuggerExit(void)
 300:mri/core/mri.c **** {
 301:mri/core/mri.c ****     if (WasResetOnNextContinueRequested() && !Platform_IsSingleStepping()) {
 302:mri/core/mri.c ****         waitForAckToBeTransmitted();
 303:mri/core/mri.c ****         Platform_ResetDevice();
 304:mri/core/mri.c ****     }
 305:mri/core/mri.c ****     Platform_LeavingDebugger();
 306:mri/core/mri.c ****     if (g_mri.pLeavingHook)
 307:mri/core/mri.c ****         g_mri.pLeavingHook(g_mri.pvEnteringLeavingContext);
 308:mri/core/mri.c ****     clearFirstExceptionFlag();
ARM GAS  /tmp/cccmYxwc.s 			page 11


 309:mri/core/mri.c **** }
 310:mri/core/mri.c **** 
 311:mri/core/mri.c **** static void waitForAckToBeTransmitted(void)
 312:mri/core/mri.c **** {
 313:mri/core/mri.c ****     while ( !Platform_CommHasTransmitCompleted() )
 314:mri/core/mri.c ****     {
 315:mri/core/mri.c ****         /* Waiting for ACK to be sent back to GDB for last command received. */
 316:mri/core/mri.c ****     }
 317:mri/core/mri.c **** }
 318:mri/core/mri.c **** 
 319:mri/core/mri.c **** static void clearFirstExceptionFlag(void)
 320:mri/core/mri.c **** {
 282              		.loc 1 320 1 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 321:mri/core/mri.c ****     g_mri.flags &= ~MRI_FLAGS_FIRST_EXCEPTION;
 287              		.loc 1 321 5 view .LVU43
 288              		.loc 1 321 10 is_stmt 0 view .LVU44
 289 0000 024A     		ldr	r2, .L27
 290 0002 936B     		ldr	r3, [r2, #56]
 291              		.loc 1 321 17 view .LVU45
 292 0004 23F00203 		bic	r3, r3, #2
 293 0008 9363     		str	r3, [r2, #56]
 322:mri/core/mri.c **** }
 294              		.loc 1 322 1 view .LVU46
 295 000a 7047     		bx	lr
 296              	.L28:
 297              		.align	2
 298              	.L27:
 299 000c 00000000 		.word	g_mri
 300              		.cfi_endproc
 301              	.LFE28:
 303              		.section	.text.clearCoreStructure,"ax",%progbits
 304              		.align	1
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 309              	clearCoreStructure:
 310              	.LFB8:
  91:mri/core/mri.c ****     mri_memset(&g_mri, 0, sizeof(g_mri));
 311              		.loc 1 91 1 is_stmt 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315 0000 08B5     		push	{r3, lr}
 316              	.LCFI0:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 3, -8
 319              		.cfi_offset 14, -4
  92:mri/core/mri.c **** }
 320              		.loc 1 92 5 view .LVU48
 321 0002 5022     		movs	r2, #80
 322 0004 0021     		movs	r1, #0
 323 0006 0248     		ldr	r0, .L31
 324 0008 FFF7FEFF 		bl	mri_memset
ARM GAS  /tmp/cccmYxwc.s 			page 12


 325              	.LVL2:
  93:mri/core/mri.c **** 
 326              		.loc 1 93 1 is_stmt 0 view .LVU49
 327 000c 08BD     		pop	{r3, pc}
 328              	.L32:
 329 000e 00BF     		.align	2
 330              	.L31:
 331 0010 00000000 		.word	g_mri
 332              		.cfi_endproc
 333              	.LFE8:
 335              		.section	.text.initializePlatformSpecificModulesWithDebuggerParameters,"ax",%progbits
 336              		.align	1
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	initializePlatformSpecificModulesWithDebuggerParameters:
 342              	.LVL3:
 343              	.LFB9:
  96:mri/core/mri.c ****     Token    tokens;
 344              		.loc 1 96 1 is_stmt 1 view -0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 120
 347              		@ frame_needed = 0, uses_anonymous_args = 0
  96:mri/core/mri.c ****     Token    tokens;
 348              		.loc 1 96 1 is_stmt 0 view .LVU51
 349 0000 30B5     		push	{r4, r5, lr}
 350              	.LCFI1:
 351              		.cfi_def_cfa_offset 12
 352              		.cfi_offset 4, -12
 353              		.cfi_offset 5, -8
 354              		.cfi_offset 14, -4
 355 0002 9FB0     		sub	sp, sp, #124
 356              	.LCFI2:
 357              		.cfi_def_cfa_offset 136
 358 0004 0446     		mov	r4, r0
  97:mri/core/mri.c **** 
 359              		.loc 1 97 5 is_stmt 1 view .LVU52
  99:mri/core/mri.c ****     __try
 360              		.loc 1 99 5 view .LVU53
 361 0006 01A8     		add	r0, sp, #4
 362              	.LVL4:
  99:mri/core/mri.c ****     __try
 363              		.loc 1 99 5 is_stmt 0 view .LVU54
 364 0008 FFF7FEFF 		bl	mriToken_Init
 365              	.LVL5:
 100:mri/core/mri.c ****     {
 366              		.loc 1 100 5 is_stmt 1 view .LVU55
 100:mri/core/mri.c ****     {
 367              		.loc 1 100 5 view .LVU56
 368              	.LBB14:
 369              	.LBI14:
 370              		.file 2 "mri/core/try_catch.h"
   1:mri/core/try_catch.h **** /* Copyright 2014 Adam Green (https://github.com/adamgreen/)
   2:mri/core/try_catch.h **** 
   3:mri/core/try_catch.h ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/try_catch.h ****    you may not use this file except in compliance with the License.
   5:mri/core/try_catch.h ****    You may obtain a copy of the License at
ARM GAS  /tmp/cccmYxwc.s 			page 13


   6:mri/core/try_catch.h **** 
   7:mri/core/try_catch.h ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/try_catch.h **** 
   9:mri/core/try_catch.h ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/try_catch.h ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/try_catch.h ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/try_catch.h ****    See the License for the specific language governing permissions and
  13:mri/core/try_catch.h ****    limitations under the License.
  14:mri/core/try_catch.h **** */
  15:mri/core/try_catch.h **** /* Very rough exception handling like macros for C. */
  16:mri/core/try_catch.h **** #ifndef MRI_TRY_CATCH_H_
  17:mri/core/try_catch.h **** #define MRI_TRY_CATCH_H_
  18:mri/core/try_catch.h **** 
  19:mri/core/try_catch.h **** #define noException                         0
  20:mri/core/try_catch.h **** #define bufferOverrunException              1
  21:mri/core/try_catch.h **** #define invalidHexDigitException            2
  22:mri/core/try_catch.h **** #define invalidValueException               3
  23:mri/core/try_catch.h **** #define invalidArgumentException            4
  24:mri/core/try_catch.h **** #define timeoutException                    5
  25:mri/core/try_catch.h **** #define invalidIndexException               6
  26:mri/core/try_catch.h **** #define notFoundException                   7
  27:mri/core/try_catch.h **** #define exceededHardwareResourcesException  8
  28:mri/core/try_catch.h **** #define invalidDecDigitException            9
  29:mri/core/try_catch.h **** #define memFaultException                   10
  30:mri/core/try_catch.h **** #define mriMaxException                     15
  31:mri/core/try_catch.h **** 
  32:mri/core/try_catch.h **** extern int mriExceptionCode;
  33:mri/core/try_catch.h **** 
  34:mri/core/try_catch.h **** 
  35:mri/core/try_catch.h **** /* Allow an application including MRI to extend with their own exception codes and replace the belo
  36:mri/core/try_catch.h **** #ifndef MRI_SKIP_TRY_CATCH_MACRO_DEFINES
  37:mri/core/try_catch.h **** 
  38:mri/core/try_catch.h **** /* On Linux, it is possible that __try and __catch are already defined. */
  39:mri/core/try_catch.h **** #undef __try
  40:mri/core/try_catch.h **** #undef __catch
  41:mri/core/try_catch.h **** 
  42:mri/core/try_catch.h **** #define __throws
  43:mri/core/try_catch.h **** 
  44:mri/core/try_catch.h **** #define __try \
  45:mri/core/try_catch.h ****         do \
  46:mri/core/try_catch.h ****         { \
  47:mri/core/try_catch.h ****             clearExceptionCode();
  48:mri/core/try_catch.h **** 
  49:mri/core/try_catch.h **** #define __throwing_func(X) \
  50:mri/core/try_catch.h ****             X; \
  51:mri/core/try_catch.h ****             if (mriExceptionCode) \
  52:mri/core/try_catch.h ****                 break;
  53:mri/core/try_catch.h **** 
  54:mri/core/try_catch.h **** #define __catch \
  55:mri/core/try_catch.h ****         } while (0); \
  56:mri/core/try_catch.h ****         if (mriExceptionCode)
  57:mri/core/try_catch.h **** 
  58:mri/core/try_catch.h **** #define __throw(EXCEPTION) return ((void)setExceptionCode(EXCEPTION))
  59:mri/core/try_catch.h **** 
  60:mri/core/try_catch.h **** #define __throw_and_return(EXCEPTION, RETURN) return (setExceptionCode(EXCEPTION), (RETURN))
  61:mri/core/try_catch.h **** 
  62:mri/core/try_catch.h **** #define __rethrow return
ARM GAS  /tmp/cccmYxwc.s 			page 14


  63:mri/core/try_catch.h **** 
  64:mri/core/try_catch.h **** #define __rethrow_and_return(RETURN) return RETURN
  65:mri/core/try_catch.h **** 
  66:mri/core/try_catch.h **** static inline int getExceptionCode(void)
  67:mri/core/try_catch.h **** {
  68:mri/core/try_catch.h ****     return mriExceptionCode;
  69:mri/core/try_catch.h **** }
  70:mri/core/try_catch.h **** 
  71:mri/core/try_catch.h **** static inline void setExceptionCode(int exceptionCode)
  72:mri/core/try_catch.h **** {
  73:mri/core/try_catch.h ****     mriExceptionCode = exceptionCode > mriExceptionCode ? exceptionCode : mriExceptionCode;
  74:mri/core/try_catch.h **** }
  75:mri/core/try_catch.h **** 
  76:mri/core/try_catch.h **** static inline void clearExceptionCode(void)
 371              		.loc 2 76 20 view .LVU57
 372              	.LBB15:
  77:mri/core/try_catch.h **** {
  78:mri/core/try_catch.h ****     mriExceptionCode = noException;
 373              		.loc 2 78 5 view .LVU58
 374              		.loc 2 78 22 is_stmt 0 view .LVU59
 375 000c 074D     		ldr	r5, .L39
 376 000e 0023     		movs	r3, #0
 377 0010 2B60     		str	r3, [r5]
 378              	.LBE15:
 379              	.LBE14:
 102:mri/core/mri.c ****         __throwing_func( Platform_Init(&tokens) );
 380              		.loc 1 102 9 is_stmt 1 view .LVU60
 381 0012 2146     		mov	r1, r4
 382 0014 01A8     		add	r0, sp, #4
 383 0016 FFF7FEFF 		bl	mriToken_SplitString
 384              	.LVL6:
 102:mri/core/mri.c ****         __throwing_func( Platform_Init(&tokens) );
 385              		.loc 1 102 9 view .LVU61
 386 001a 2B68     		ldr	r3, [r5]
 387 001c 0BB1     		cbz	r3, .L38
 388              	.L34:
 103:mri/core/mri.c ****     }
 389              		.loc 1 103 50 discriminator 1 view .LVU62
 100:mri/core/mri.c ****     {
 390              		.loc 1 100 5 discriminator 1 view .LVU63
 105:mri/core/mri.c ****         __rethrow;
 391              		.loc 1 105 5 discriminator 1 view .LVU64
 107:mri/core/mri.c **** 
 392              		.loc 1 107 1 is_stmt 0 discriminator 1 view .LVU65
 393 001e 1FB0     		add	sp, sp, #124
 394              	.LCFI3:
 395              		.cfi_remember_state
 396              		.cfi_def_cfa_offset 12
 397              		@ sp needed
 398 0020 30BD     		pop	{r4, r5, pc}
 399              	.LVL7:
 400              	.L38:
 401              	.LCFI4:
 402              		.cfi_restore_state
 102:mri/core/mri.c ****         __throwing_func( Platform_Init(&tokens) );
 403              		.loc 1 102 75 is_stmt 1 discriminator 1 view .LVU66
 103:mri/core/mri.c ****     }
ARM GAS  /tmp/cccmYxwc.s 			page 15


 404              		.loc 1 103 9 discriminator 1 view .LVU67
 405 0022 01A8     		add	r0, sp, #4
 406 0024 FFF7FEFF 		bl	mriPlatform_Init
 407              	.LVL8:
 103:mri/core/mri.c ****     }
 408              		.loc 1 103 9 discriminator 1 view .LVU68
 409 0028 F9E7     		b	.L34
 410              	.L40:
 411 002a 00BF     		.align	2
 412              	.L39:
 413 002c 00000000 		.word	mriExceptionCode
 414              		.cfi_endproc
 415              	.LFE9:
 417              		.section	.text.wasTempBreakpointHit,"ax",%progbits
 418              		.align	1
 419              		.syntax unified
 420              		.thumb
 421              		.thumb_func
 423              	wasTempBreakpointHit:
 424              	.LFB19:
 247:mri/core/mri.c ****     return (isTempBreakpointSet() &&
 425              		.loc 1 247 1 view -0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429 0000 08B5     		push	{r3, lr}
 430              	.LCFI5:
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 3, -8
 433              		.cfi_offset 14, -4
 248:mri/core/mri.c ****         clearThumbBitOfAddress(Platform_GetProgramCounter()) == g_mri.tempBreakpointAddress);
 434              		.loc 1 248 5 view .LVU70
 248:mri/core/mri.c ****         clearThumbBitOfAddress(Platform_GetProgramCounter()) == g_mri.tempBreakpointAddress);
 435              		.loc 1 248 13 is_stmt 0 view .LVU71
 436 0002 FFF7FEFF 		bl	isTempBreakpointSet
 437              	.LVL9:
 248:mri/core/mri.c ****         clearThumbBitOfAddress(Platform_GetProgramCounter()) == g_mri.tempBreakpointAddress);
 438              		.loc 1 248 35 view .LVU72
 439 0006 00B9     		cbnz	r0, .L45
 440              	.L41:
 250:mri/core/mri.c **** 
 441              		.loc 1 250 1 view .LVU73
 442 0008 08BD     		pop	{r3, pc}
 443              	.L45:
 249:mri/core/mri.c **** }
 444              		.loc 1 249 9 discriminator 1 view .LVU74
 445 000a FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 446              	.LVL10:
 447 000e FFF7FEFF 		bl	clearThumbBitOfAddress
 448              	.LVL11:
 249:mri/core/mri.c **** }
 449              		.loc 1 249 70 discriminator 1 view .LVU75
 450 0012 044B     		ldr	r3, .L47
 451 0014 5B6B     		ldr	r3, [r3, #52]
 248:mri/core/mri.c ****         clearThumbBitOfAddress(Platform_GetProgramCounter()) == g_mri.tempBreakpointAddress);
 452              		.loc 1 248 35 discriminator 1 view .LVU76
 453 0016 9842     		cmp	r0, r3
ARM GAS  /tmp/cccmYxwc.s 			page 16


 454 0018 01D0     		beq	.L46
 248:mri/core/mri.c ****         clearThumbBitOfAddress(Platform_GetProgramCounter()) == g_mri.tempBreakpointAddress);
 455              		.loc 1 248 35 view .LVU77
 456 001a 0020     		movs	r0, #0
 457 001c F4E7     		b	.L41
 458              	.L46:
 459 001e 0120     		movs	r0, #1
 460 0020 F2E7     		b	.L41
 461              	.L48:
 462 0022 00BF     		.align	2
 463              	.L47:
 464 0024 00000000 		.word	g_mri
 465              		.cfi_endproc
 466              	.LFE19:
 468              		.section	.text.clearTempBreakpoint,"ax",%progbits
 469              		.align	1
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 474              	clearTempBreakpoint:
 475              	.LFB20:
 253:mri/core/mri.c ****     __try
 476              		.loc 1 253 1 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480 0000 10B5     		push	{r4, lr}
 481              	.LCFI6:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 4, -8
 484              		.cfi_offset 14, -4
 254:mri/core/mri.c ****         Platform_ClearHardwareBreakpoint(g_mri.tempBreakpointAddress);
 485              		.loc 1 254 5 view .LVU79
 254:mri/core/mri.c ****         Platform_ClearHardwareBreakpoint(g_mri.tempBreakpointAddress);
 486              		.loc 1 254 5 view .LVU80
 487              	.LBB16:
 488              	.LBI16:
  76:mri/core/try_catch.h **** {
 489              		.loc 2 76 20 view .LVU81
 490              	.LBB17:
 491              		.loc 2 78 5 view .LVU82
 492              		.loc 2 78 22 is_stmt 0 view .LVU83
 493 0002 094C     		ldr	r4, .L52
 494 0004 0023     		movs	r3, #0
 495 0006 2360     		str	r3, [r4]
 496              	.LBE17:
 497              	.LBE16:
 255:mri/core/mri.c ****     __catch
 498              		.loc 1 255 9 is_stmt 1 view .LVU84
 499 0008 084B     		ldr	r3, .L52+4
 500 000a 586B     		ldr	r0, [r3, #52]
 501 000c FFF7FEFF 		bl	mriPlatform_ClearHardwareBreakpoint
 502              	.LVL12:
 254:mri/core/mri.c ****         Platform_ClearHardwareBreakpoint(g_mri.tempBreakpointAddress);
 503              		.loc 1 254 5 view .LVU85
 256:mri/core/mri.c ****         clearExceptionCode();
 504              		.loc 1 256 5 view .LVU86
ARM GAS  /tmp/cccmYxwc.s 			page 17


 505 0010 2368     		ldr	r3, [r4]
 506 0012 0BB1     		cbz	r3, .L50
 257:mri/core/mri.c ****     g_mri.tempBreakpointAddress = 0;
 507              		.loc 1 257 9 view .LVU87
 508              	.LBB18:
 509              	.LBI18:
  76:mri/core/try_catch.h **** {
 510              		.loc 2 76 20 view .LVU88
 511              	.LBB19:
 512              		.loc 2 78 5 view .LVU89
 513              		.loc 2 78 22 is_stmt 0 view .LVU90
 514 0014 0022     		movs	r2, #0
 515 0016 2260     		str	r2, [r4]
 516              	.L50:
 517              	.LBE19:
 518              	.LBE18:
 258:mri/core/mri.c ****     g_mri.pTempBreakpointCallback = NULL;
 519              		.loc 1 258 5 is_stmt 1 view .LVU91
 258:mri/core/mri.c ****     g_mri.pTempBreakpointCallback = NULL;
 520              		.loc 1 258 33 is_stmt 0 view .LVU92
 521 0018 044B     		ldr	r3, .L52+4
 522 001a 0022     		movs	r2, #0
 523 001c 5A63     		str	r2, [r3, #52]
 259:mri/core/mri.c ****     g_mri.pvTempBreakpointContext = NULL;
 524              		.loc 1 259 5 is_stmt 1 view .LVU93
 259:mri/core/mri.c ****     g_mri.pvTempBreakpointContext = NULL;
 525              		.loc 1 259 35 is_stmt 0 view .LVU94
 526 001e 1A60     		str	r2, [r3]
 260:mri/core/mri.c ****     clearTempBreakpointFlag();
 527              		.loc 1 260 5 is_stmt 1 view .LVU95
 260:mri/core/mri.c ****     clearTempBreakpointFlag();
 528              		.loc 1 260 35 is_stmt 0 view .LVU96
 529 0020 5A60     		str	r2, [r3, #4]
 261:mri/core/mri.c **** }
 530              		.loc 1 261 5 is_stmt 1 view .LVU97
 531 0022 FFF7FEFF 		bl	clearTempBreakpointFlag
 532              	.LVL13:
 262:mri/core/mri.c **** 
 533              		.loc 1 262 1 is_stmt 0 view .LVU98
 534 0026 10BD     		pop	{r4, pc}
 535              	.L53:
 536              		.align	2
 537              	.L52:
 538 0028 00000000 		.word	mriExceptionCode
 539 002c 00000000 		.word	g_mri
 540              		.cfi_endproc
 541              	.LFE20:
 543              		.section	.text.determineSignalValue,"ax",%progbits
 544              		.align	1
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 549              	determineSignalValue:
 550              	.LFB24:
 290:mri/core/mri.c ****     g_mri.signalValue = Platform_DetermineCauseOfException();
 551              		.loc 1 290 1 is_stmt 1 view -0
 552              		.cfi_startproc
ARM GAS  /tmp/cccmYxwc.s 			page 18


 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 0, uses_anonymous_args = 0
 555 0000 08B5     		push	{r3, lr}
 556              	.LCFI7:
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 3, -8
 559              		.cfi_offset 14, -4
 291:mri/core/mri.c **** }
 560              		.loc 1 291 5 view .LVU100
 291:mri/core/mri.c **** }
 561              		.loc 1 291 25 is_stmt 0 view .LVU101
 562 0002 FFF7FEFF 		bl	mriPlatform_DetermineCauseOfException
 563              	.LVL14:
 291:mri/core/mri.c **** }
 564              		.loc 1 291 23 view .LVU102
 565 0006 024B     		ldr	r3, .L56
 566 0008 83F84C00 		strb	r0, [r3, #76]
 292:mri/core/mri.c **** 
 567              		.loc 1 292 1 view .LVU103
 568 000c 08BD     		pop	{r3, pc}
 569              	.L57:
 570 000e 00BF     		.align	2
 571              	.L56:
 572 0010 00000000 		.word	g_mri
 573              		.cfi_endproc
 574              	.LFE24:
 576              		.section	.text.areSingleSteppingInRange,"ax",%progbits
 577              		.align	1
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 582              	areSingleSteppingInRange:
 583              	.LFB22:
 270:mri/core/mri.c ****     /* Ignore ranged single stepping if CTRL+C was pressed or... */
 584              		.loc 1 270 1 is_stmt 1 view -0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 8
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 272:mri/core/mri.c ****         return 0;
 588              		.loc 1 272 5 view .LVU105
 272:mri/core/mri.c ****         return 0;
 589              		.loc 1 272 14 is_stmt 0 view .LVU106
 590 0000 0F4B     		ldr	r3, .L70
 591 0002 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 272:mri/core/mri.c ****         return 0;
 592              		.loc 1 272 8 view .LVU107
 593 0006 022B     		cmp	r3, #2
 594 0008 17D0     		beq	.L62
 275:mri/core/mri.c ****     {
 595              		.loc 1 275 5 is_stmt 1 view .LVU108
 275:mri/core/mri.c ****     {
 596              		.loc 1 275 8 is_stmt 0 view .LVU109
 597 000a 052B     		cmp	r3, #5
 598 000c 04D0     		beq	.L68
 281:mri/core/mri.c **** }
 599              		.loc 1 281 5 is_stmt 1 view .LVU110
 281:mri/core/mri.c **** }
ARM GAS  /tmp/cccmYxwc.s 			page 19


 600              		.loc 1 281 17 is_stmt 0 view .LVU111
 601 000e 0C4B     		ldr	r3, .L70
 602 0010 986B     		ldr	r0, [r3, #56]
 281:mri/core/mri.c **** }
 603              		.loc 1 281 24 view .LVU112
 604 0012 00F02000 		and	r0, r0, #32
 282:mri/core/mri.c **** 
 605              		.loc 1 282 1 view .LVU113
 606 0016 7047     		bx	lr
 607              	.L68:
 270:mri/core/mri.c ****     /* Ignore ranged single stepping if CTRL+C was pressed or... */
 608              		.loc 1 270 1 view .LVU114
 609 0018 00B5     		push	{lr}
 610              	.LCFI8:
 611              		.cfi_def_cfa_offset 4
 612              		.cfi_offset 14, -4
 613 001a 83B0     		sub	sp, sp, #12
 614              	.LCFI9:
 615              		.cfi_def_cfa_offset 16
 616              	.LBB20:
 277:mri/core/mri.c ****         if (reason.type != MRI_PLATFORM_TRAP_TYPE_UNKNOWN)
 617              		.loc 1 277 9 is_stmt 1 view .LVU115
 277:mri/core/mri.c ****         if (reason.type != MRI_PLATFORM_TRAP_TYPE_UNKNOWN)
 618              		.loc 1 277 37 is_stmt 0 view .LVU116
 619 001c 6846     		mov	r0, sp
 620 001e FFF7FEFF 		bl	mriPlatform_GetTrapReason
 621              	.LVL15:
 278:mri/core/mri.c ****             return 0;
 622              		.loc 1 278 9 is_stmt 1 view .LVU117
 278:mri/core/mri.c ****             return 0;
 623              		.loc 1 278 19 is_stmt 0 view .LVU118
 624 0022 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 278:mri/core/mri.c ****             return 0;
 625              		.loc 1 278 12 view .LVU119
 626 0026 33B9     		cbnz	r3, .L69
 627              	.LBE20:
 281:mri/core/mri.c **** }
 628              		.loc 1 281 5 is_stmt 1 view .LVU120
 281:mri/core/mri.c **** }
 629              		.loc 1 281 17 is_stmt 0 view .LVU121
 630 0028 054B     		ldr	r3, .L70
 631 002a 986B     		ldr	r0, [r3, #56]
 281:mri/core/mri.c **** }
 632              		.loc 1 281 24 view .LVU122
 633 002c 00F02000 		and	r0, r0, #32
 634              	.L58:
 282:mri/core/mri.c **** 
 635              		.loc 1 282 1 view .LVU123
 636 0030 03B0     		add	sp, sp, #12
 637              	.LCFI10:
 638              		.cfi_remember_state
 639              		.cfi_def_cfa_offset 4
 640              		@ sp needed
 641 0032 5DF804FB 		ldr	pc, [sp], #4
 642              	.L69:
 643              	.LCFI11:
 644              		.cfi_restore_state
ARM GAS  /tmp/cccmYxwc.s 			page 20


 645              	.LBB21:
 279:mri/core/mri.c ****     }
 646              		.loc 1 279 13 is_stmt 1 view .LVU124
 279:mri/core/mri.c ****     }
 647              		.loc 1 279 20 is_stmt 0 view .LVU125
 648 0036 0020     		movs	r0, #0
 649 0038 FAE7     		b	.L58
 650              	.L62:
 651              	.LCFI12:
 652              		.cfi_def_cfa_offset 0
 653              		.cfi_restore 14
 654              	.LBE21:
 273:mri/core/mri.c ****     /* if a debug breakpoint/watchpoint was hit. */
 655              		.loc 1 273 16 view .LVU126
 656 003a 0020     		movs	r0, #0
 657 003c 7047     		bx	lr
 658              	.L71:
 659 003e 00BF     		.align	2
 660              	.L70:
 661 0040 00000000 		.word	g_mri
 662              		.cfi_endproc
 663              	.LFE22:
 665              		.section	.text.waitForAckToBeTransmitted,"ax",%progbits
 666              		.align	1
 667              		.syntax unified
 668              		.thumb
 669              		.thumb_func
 671              	waitForAckToBeTransmitted:
 672              	.LFB27:
 312:mri/core/mri.c ****     while ( !Platform_CommHasTransmitCompleted() )
 673              		.loc 1 312 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677 0000 08B5     		push	{r3, lr}
 678              	.LCFI13:
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 3, -8
 681              		.cfi_offset 14, -4
 682              	.L73:
 316:mri/core/mri.c **** }
 683              		.loc 1 316 5 discriminator 1 view .LVU128
 313:mri/core/mri.c ****     {
 684              		.loc 1 313 13 discriminator 1 view .LVU129
 313:mri/core/mri.c ****     {
 685              		.loc 1 313 14 is_stmt 0 discriminator 1 view .LVU130
 686 0002 FFF7FEFF 		bl	mriPlatform_CommHasTransmitCompleted
 687              	.LVL16:
 313:mri/core/mri.c ****     {
 688              		.loc 1 313 13 discriminator 1 view .LVU131
 689 0006 0028     		cmp	r0, #0
 690 0008 FBD0     		beq	.L73
 317:mri/core/mri.c **** 
 691              		.loc 1 317 1 view .LVU132
 692 000a 08BD     		pop	{r3, pc}
 693              		.cfi_endproc
 694              	.LFE27:
ARM GAS  /tmp/cccmYxwc.s 			page 21


 696              		.section	.text.mriInit,"ax",%progbits
 697              		.align	1
 698              		.global	mriInit
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 703              	mriInit:
 704              	.LVL17:
 705              	.LFB7:
  78:mri/core/mri.c ****     clearCoreStructure();
 706              		.loc 1 78 1 is_stmt 1 view -0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
  78:mri/core/mri.c ****     clearCoreStructure();
 710              		.loc 1 78 1 is_stmt 0 view .LVU134
 711 0000 38B5     		push	{r3, r4, r5, lr}
 712              	.LCFI14:
 713              		.cfi_def_cfa_offset 16
 714              		.cfi_offset 3, -16
 715              		.cfi_offset 4, -12
 716              		.cfi_offset 5, -8
 717              		.cfi_offset 14, -4
 718 0002 0446     		mov	r4, r0
  79:mri/core/mri.c **** 
 719              		.loc 1 79 5 is_stmt 1 view .LVU135
 720 0004 FFF7FEFF 		bl	clearCoreStructure
 721              	.LVL18:
  81:mri/core/mri.c ****         initializePlatformSpecificModulesWithDebuggerParameters(pDebuggerParameters);
 722              		.loc 1 81 5 view .LVU136
  81:mri/core/mri.c ****         initializePlatformSpecificModulesWithDebuggerParameters(pDebuggerParameters);
 723              		.loc 1 81 5 view .LVU137
 724              	.LBB22:
 725              	.LBI22:
  76:mri/core/try_catch.h **** {
 726              		.loc 2 76 20 view .LVU138
 727              	.LBB23:
 728              		.loc 2 78 5 view .LVU139
 729              		.loc 2 78 22 is_stmt 0 view .LVU140
 730 0008 064D     		ldr	r5, .L79
 731 000a 0023     		movs	r3, #0
 732 000c 2B60     		str	r3, [r5]
 733              	.LBE23:
 734              	.LBE22:
  82:mri/core/mri.c ****     __catch
 735              		.loc 1 82 9 is_stmt 1 view .LVU141
 736 000e 2046     		mov	r0, r4
 737 0010 FFF7FEFF 		bl	initializePlatformSpecificModulesWithDebuggerParameters
 738              	.LVL19:
  81:mri/core/mri.c ****         initializePlatformSpecificModulesWithDebuggerParameters(pDebuggerParameters);
 739              		.loc 1 81 5 view .LVU142
  83:mri/core/mri.c ****         return;
 740              		.loc 1 83 5 view .LVU143
 741 0014 2B68     		ldr	r3, [r5]
 742 0016 03B1     		cbz	r3, .L78
 743              	.L75:
  88:mri/core/mri.c **** 
ARM GAS  /tmp/cccmYxwc.s 			page 22


 744              		.loc 1 88 1 is_stmt 0 view .LVU144
 745 0018 38BD     		pop	{r3, r4, r5, pc}
 746              	.LVL20:
 747              	.L78:
  86:mri/core/mri.c ****     setSuccessfulInitFlag();
 748              		.loc 1 86 5 is_stmt 1 view .LVU145
 749 001a FFF7FEFF 		bl	setFirstExceptionFlag
 750              	.LVL21:
  87:mri/core/mri.c **** }
 751              		.loc 1 87 5 view .LVU146
 752 001e FFF7FEFF 		bl	setSuccessfulInitFlag
 753              	.LVL22:
 754 0022 F9E7     		b	.L75
 755              	.L80:
 756              		.align	2
 757              	.L79:
 758 0024 00000000 		.word	mriExceptionCode
 759              		.cfi_endproc
 760              	.LFE7:
 762              		.section	.text.mriCore_SetTempBreakpoint,"ax",%progbits
 763              		.align	1
 764              		.global	mriCore_SetTempBreakpoint
 765              		.syntax unified
 766              		.thumb
 767              		.thumb_func
 769              	mriCore_SetTempBreakpoint:
 770              	.LVL23:
 771              	.LFB12:
 124:mri/core/mri.c ****     if (isTempBreakpointSet())
 772              		.loc 1 124 1 view -0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 124:mri/core/mri.c ****     if (isTempBreakpointSet())
 776              		.loc 1 124 1 is_stmt 0 view .LVU148
 777 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 778              	.LCFI15:
 779              		.cfi_def_cfa_offset 24
 780              		.cfi_offset 4, -24
 781              		.cfi_offset 5, -20
 782              		.cfi_offset 6, -16
 783              		.cfi_offset 7, -12
 784              		.cfi_offset 8, -8
 785              		.cfi_offset 14, -4
 786 0004 0446     		mov	r4, r0
 787 0006 0F46     		mov	r7, r1
 788 0008 1646     		mov	r6, r2
 125:mri/core/mri.c ****         return 0;
 789              		.loc 1 125 5 is_stmt 1 view .LVU149
 125:mri/core/mri.c ****         return 0;
 790              		.loc 1 125 9 is_stmt 0 view .LVU150
 791 000a FFF7FEFF 		bl	isTempBreakpointSet
 792              	.LVL24:
 125:mri/core/mri.c ****         return 0;
 793              		.loc 1 125 8 view .LVU151
 794 000e 18B1     		cbz	r0, .L86
 126:mri/core/mri.c **** 
ARM GAS  /tmp/cccmYxwc.s 			page 23


 795              		.loc 1 126 16 view .LVU152
 796 0010 0025     		movs	r5, #0
 797              	.L81:
 141:mri/core/mri.c **** 
 798              		.loc 1 141 1 view .LVU153
 799 0012 2846     		mov	r0, r5
 800 0014 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 801              	.LVL25:
 802              	.L86:
 141:mri/core/mri.c **** 
 803              		.loc 1 141 1 view .LVU154
 804 0018 0546     		mov	r5, r0
 128:mri/core/mri.c ****     __try
 805              		.loc 1 128 5 is_stmt 1 view .LVU155
 128:mri/core/mri.c ****     __try
 806              		.loc 1 128 25 is_stmt 0 view .LVU156
 807 001a 2046     		mov	r0, r4
 808 001c FFF7FEFF 		bl	clearThumbBitOfAddress
 809              	.LVL26:
 810 0020 0446     		mov	r4, r0
 811              	.LVL27:
 129:mri/core/mri.c ****         Platform_SetHardwareBreakpoint(breakpointAddress);
 812              		.loc 1 129 5 is_stmt 1 view .LVU157
 129:mri/core/mri.c ****         Platform_SetHardwareBreakpoint(breakpointAddress);
 813              		.loc 1 129 5 view .LVU158
 814              	.LBB24:
 815              	.LBI24:
  76:mri/core/try_catch.h **** {
 816              		.loc 2 76 20 view .LVU159
 817              	.LBB25:
 818              		.loc 2 78 5 view .LVU160
 819              		.loc 2 78 22 is_stmt 0 view .LVU161
 820 0022 DFF83080 		ldr	r8, .L87+4
 821 0026 0023     		movs	r3, #0
 822 0028 C8F80030 		str	r3, [r8]
 823              	.LBE25:
 824              	.LBE24:
 130:mri/core/mri.c ****     __catch
 825              		.loc 1 130 9 is_stmt 1 view .LVU162
 826 002c FFF7FEFF 		bl	mriPlatform_SetHardwareBreakpoint
 827              	.LVL28:
 129:mri/core/mri.c ****         Platform_SetHardwareBreakpoint(breakpointAddress);
 828              		.loc 1 129 5 view .LVU163
 131:mri/core/mri.c ****     {
 829              		.loc 1 131 5 view .LVU164
 830 0030 D8F80030 		ldr	r3, [r8]
 831 0034 1BB1     		cbz	r3, .L83
 133:mri/core/mri.c ****         return 0;
 832              		.loc 1 133 9 view .LVU165
 833              	.LBB26:
 834              	.LBI26:
  76:mri/core/try_catch.h **** {
 835              		.loc 2 76 20 view .LVU166
 836              	.LBB27:
 837              		.loc 2 78 5 view .LVU167
 838              		.loc 2 78 22 is_stmt 0 view .LVU168
 839 0036 0022     		movs	r2, #0
ARM GAS  /tmp/cccmYxwc.s 			page 24


 840 0038 C8F80020 		str	r2, [r8]
 841              	.LBE27:
 842              	.LBE26:
 134:mri/core/mri.c ****     }
 843              		.loc 1 134 9 is_stmt 1 view .LVU169
 134:mri/core/mri.c ****     }
 844              		.loc 1 134 16 is_stmt 0 view .LVU170
 845 003c E9E7     		b	.L81
 846              	.L83:
 136:mri/core/mri.c ****     g_mri.pTempBreakpointCallback = pCallback;
 847              		.loc 1 136 5 is_stmt 1 view .LVU171
 136:mri/core/mri.c ****     g_mri.pTempBreakpointCallback = pCallback;
 848              		.loc 1 136 33 is_stmt 0 view .LVU172
 849 003e 044B     		ldr	r3, .L87
 850 0040 5C63     		str	r4, [r3, #52]
 137:mri/core/mri.c ****     g_mri.pvTempBreakpointContext = pvContext;
 851              		.loc 1 137 5 is_stmt 1 view .LVU173
 137:mri/core/mri.c ****     g_mri.pvTempBreakpointContext = pvContext;
 852              		.loc 1 137 35 is_stmt 0 view .LVU174
 853 0042 1F60     		str	r7, [r3]
 138:mri/core/mri.c ****     setTempBreakpointFlag();
 854              		.loc 1 138 5 is_stmt 1 view .LVU175
 138:mri/core/mri.c ****     setTempBreakpointFlag();
 855              		.loc 1 138 35 is_stmt 0 view .LVU176
 856 0044 5E60     		str	r6, [r3, #4]
 139:mri/core/mri.c ****     return 1;
 857              		.loc 1 139 5 is_stmt 1 view .LVU177
 858 0046 FFF7FEFF 		bl	setTempBreakpointFlag
 859              	.LVL29:
 140:mri/core/mri.c **** }
 860              		.loc 1 140 5 view .LVU178
 140:mri/core/mri.c **** }
 861              		.loc 1 140 12 is_stmt 0 view .LVU179
 862 004a 0125     		movs	r5, #1
 863 004c E1E7     		b	.L81
 864              	.L88:
 865 004e 00BF     		.align	2
 866              	.L87:
 867 0050 00000000 		.word	g_mri
 868 0054 00000000 		.word	mriExceptionCode
 869              		.cfi_endproc
 870              	.LFE12:
 872              		.section	.text.mriCoreSetDebuggerHooks,"ax",%progbits
 873              		.align	1
 874              		.global	mriCoreSetDebuggerHooks
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 879              	mriCoreSetDebuggerHooks:
 880              	.LVL30:
 881              	.LFB16:
 160:mri/core/mri.c ****     g_mri.pEnteringHook = pEnteringHook;
 882              		.loc 1 160 1 is_stmt 1 view -0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 886              		@ link register save eliminated.
ARM GAS  /tmp/cccmYxwc.s 			page 25


 161:mri/core/mri.c ****     g_mri.pLeavingHook = pLeavingHook;
 887              		.loc 1 161 5 view .LVU181
 161:mri/core/mri.c ****     g_mri.pLeavingHook = pLeavingHook;
 888              		.loc 1 161 25 is_stmt 0 view .LVU182
 889 0000 024B     		ldr	r3, .L90
 890 0002 9860     		str	r0, [r3, #8]
 162:mri/core/mri.c ****     g_mri.pvEnteringLeavingContext = pvContext;
 891              		.loc 1 162 5 is_stmt 1 view .LVU183
 162:mri/core/mri.c ****     g_mri.pvEnteringLeavingContext = pvContext;
 892              		.loc 1 162 24 is_stmt 0 view .LVU184
 893 0004 D960     		str	r1, [r3, #12]
 163:mri/core/mri.c **** }
 894              		.loc 1 163 5 is_stmt 1 view .LVU185
 163:mri/core/mri.c **** }
 895              		.loc 1 163 36 is_stmt 0 view .LVU186
 896 0006 1A61     		str	r2, [r3, #16]
 164:mri/core/mri.c **** 
 897              		.loc 1 164 1 view .LVU187
 898 0008 7047     		bx	lr
 899              	.L91:
 900 000a 00BF     		.align	2
 901              	.L90:
 902 000c 00000000 		.word	g_mri
 903              		.cfi_endproc
 904              	.LFE16:
 906              		.section	.text.mriCore_InitPacketBuffers,"ax",%progbits
 907              		.align	1
 908              		.global	mriCore_InitPacketBuffers
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 913              	mriCore_InitPacketBuffers:
 914              	.LFB32:
 323:mri/core/mri.c **** 
 324:mri/core/mri.c **** 
 325:mri/core/mri.c **** /*********************************************/
 326:mri/core/mri.c **** /* Routines to manipulate MRI state objects. */
 327:mri/core/mri.c **** /*********************************************/
 328:mri/core/mri.c **** static int handleGDBCommand(void);
 329:mri/core/mri.c **** static void getPacketFromGDB(void);
 330:mri/core/mri.c **** void GdbCommandHandlingLoop(void)
 331:mri/core/mri.c **** {
 332:mri/core/mri.c ****     int startDebuggeeUpAgain;
 333:mri/core/mri.c **** 
 334:mri/core/mri.c ****     do
 335:mri/core/mri.c ****     {
 336:mri/core/mri.c ****         startDebuggeeUpAgain = handleGDBCommand();
 337:mri/core/mri.c ****     } while (!startDebuggeeUpAgain);
 338:mri/core/mri.c **** }
 339:mri/core/mri.c **** 
 340:mri/core/mri.c **** __attribute__((weak)) uint32_t Platform_HandleGDBCommand(Buffer* pBuffer);
 341:mri/core/mri.c **** static int handleGDBCommand(void)
 342:mri/core/mri.c **** {
 343:mri/core/mri.c ****     Buffer*         pBuffer = GetBuffer();
 344:mri/core/mri.c ****     uint32_t        handlerResult = 0;
 345:mri/core/mri.c ****     char            commandChar;
 346:mri/core/mri.c ****     size_t          i;
ARM GAS  /tmp/cccmYxwc.s 			page 26


 347:mri/core/mri.c ****     static const struct
 348:mri/core/mri.c ****     {
 349:mri/core/mri.c ****         uint32_t     (*Handler)(void);
 350:mri/core/mri.c ****         char         commandChar;
 351:mri/core/mri.c ****     } commandTable[] =
 352:mri/core/mri.c ****     {
 353:mri/core/mri.c ****         {Send_T_StopResponse,                       '?'},
 354:mri/core/mri.c ****         {HandleContinueCommand,                     'c'},
 355:mri/core/mri.c ****         {HandleContinueWithSignalCommand,           'C'},
 356:mri/core/mri.c ****         {HandleDetachCommand,                       'D'},
 357:mri/core/mri.c ****         {HandleFileIOCommand,                       'F'},
 358:mri/core/mri.c ****         {HandleRegisterReadCommand,                 'g'},
 359:mri/core/mri.c ****         {HandleRegisterWriteCommand,                'G'},
 360:mri/core/mri.c ****         {HandleThreadContextCommand,                'H'},
 361:mri/core/mri.c ****         {HandleMemoryReadCommand,                   'm'},
 362:mri/core/mri.c ****         {HandleMemoryWriteCommand,                  'M'},
 363:mri/core/mri.c ****         {HandleQueryCommand,                        'q'},
 364:mri/core/mri.c ****         {HandleSingleStepCommand,                   's'},
 365:mri/core/mri.c ****         {HandleSingleStepWithSignalCommand,         'S'},
 366:mri/core/mri.c ****         {HandleIsThreadActiveCommand,               'T'},
 367:mri/core/mri.c ****         {HandleVContCommands,                       'v'},
 368:mri/core/mri.c ****         {HandleBinaryMemoryWriteCommand,            'X'},
 369:mri/core/mri.c ****         {HandleBreakpointWatchpointRemoveCommand,   'z'},
 370:mri/core/mri.c ****         {HandleBreakpointWatchpointSetCommand,      'Z'}
 371:mri/core/mri.c ****     };
 372:mri/core/mri.c **** 
 373:mri/core/mri.c ****     getPacketFromGDB();
 374:mri/core/mri.c **** 
 375:mri/core/mri.c ****     if (Platform_HandleGDBCommand)
 376:mri/core/mri.c ****         handlerResult = Platform_HandleGDBCommand(pBuffer);
 377:mri/core/mri.c ****     if (handlerResult == 0)
 378:mri/core/mri.c ****     {
 379:mri/core/mri.c ****         Buffer_Reset(pBuffer);
 380:mri/core/mri.c ****         commandChar = Buffer_ReadChar(pBuffer);
 381:mri/core/mri.c ****         for (i = 0 ; i < ARRAY_SIZE(commandTable) ; i++)
 382:mri/core/mri.c ****         {
 383:mri/core/mri.c ****             if (commandTable[i].commandChar == commandChar)
 384:mri/core/mri.c ****             {
 385:mri/core/mri.c ****                 handlerResult = commandTable[i].Handler();
 386:mri/core/mri.c ****                 break;
 387:mri/core/mri.c ****             }
 388:mri/core/mri.c ****         }
 389:mri/core/mri.c ****         if (ARRAY_SIZE(commandTable) == i)
 390:mri/core/mri.c ****             PrepareEmptyResponseForUnknownCommand();
 391:mri/core/mri.c ****     }
 392:mri/core/mri.c **** 
 393:mri/core/mri.c ****     if ((handlerResult & HANDLER_RETURN_RETURN_IMMEDIATELY) == 0)
 394:mri/core/mri.c ****         SendPacketToGdb();
 395:mri/core/mri.c ****     return handlerResult & HANDLER_RETURN_RESUME_PROGRAM;
 396:mri/core/mri.c **** }
 397:mri/core/mri.c **** 
 398:mri/core/mri.c **** static void getPacketFromGDB(void)
 399:mri/core/mri.c **** {
 400:mri/core/mri.c ****     InitPacketBuffers();
 401:mri/core/mri.c ****     Packet_GetFromGDB(&g_mri.packet);
 402:mri/core/mri.c **** }
 403:mri/core/mri.c **** 
ARM GAS  /tmp/cccmYxwc.s 			page 27


 404:mri/core/mri.c **** 
 405:mri/core/mri.c **** void InitPacketBuffers(void)
 406:mri/core/mri.c **** {
 915              		.loc 1 406 1 is_stmt 1 view -0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919 0000 10B5     		push	{r4, lr}
 920              	.LCFI16:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 4, -8
 923              		.cfi_offset 14, -4
 407:mri/core/mri.c ****     Packet_Init(&g_mri.packet, Platform_GetPacketBuffer(), Platform_GetPacketBufferSize());
 924              		.loc 1 407 5 view .LVU189
 925 0002 FFF7FEFF 		bl	mriPlatform_GetPacketBuffer
 926              	.LVL31:
 927 0006 0446     		mov	r4, r0
 928              		.loc 1 407 60 is_stmt 0 view .LVU190
 929 0008 FFF7FEFF 		bl	mriPlatform_GetPacketBufferSize
 930              	.LVL32:
 931 000c 0246     		mov	r2, r0
 932              		.loc 1 407 5 view .LVU191
 933 000e 2146     		mov	r1, r4
 934 0010 0148     		ldr	r0, .L94
 935 0012 FFF7FEFF 		bl	mriPacket_Init
 936              	.LVL33:
 408:mri/core/mri.c **** }
 937              		.loc 1 408 1 view .LVU192
 938 0016 10BD     		pop	{r4, pc}
 939              	.L95:
 940              		.align	2
 941              	.L94:
 942 0018 18000000 		.word	g_mri+24
 943              		.cfi_endproc
 944              	.LFE32:
 946              		.section	.text.getPacketFromGDB,"ax",%progbits
 947              		.align	1
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 952              	getPacketFromGDB:
 953              	.LFB31:
 399:mri/core/mri.c ****     InitPacketBuffers();
 954              		.loc 1 399 1 is_stmt 1 view -0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958 0000 08B5     		push	{r3, lr}
 959              	.LCFI17:
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 3, -8
 962              		.cfi_offset 14, -4
 400:mri/core/mri.c ****     Packet_GetFromGDB(&g_mri.packet);
 963              		.loc 1 400 5 view .LVU194
 964 0002 FFF7FEFF 		bl	mriCore_InitPacketBuffers
 965              	.LVL34:
 401:mri/core/mri.c **** }
ARM GAS  /tmp/cccmYxwc.s 			page 28


 966              		.loc 1 401 5 view .LVU195
 967 0006 0248     		ldr	r0, .L98
 968 0008 FFF7FEFF 		bl	mriPacket_GetFromGDB
 969              	.LVL35:
 402:mri/core/mri.c **** 
 970              		.loc 1 402 1 is_stmt 0 view .LVU196
 971 000c 08BD     		pop	{r3, pc}
 972              	.L99:
 973 000e 00BF     		.align	2
 974              	.L98:
 975 0010 18000000 		.word	g_mri+24
 976              		.cfi_endproc
 977              	.LFE31:
 979              		.section	.text.mriCore_WasSuccessfullyInit,"ax",%progbits
 980              		.align	1
 981              		.global	mriCore_WasSuccessfullyInit
 982              		.syntax unified
 983              		.thumb
 984              		.thumb_func
 986              	mriCore_WasSuccessfullyInit:
 987              	.LFB34:
 409:mri/core/mri.c **** 
 410:mri/core/mri.c **** 
 411:mri/core/mri.c **** void PrepareStringResponse(const char* pErrorString)
 412:mri/core/mri.c **** {
 413:mri/core/mri.c ****     InitPacketBuffers();
 414:mri/core/mri.c ****     Buffer_WriteString(GetBuffer(), pErrorString);
 415:mri/core/mri.c **** }
 416:mri/core/mri.c **** 
 417:mri/core/mri.c **** 
 418:mri/core/mri.c **** int WasSuccessfullyInit(void)
 419:mri/core/mri.c **** {
 988              		.loc 1 419 1 is_stmt 1 view -0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 420:mri/core/mri.c ****     return (int)(g_mri.flags & MRI_FLAGS_SUCCESSFUL_INIT);
 993              		.loc 1 420 5 view .LVU198
 994              		.loc 1 420 23 is_stmt 0 view .LVU199
 995 0000 024B     		ldr	r3, .L101
 996 0002 986B     		ldr	r0, [r3, #56]
 421:mri/core/mri.c **** }
 997              		.loc 1 421 1 view .LVU200
 998 0004 00F00100 		and	r0, r0, #1
 999 0008 7047     		bx	lr
 1000              	.L102:
 1001 000a 00BF     		.align	2
 1002              	.L101:
 1003 000c 00000000 		.word	g_mri
 1004              		.cfi_endproc
 1005              	.LFE34:
 1007              		.section	.text.mriCore_WasControlCFlagSentFromGdb,"ax",%progbits
 1008              		.align	1
 1009              		.global	mriCore_WasControlCFlagSentFromGdb
 1010              		.syntax unified
 1011              		.thumb
ARM GAS  /tmp/cccmYxwc.s 			page 29


 1012              		.thumb_func
 1014              	mriCore_WasControlCFlagSentFromGdb:
 1015              	.LFB35:
 422:mri/core/mri.c **** 
 423:mri/core/mri.c **** 
 424:mri/core/mri.c **** int WasControlCFlagSentFromGdb(void)
 425:mri/core/mri.c **** {
 1016              		.loc 1 425 1 is_stmt 1 view -0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              		@ link register save eliminated.
 426:mri/core/mri.c ****     return (int)(g_mri.flags & MRI_FLAGS_SEMIHOST_CTRL_C);
 1021              		.loc 1 426 5 view .LVU202
 1022              		.loc 1 426 23 is_stmt 0 view .LVU203
 1023 0000 024B     		ldr	r3, .L104
 1024 0002 986B     		ldr	r0, [r3, #56]
 427:mri/core/mri.c **** }
 1025              		.loc 1 427 1 view .LVU204
 1026 0004 00F00400 		and	r0, r0, #4
 1027 0008 7047     		bx	lr
 1028              	.L105:
 1029 000a 00BF     		.align	2
 1030              	.L104:
 1031 000c 00000000 		.word	g_mri
 1032              		.cfi_endproc
 1033              	.LFE35:
 1035              		.section	.text.mriCore_RequestResetOnNextContinue,"ax",%progbits
 1036              		.align	1
 1037              		.global	mriCore_RequestResetOnNextContinue
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1042              	mriCore_RequestResetOnNextContinue:
 1043              	.LFB36:
 428:mri/core/mri.c **** 
 429:mri/core/mri.c **** void RequestResetOnNextContinue(void)
 430:mri/core/mri.c **** {
 1044              		.loc 1 430 1 is_stmt 1 view -0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              		@ link register save eliminated.
 431:mri/core/mri.c ****     g_mri.flags |= MRI_FLAGS_RESET_ON_CONTINUE;
 1049              		.loc 1 431 5 view .LVU206
 1050              		.loc 1 431 10 is_stmt 0 view .LVU207
 1051 0000 024A     		ldr	r2, .L107
 1052 0002 936B     		ldr	r3, [r2, #56]
 1053              		.loc 1 431 17 view .LVU208
 1054 0004 43F01003 		orr	r3, r3, #16
 1055 0008 9363     		str	r3, [r2, #56]
 432:mri/core/mri.c **** }
 1056              		.loc 1 432 1 view .LVU209
 1057 000a 7047     		bx	lr
 1058              	.L108:
 1059              		.align	2
 1060              	.L107:
ARM GAS  /tmp/cccmYxwc.s 			page 30


 1061 000c 00000000 		.word	g_mri
 1062              		.cfi_endproc
 1063              	.LFE36:
 1065              		.section	.text.mriCore_WasControlCEncountered,"ax",%progbits
 1066              		.align	1
 1067              		.global	mriCore_WasControlCEncountered
 1068              		.syntax unified
 1069              		.thumb
 1070              		.thumb_func
 1072              	mriCore_WasControlCEncountered:
 1073              	.LFB37:
 433:mri/core/mri.c **** 
 434:mri/core/mri.c **** int WasControlCEncountered(void)
 435:mri/core/mri.c **** {
 1074              		.loc 1 435 1 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
 436:mri/core/mri.c ****     return (int)(g_mri.flags & MRI_FLAGS_ENCOUNTERED_CTRL_C);
 1079              		.loc 1 436 5 view .LVU211
 1080              		.loc 1 436 23 is_stmt 0 view .LVU212
 1081 0000 024B     		ldr	r3, .L110
 1082 0002 986B     		ldr	r0, [r3, #56]
 437:mri/core/mri.c **** }
 1083              		.loc 1 437 1 view .LVU213
 1084 0004 00F04000 		and	r0, r0, #64
 1085 0008 7047     		bx	lr
 1086              	.L111:
 1087 000a 00BF     		.align	2
 1088              	.L110:
 1089 000c 00000000 		.word	g_mri
 1090              		.cfi_endproc
 1091              	.LFE37:
 1093              		.section	.text.mriCore_ControlCEncountered,"ax",%progbits
 1094              		.align	1
 1095              		.global	mriCore_ControlCEncountered
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1100              	mriCore_ControlCEncountered:
 1101              	.LFB38:
 438:mri/core/mri.c **** 
 439:mri/core/mri.c **** void ControlCEncountered(void)
 440:mri/core/mri.c **** {
 1102              		.loc 1 440 1 is_stmt 1 view -0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106              		@ link register save eliminated.
 441:mri/core/mri.c ****     g_mri.flags |= MRI_FLAGS_ENCOUNTERED_CTRL_C;
 1107              		.loc 1 441 5 view .LVU215
 1108              		.loc 1 441 10 is_stmt 0 view .LVU216
 1109 0000 024A     		ldr	r2, .L113
 1110 0002 936B     		ldr	r3, [r2, #56]
 1111              		.loc 1 441 17 view .LVU217
 1112 0004 43F04003 		orr	r3, r3, #64
ARM GAS  /tmp/cccmYxwc.s 			page 31


 1113 0008 9363     		str	r3, [r2, #56]
 442:mri/core/mri.c **** }
 1114              		.loc 1 442 1 view .LVU218
 1115 000a 7047     		bx	lr
 1116              	.L114:
 1117              		.align	2
 1118              	.L113:
 1119 000c 00000000 		.word	g_mri
 1120              		.cfi_endproc
 1121              	.LFE38:
 1123              		.section	.text.mriCore_WasResetOnNextContinueRequested,"ax",%progbits
 1124              		.align	1
 1125              		.global	mriCore_WasResetOnNextContinueRequested
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1130              	mriCore_WasResetOnNextContinueRequested:
 1131              	.LFB39:
 443:mri/core/mri.c **** 
 444:mri/core/mri.c **** int WasResetOnNextContinueRequested(void)
 445:mri/core/mri.c **** {
 1132              		.loc 1 445 1 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 446:mri/core/mri.c ****     return (int)(g_mri.flags & MRI_FLAGS_RESET_ON_CONTINUE);
 1137              		.loc 1 446 5 view .LVU220
 1138              		.loc 1 446 23 is_stmt 0 view .LVU221
 1139 0000 024B     		ldr	r3, .L116
 1140 0002 986B     		ldr	r0, [r3, #56]
 447:mri/core/mri.c **** }
 1141              		.loc 1 447 1 view .LVU222
 1142 0004 00F01000 		and	r0, r0, #16
 1143 0008 7047     		bx	lr
 1144              	.L117:
 1145 000a 00BF     		.align	2
 1146              	.L116:
 1147 000c 00000000 		.word	g_mri
 1148              		.cfi_endproc
 1149              	.LFE39:
 1151              		.section	.text.prepareForDebuggerExit,"ax",%progbits
 1152              		.align	1
 1153              		.syntax unified
 1154              		.thumb
 1155              		.thumb_func
 1157              	prepareForDebuggerExit:
 1158              	.LFB26:
 300:mri/core/mri.c ****     if (WasResetOnNextContinueRequested() && !Platform_IsSingleStepping()) {
 1159              		.loc 1 300 1 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163 0000 08B5     		push	{r3, lr}
 1164              	.LCFI18:
 1165              		.cfi_def_cfa_offset 8
 1166              		.cfi_offset 3, -8
ARM GAS  /tmp/cccmYxwc.s 			page 32


 1167              		.cfi_offset 14, -4
 301:mri/core/mri.c ****         waitForAckToBeTransmitted();
 1168              		.loc 1 301 5 view .LVU224
 301:mri/core/mri.c ****         waitForAckToBeTransmitted();
 1169              		.loc 1 301 9 is_stmt 0 view .LVU225
 1170 0002 FFF7FEFF 		bl	mriCore_WasResetOnNextContinueRequested
 1171              	.LVL36:
 301:mri/core/mri.c ****         waitForAckToBeTransmitted();
 1172              		.loc 1 301 8 view .LVU226
 1173 0006 50B9     		cbnz	r0, .L122
 1174              	.L119:
 305:mri/core/mri.c ****     if (g_mri.pLeavingHook)
 1175              		.loc 1 305 5 is_stmt 1 view .LVU227
 1176 0008 FFF7FEFF 		bl	mriPlatform_LeavingDebugger
 1177              	.LVL37:
 306:mri/core/mri.c ****         g_mri.pLeavingHook(g_mri.pvEnteringLeavingContext);
 1178              		.loc 1 306 5 view .LVU228
 306:mri/core/mri.c ****         g_mri.pLeavingHook(g_mri.pvEnteringLeavingContext);
 1179              		.loc 1 306 14 is_stmt 0 view .LVU229
 1180 000c 084B     		ldr	r3, .L123
 1181 000e DB68     		ldr	r3, [r3, #12]
 306:mri/core/mri.c ****         g_mri.pLeavingHook(g_mri.pvEnteringLeavingContext);
 1182              		.loc 1 306 8 view .LVU230
 1183 0010 13B1     		cbz	r3, .L120
 307:mri/core/mri.c ****     clearFirstExceptionFlag();
 1184              		.loc 1 307 9 is_stmt 1 view .LVU231
 1185 0012 074A     		ldr	r2, .L123
 1186 0014 1069     		ldr	r0, [r2, #16]
 1187 0016 9847     		blx	r3
 1188              	.LVL38:
 1189              	.L120:
 308:mri/core/mri.c **** }
 1190              		.loc 1 308 5 view .LVU232
 1191 0018 FFF7FEFF 		bl	clearFirstExceptionFlag
 1192              	.LVL39:
 309:mri/core/mri.c **** 
 1193              		.loc 1 309 1 is_stmt 0 view .LVU233
 1194 001c 08BD     		pop	{r3, pc}
 1195              	.L122:
 301:mri/core/mri.c ****         waitForAckToBeTransmitted();
 1196              		.loc 1 301 47 discriminator 1 view .LVU234
 1197 001e FFF7FEFF 		bl	mriPlatform_IsSingleStepping
 1198              	.LVL40:
 301:mri/core/mri.c ****         waitForAckToBeTransmitted();
 1199              		.loc 1 301 43 discriminator 1 view .LVU235
 1200 0022 0028     		cmp	r0, #0
 1201 0024 F0D1     		bne	.L119
 302:mri/core/mri.c ****         Platform_ResetDevice();
 1202              		.loc 1 302 9 is_stmt 1 view .LVU236
 1203 0026 FFF7FEFF 		bl	waitForAckToBeTransmitted
 1204              	.LVL41:
 303:mri/core/mri.c ****     }
 1205              		.loc 1 303 9 view .LVU237
 1206 002a FFF7FEFF 		bl	mriPlatform_ResetDevice
 1207              	.LVL42:
 1208 002e EBE7     		b	.L119
 1209              	.L124:
ARM GAS  /tmp/cccmYxwc.s 			page 33


 1210              		.align	2
 1211              	.L123:
 1212 0030 00000000 		.word	g_mri
 1213              		.cfi_endproc
 1214              	.LFE26:
 1216              		.section	.text.mriCore_SetSingleSteppingRange,"ax",%progbits
 1217              		.align	1
 1218              		.global	mriCore_SetSingleSteppingRange
 1219              		.syntax unified
 1220              		.thumb
 1221              		.thumb_func
 1223              	mriCore_SetSingleSteppingRange:
 1224              	.LVL43:
 1225              	.LFB40:
 448:mri/core/mri.c **** 
 449:mri/core/mri.c **** void SetSingleSteppingRange(const AddressRange* pRange)
 450:mri/core/mri.c **** {
 1226              		.loc 1 450 1 view -0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              		@ link register save eliminated.
 451:mri/core/mri.c ****     g_mri.rangeForSingleStepping = *pRange;
 1231              		.loc 1 451 5 view .LVU239
 1232              		.loc 1 451 34 is_stmt 0 view .LVU240
 1233 0000 054B     		ldr	r3, .L126
 1234 0002 03F13C02 		add	r2, r3, #60
 1235 0006 03C8     		ldm	r0, {r0, r1}
 1236              	.LVL44:
 1237              		.loc 1 451 34 view .LVU241
 1238 0008 82E80300 		stm	r2, {r0, r1}
 452:mri/core/mri.c ****     g_mri.flags |= MRI_FLAGS_RANGED_SINGLE_STEP;
 1239              		.loc 1 452 5 is_stmt 1 view .LVU242
 1240              		.loc 1 452 10 is_stmt 0 view .LVU243
 1241 000c 9A6B     		ldr	r2, [r3, #56]
 1242              		.loc 1 452 17 view .LVU244
 1243 000e 42F02002 		orr	r2, r2, #32
 1244 0012 9A63     		str	r2, [r3, #56]
 453:mri/core/mri.c **** }
 1245              		.loc 1 453 1 view .LVU245
 1246 0014 7047     		bx	lr
 1247              	.L127:
 1248 0016 00BF     		.align	2
 1249              	.L126:
 1250 0018 00000000 		.word	g_mri
 1251              		.cfi_endproc
 1252              	.LFE40:
 1254              		.section	.text.mriCore_GetContext,"ax",%progbits
 1255              		.align	1
 1256              		.global	mriCore_GetContext
 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1261              	mriCore_GetContext:
 1262              	.LFB41:
 454:mri/core/mri.c **** 
 455:mri/core/mri.c **** 
ARM GAS  /tmp/cccmYxwc.s 			page 34


 456:mri/core/mri.c **** MriContext* GetContext(void)
 457:mri/core/mri.c **** {
 1263              		.loc 1 457 1 is_stmt 1 view -0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 458:mri/core/mri.c ****     return g_mri.pContext;
 1268              		.loc 1 458 5 view .LVU247
 459:mri/core/mri.c **** }
 1269              		.loc 1 459 1 is_stmt 0 view .LVU248
 1270 0000 014B     		ldr	r3, .L129
 1271 0002 5869     		ldr	r0, [r3, #20]
 1272 0004 7047     		bx	lr
 1273              	.L130:
 1274 0006 00BF     		.align	2
 1275              	.L129:
 1276 0008 00000000 		.word	g_mri
 1277              		.cfi_endproc
 1278              	.LFE41:
 1280              		.section	.text.mriCore_SetContext,"ax",%progbits
 1281              		.align	1
 1282              		.global	mriCore_SetContext
 1283              		.syntax unified
 1284              		.thumb
 1285              		.thumb_func
 1287              	mriCore_SetContext:
 1288              	.LVL45:
 1289              	.LFB42:
 460:mri/core/mri.c **** 
 461:mri/core/mri.c **** void SetContext(MriContext* pContext)
 462:mri/core/mri.c **** {
 1290              		.loc 1 462 1 is_stmt 1 view -0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 0, uses_anonymous_args = 0
 1294              		@ link register save eliminated.
 463:mri/core/mri.c ****     g_mri.pContext = pContext;
 1295              		.loc 1 463 5 view .LVU250
 1296              		.loc 1 463 20 is_stmt 0 view .LVU251
 1297 0000 014B     		ldr	r3, .L132
 1298 0002 5861     		str	r0, [r3, #20]
 464:mri/core/mri.c **** }
 1299              		.loc 1 464 1 view .LVU252
 1300 0004 7047     		bx	lr
 1301              	.L133:
 1302 0006 00BF     		.align	2
 1303              	.L132:
 1304 0008 00000000 		.word	g_mri
 1305              		.cfi_endproc
 1306              	.LFE42:
 1308              		.section	.text.mriCore_RecordControlCFlagSentFromGdb,"ax",%progbits
 1309              		.align	1
 1310              		.global	mriCore_RecordControlCFlagSentFromGdb
 1311              		.syntax unified
 1312              		.thumb
 1313              		.thumb_func
ARM GAS  /tmp/cccmYxwc.s 			page 35


 1315              	mriCore_RecordControlCFlagSentFromGdb:
 1316              	.LVL46:
 1317              	.LFB43:
 465:mri/core/mri.c **** 
 466:mri/core/mri.c **** 
 467:mri/core/mri.c **** void RecordControlCFlagSentFromGdb(int controlCFlag)
 468:mri/core/mri.c **** {
 1318              		.loc 1 468 1 is_stmt 1 view -0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 1322              		@ link register save eliminated.
 469:mri/core/mri.c ****     if (controlCFlag)
 1323              		.loc 1 469 5 view .LVU254
 1324              		.loc 1 469 8 is_stmt 0 view .LVU255
 1325 0000 28B1     		cbz	r0, .L135
 470:mri/core/mri.c ****         g_mri.flags |= MRI_FLAGS_SEMIHOST_CTRL_C;
 1326              		.loc 1 470 9 is_stmt 1 view .LVU256
 1327              		.loc 1 470 14 is_stmt 0 view .LVU257
 1328 0002 064A     		ldr	r2, .L137
 1329 0004 936B     		ldr	r3, [r2, #56]
 1330              		.loc 1 470 21 view .LVU258
 1331 0006 43F00403 		orr	r3, r3, #4
 1332 000a 9363     		str	r3, [r2, #56]
 1333 000c 7047     		bx	lr
 1334              	.L135:
 471:mri/core/mri.c ****     else
 472:mri/core/mri.c ****         g_mri.flags &= ~MRI_FLAGS_SEMIHOST_CTRL_C;
 1335              		.loc 1 472 9 is_stmt 1 view .LVU259
 1336              		.loc 1 472 14 is_stmt 0 view .LVU260
 1337 000e 034A     		ldr	r2, .L137
 1338 0010 936B     		ldr	r3, [r2, #56]
 1339              		.loc 1 472 21 view .LVU261
 1340 0012 23F00403 		bic	r3, r3, #4
 1341 0016 9363     		str	r3, [r2, #56]
 473:mri/core/mri.c **** }
 1342              		.loc 1 473 1 view .LVU262
 1343 0018 7047     		bx	lr
 1344              	.L138:
 1345 001a 00BF     		.align	2
 1346              	.L137:
 1347 001c 00000000 		.word	g_mri
 1348              		.cfi_endproc
 1349              	.LFE43:
 1351              		.section	.text.mriCore_WasSemihostCallCancelledByGdb,"ax",%progbits
 1352              		.align	1
 1353              		.global	mriCore_WasSemihostCallCancelledByGdb
 1354              		.syntax unified
 1355              		.thumb
 1356              		.thumb_func
 1358              	mriCore_WasSemihostCallCancelledByGdb:
 1359              	.LFB44:
 474:mri/core/mri.c **** 
 475:mri/core/mri.c **** 
 476:mri/core/mri.c **** int WasSemihostCallCancelledByGdb(void)
 477:mri/core/mri.c **** {
 1360              		.loc 1 477 1 is_stmt 1 view -0
ARM GAS  /tmp/cccmYxwc.s 			page 36


 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 478:mri/core/mri.c ****     return g_mri.semihostErrno == EINTR;
 1365              		.loc 1 478 5 view .LVU264
 1366              		.loc 1 478 17 is_stmt 0 view .LVU265
 1367 0000 034B     		ldr	r3, .L140
 1368 0002 986C     		ldr	r0, [r3, #72]
 479:mri/core/mri.c **** }
 1369              		.loc 1 479 1 view .LVU266
 1370 0004 0428     		cmp	r0, #4
 1371 0006 14BF     		ite	ne
 1372 0008 0020     		movne	r0, #0
 1373 000a 0120     		moveq	r0, #1
 1374 000c 7047     		bx	lr
 1375              	.L141:
 1376 000e 00BF     		.align	2
 1377              	.L140:
 1378 0010 00000000 		.word	g_mri
 1379              		.cfi_endproc
 1380              	.LFE44:
 1382              		.section	.text.mriCore_FlagSemihostCallAsHandled,"ax",%progbits
 1383              		.align	1
 1384              		.global	mriCore_FlagSemihostCallAsHandled
 1385              		.syntax unified
 1386              		.thumb
 1387              		.thumb_func
 1389              	mriCore_FlagSemihostCallAsHandled:
 1390              	.LFB45:
 480:mri/core/mri.c **** 
 481:mri/core/mri.c **** 
 482:mri/core/mri.c **** void FlagSemihostCallAsHandled(void)
 483:mri/core/mri.c **** {
 1391              		.loc 1 483 1 is_stmt 1 view -0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 0
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395 0000 08B5     		push	{r3, lr}
 1396              	.LCFI19:
 1397              		.cfi_def_cfa_offset 8
 1398              		.cfi_offset 3, -8
 1399              		.cfi_offset 14, -4
 484:mri/core/mri.c ****     Platform_AdvanceProgramCounterToNextInstruction();
 1400              		.loc 1 484 5 view .LVU268
 1401 0002 FFF7FEFF 		bl	mriPlatform_AdvanceProgramCounterToNextInstruction
 1402              	.LVL47:
 485:mri/core/mri.c ****     Platform_SetSemihostCallReturnAndErrnoValues(g_mri.semihostReturnCode, g_mri.semihostErrno);
 1403              		.loc 1 485 5 view .LVU269
 1404 0006 034B     		ldr	r3, .L144
 1405 0008 996C     		ldr	r1, [r3, #72]
 1406 000a 586C     		ldr	r0, [r3, #68]
 1407 000c FFF7FEFF 		bl	mriPlatform_SetSemihostCallReturnAndErrnoValues
 1408              	.LVL48:
 486:mri/core/mri.c **** }
 1409              		.loc 1 486 1 is_stmt 0 view .LVU270
 1410 0010 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cccmYxwc.s 			page 37


 1411              	.L145:
 1412 0012 00BF     		.align	2
 1413              	.L144:
 1414 0014 00000000 		.word	g_mri
 1415              		.cfi_endproc
 1416              	.LFE45:
 1418              		.section	.text.mriCore_IsFirstException,"ax",%progbits
 1419              		.align	1
 1420              		.global	mriCore_IsFirstException
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1425              	mriCore_IsFirstException:
 1426              	.LFB46:
 487:mri/core/mri.c **** 
 488:mri/core/mri.c **** 
 489:mri/core/mri.c **** int IsFirstException(void)
 490:mri/core/mri.c **** {
 1427              		.loc 1 490 1 is_stmt 1 view -0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              		@ link register save eliminated.
 491:mri/core/mri.c ****     return (int)(g_mri.flags & MRI_FLAGS_FIRST_EXCEPTION);
 1432              		.loc 1 491 5 view .LVU272
 1433              		.loc 1 491 23 is_stmt 0 view .LVU273
 1434 0000 024B     		ldr	r3, .L147
 1435 0002 986B     		ldr	r0, [r3, #56]
 492:mri/core/mri.c **** }
 1436              		.loc 1 492 1 view .LVU274
 1437 0004 00F00200 		and	r0, r0, #2
 1438 0008 7047     		bx	lr
 1439              	.L148:
 1440 000a 00BF     		.align	2
 1441              	.L147:
 1442 000c 00000000 		.word	g_mri
 1443              		.cfi_endproc
 1444              	.LFE46:
 1446              		.section	.text.mriCore_SetSignalValue,"ax",%progbits
 1447              		.align	1
 1448              		.global	mriCore_SetSignalValue
 1449              		.syntax unified
 1450              		.thumb
 1451              		.thumb_func
 1453              	mriCore_SetSignalValue:
 1454              	.LVL49:
 1455              	.LFB47:
 493:mri/core/mri.c **** 
 494:mri/core/mri.c **** 
 495:mri/core/mri.c **** void SetSignalValue(uint8_t signalValue)
 496:mri/core/mri.c **** {
 1456              		.loc 1 496 1 is_stmt 1 view -0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
 497:mri/core/mri.c ****     g_mri.signalValue = signalValue;
ARM GAS  /tmp/cccmYxwc.s 			page 38


 1461              		.loc 1 497 5 view .LVU276
 1462              		.loc 1 497 23 is_stmt 0 view .LVU277
 1463 0000 014B     		ldr	r3, .L150
 1464 0002 83F84C00 		strb	r0, [r3, #76]
 498:mri/core/mri.c **** }
 1465              		.loc 1 498 1 view .LVU278
 1466 0006 7047     		bx	lr
 1467              	.L151:
 1468              		.align	2
 1469              	.L150:
 1470 0008 00000000 		.word	g_mri
 1471              		.cfi_endproc
 1472              	.LFE47:
 1474              		.section	.text.mriCore_GetSignalValue,"ax",%progbits
 1475              		.align	1
 1476              		.global	mriCore_GetSignalValue
 1477              		.syntax unified
 1478              		.thumb
 1479              		.thumb_func
 1481              	mriCore_GetSignalValue:
 1482              	.LFB48:
 499:mri/core/mri.c **** 
 500:mri/core/mri.c **** 
 501:mri/core/mri.c **** uint8_t GetSignalValue(void)
 502:mri/core/mri.c **** {
 1483              		.loc 1 502 1 is_stmt 1 view -0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 0
 1486              		@ frame_needed = 0, uses_anonymous_args = 0
 1487              		@ link register save eliminated.
 503:mri/core/mri.c ****     return g_mri.signalValue;
 1488              		.loc 1 503 5 view .LVU280
 504:mri/core/mri.c **** }
 1489              		.loc 1 504 1 is_stmt 0 view .LVU281
 1490 0000 014B     		ldr	r3, .L153
 1491 0002 93F84C00 		ldrb	r0, [r3, #76]	@ zero_extendqisi2
 1492 0006 7047     		bx	lr
 1493              	.L154:
 1494              		.align	2
 1495              	.L153:
 1496 0008 00000000 		.word	g_mri
 1497              		.cfi_endproc
 1498              	.LFE48:
 1500              		.section	.text.mriCore_SetSemihostReturnValues,"ax",%progbits
 1501              		.align	1
 1502              		.global	mriCore_SetSemihostReturnValues
 1503              		.syntax unified
 1504              		.thumb
 1505              		.thumb_func
 1507              	mriCore_SetSemihostReturnValues:
 1508              	.LVL50:
 1509              	.LFB49:
 505:mri/core/mri.c **** 
 506:mri/core/mri.c **** 
 507:mri/core/mri.c **** void SetSemihostReturnValues(int semihostReturnCode, int semihostErrNo)
 508:mri/core/mri.c **** {
 1510              		.loc 1 508 1 is_stmt 1 view -0
ARM GAS  /tmp/cccmYxwc.s 			page 39


 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 509:mri/core/mri.c ****     g_mri.semihostReturnCode = semihostReturnCode;
 1515              		.loc 1 509 5 view .LVU283
 1516              		.loc 1 509 30 is_stmt 0 view .LVU284
 1517 0000 014B     		ldr	r3, .L156
 1518 0002 5864     		str	r0, [r3, #68]
 510:mri/core/mri.c ****     g_mri.semihostErrno = semihostErrNo;
 1519              		.loc 1 510 5 is_stmt 1 view .LVU285
 1520              		.loc 1 510 25 is_stmt 0 view .LVU286
 1521 0004 9964     		str	r1, [r3, #72]
 511:mri/core/mri.c **** }
 1522              		.loc 1 511 1 view .LVU287
 1523 0006 7047     		bx	lr
 1524              	.L157:
 1525              		.align	2
 1526              	.L156:
 1527 0008 00000000 		.word	g_mri
 1528              		.cfi_endproc
 1529              	.LFE49:
 1531              		.section	.text.mriCore_GetSemihostReturnCode,"ax",%progbits
 1532              		.align	1
 1533              		.global	mriCore_GetSemihostReturnCode
 1534              		.syntax unified
 1535              		.thumb
 1536              		.thumb_func
 1538              	mriCore_GetSemihostReturnCode:
 1539              	.LFB50:
 512:mri/core/mri.c **** 
 513:mri/core/mri.c **** 
 514:mri/core/mri.c **** int GetSemihostReturnCode(void)
 515:mri/core/mri.c **** {
 1540              		.loc 1 515 1 is_stmt 1 view -0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              		@ link register save eliminated.
 516:mri/core/mri.c ****     return g_mri.semihostReturnCode;
 1545              		.loc 1 516 5 view .LVU289
 517:mri/core/mri.c **** }
 1546              		.loc 1 517 1 is_stmt 0 view .LVU290
 1547 0000 014B     		ldr	r3, .L159
 1548 0002 586C     		ldr	r0, [r3, #68]
 1549 0004 7047     		bx	lr
 1550              	.L160:
 1551 0006 00BF     		.align	2
 1552              	.L159:
 1553 0008 00000000 		.word	g_mri
 1554              		.cfi_endproc
 1555              	.LFE50:
 1557              		.section	.text.mriCore_GetSemihostErrno,"ax",%progbits
 1558              		.align	1
 1559              		.global	mriCore_GetSemihostErrno
 1560              		.syntax unified
 1561              		.thumb
ARM GAS  /tmp/cccmYxwc.s 			page 40


 1562              		.thumb_func
 1564              	mriCore_GetSemihostErrno:
 1565              	.LFB51:
 518:mri/core/mri.c **** 
 519:mri/core/mri.c **** 
 520:mri/core/mri.c **** int GetSemihostErrno(void)
 521:mri/core/mri.c **** {
 1566              		.loc 1 521 1 is_stmt 1 view -0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		@ link register save eliminated.
 522:mri/core/mri.c ****     return g_mri.semihostErrno;
 1571              		.loc 1 522 5 view .LVU292
 523:mri/core/mri.c **** }
 1572              		.loc 1 523 1 is_stmt 0 view .LVU293
 1573 0000 014B     		ldr	r3, .L162
 1574 0002 986C     		ldr	r0, [r3, #72]
 1575 0004 7047     		bx	lr
 1576              	.L163:
 1577 0006 00BF     		.align	2
 1578              	.L162:
 1579 0008 00000000 		.word	g_mri
 1580              		.cfi_endproc
 1581              	.LFE51:
 1583              		.section	.text.mriCore_GetBuffer,"ax",%progbits
 1584              		.align	1
 1585              		.global	mriCore_GetBuffer
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1590              	mriCore_GetBuffer:
 1591              	.LFB52:
 524:mri/core/mri.c **** 
 525:mri/core/mri.c **** 
 526:mri/core/mri.c **** Buffer* GetBuffer(void)
 527:mri/core/mri.c **** {
 1592              		.loc 1 527 1 is_stmt 1 view -0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              		@ link register save eliminated.
 528:mri/core/mri.c ****     return &g_mri.packet.dataBuffer;
 1597              		.loc 1 528 5 view .LVU295
 529:mri/core/mri.c **** }
 1598              		.loc 1 529 1 is_stmt 0 view .LVU296
 1599 0000 0048     		ldr	r0, .L165
 1600 0002 7047     		bx	lr
 1601              	.L166:
 1602              		.align	2
 1603              	.L165:
 1604 0004 24000000 		.word	g_mri+36
 1605              		.cfi_endproc
 1606              	.LFE52:
 1608              		.section	.text.mriCore_PrepareStringResponse,"ax",%progbits
 1609              		.align	1
 1610              		.global	mriCore_PrepareStringResponse
ARM GAS  /tmp/cccmYxwc.s 			page 41


 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1615              	mriCore_PrepareStringResponse:
 1616              	.LVL51:
 1617              	.LFB33:
 412:mri/core/mri.c ****     InitPacketBuffers();
 1618              		.loc 1 412 1 is_stmt 1 view -0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 0
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 412:mri/core/mri.c ****     InitPacketBuffers();
 1622              		.loc 1 412 1 is_stmt 0 view .LVU298
 1623 0000 10B5     		push	{r4, lr}
 1624              	.LCFI20:
 1625              		.cfi_def_cfa_offset 8
 1626              		.cfi_offset 4, -8
 1627              		.cfi_offset 14, -4
 1628 0002 0446     		mov	r4, r0
 413:mri/core/mri.c ****     Buffer_WriteString(GetBuffer(), pErrorString);
 1629              		.loc 1 413 5 is_stmt 1 view .LVU299
 1630 0004 FFF7FEFF 		bl	mriCore_InitPacketBuffers
 1631              	.LVL52:
 414:mri/core/mri.c **** }
 1632              		.loc 1 414 5 view .LVU300
 1633 0008 FFF7FEFF 		bl	mriCore_GetBuffer
 1634              	.LVL53:
 1635 000c 2146     		mov	r1, r4
 1636 000e FFF7FEFF 		bl	mriBuffer_WriteString
 1637              	.LVL54:
 415:mri/core/mri.c **** 
 1638              		.loc 1 415 1 is_stmt 0 view .LVU301
 1639 0012 10BD     		pop	{r4, pc}
 415:mri/core/mri.c **** 
 1640              		.loc 1 415 1 view .LVU302
 1641              		.cfi_endproc
 1642              	.LFE33:
 1644              		.section	.text.mriCore_GetInitializedBuffer,"ax",%progbits
 1645              		.align	1
 1646              		.global	mriCore_GetInitializedBuffer
 1647              		.syntax unified
 1648              		.thumb
 1649              		.thumb_func
 1651              	mriCore_GetInitializedBuffer:
 1652              	.LFB53:
 530:mri/core/mri.c **** 
 531:mri/core/mri.c **** 
 532:mri/core/mri.c **** Buffer* GetInitializedBuffer(void)
 533:mri/core/mri.c **** {
 1653              		.loc 1 533 1 is_stmt 1 view -0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657 0000 08B5     		push	{r3, lr}
 1658              	.LCFI21:
 1659              		.cfi_def_cfa_offset 8
 1660              		.cfi_offset 3, -8
ARM GAS  /tmp/cccmYxwc.s 			page 42


 1661              		.cfi_offset 14, -4
 534:mri/core/mri.c ****     InitPacketBuffers();
 1662              		.loc 1 534 5 view .LVU304
 1663 0002 FFF7FEFF 		bl	mriCore_InitPacketBuffers
 1664              	.LVL55:
 535:mri/core/mri.c ****     return GetBuffer();
 1665              		.loc 1 535 5 view .LVU305
 1666              		.loc 1 535 12 is_stmt 0 view .LVU306
 1667 0006 FFF7FEFF 		bl	mriCore_GetBuffer
 1668              	.LVL56:
 536:mri/core/mri.c **** }
 1669              		.loc 1 536 1 view .LVU307
 1670 000a 08BD     		pop	{r3, pc}
 1671              		.cfi_endproc
 1672              	.LFE53:
 1674              		.section	.rodata.mriCore_SendPacketToGdb.str1.4,"aMS",%progbits,1
 1675              		.align	2
 1676              	.LC0:
 1677 0000 45303400 		.ascii	"E04\000"
 1678              		.section	.text.mriCore_SendPacketToGdb,"ax",%progbits
 1679              		.align	1
 1680              		.global	mriCore_SendPacketToGdb
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1685              	mriCore_SendPacketToGdb:
 1686              	.LFB54:
 537:mri/core/mri.c **** 
 538:mri/core/mri.c **** 
 539:mri/core/mri.c **** void SendPacketToGdb(void)
 540:mri/core/mri.c **** {
 1687              		.loc 1 540 1 is_stmt 1 view -0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691 0000 10B5     		push	{r4, lr}
 1692              	.LCFI22:
 1693              		.cfi_def_cfa_offset 8
 1694              		.cfi_offset 4, -8
 1695              		.cfi_offset 14, -4
 541:mri/core/mri.c ****     if (Buffer_OverrunDetected(GetBuffer()))
 1696              		.loc 1 541 5 view .LVU309
 1697              		.loc 1 541 9 is_stmt 0 view .LVU310
 1698 0002 FFF7FEFF 		bl	mriCore_GetBuffer
 1699              	.LVL57:
 1700 0006 0446     		mov	r4, r0
 1701 0008 FFF7FEFF 		bl	mriBuffer_OverrunDetected
 1702              	.LVL58:
 1703              		.loc 1 541 8 view .LVU311
 1704 000c 30B9     		cbnz	r0, .L174
 1705              	.L172:
 542:mri/core/mri.c ****     {
 543:mri/core/mri.c ****         InitPacketBuffers();
 544:mri/core/mri.c ****         Buffer_WriteString(GetBuffer(), MRI_ERROR_BUFFER_OVERRUN);
 545:mri/core/mri.c ****     }
 546:mri/core/mri.c **** 
 547:mri/core/mri.c ****     Buffer_SetEndOfBuffer(GetBuffer());
ARM GAS  /tmp/cccmYxwc.s 			page 43


 1706              		.loc 1 547 5 is_stmt 1 view .LVU312
 1707 000e 2046     		mov	r0, r4
 1708 0010 FFF7FEFF 		bl	mriBuffer_SetEndOfBuffer
 1709              	.LVL59:
 548:mri/core/mri.c ****     Packet_SendToGDB(&g_mri.packet);
 1710              		.loc 1 548 5 view .LVU313
 1711 0014 0548     		ldr	r0, .L175
 1712 0016 FFF7FEFF 		bl	mriPacket_SendToGDB
 1713              	.LVL60:
 549:mri/core/mri.c **** }
 1714              		.loc 1 549 1 is_stmt 0 view .LVU314
 1715 001a 10BD     		pop	{r4, pc}
 1716              	.L174:
 543:mri/core/mri.c ****         Buffer_WriteString(GetBuffer(), MRI_ERROR_BUFFER_OVERRUN);
 1717              		.loc 1 543 9 is_stmt 1 view .LVU315
 1718 001c FFF7FEFF 		bl	mriCore_InitPacketBuffers
 1719              	.LVL61:
 544:mri/core/mri.c ****     }
 1720              		.loc 1 544 9 view .LVU316
 1721 0020 0349     		ldr	r1, .L175+4
 1722 0022 2046     		mov	r0, r4
 1723 0024 FFF7FEFF 		bl	mriBuffer_WriteString
 1724              	.LVL62:
 1725 0028 F1E7     		b	.L172
 1726              	.L176:
 1727 002a 00BF     		.align	2
 1728              	.L175:
 1729 002c 18000000 		.word	g_mri+24
 1730 0030 00000000 		.word	.LC0
 1731              		.cfi_endproc
 1732              	.LFE54:
 1734              		.section	.rodata.handleGDBCommand.str1.4,"aMS",%progbits,1
 1735              		.align	2
 1736              	.LC1:
 1737 0000 00       		.ascii	"\000"
 1738              		.section	.text.handleGDBCommand,"ax",%progbits
 1739              		.align	1
 1740              		.syntax unified
 1741              		.thumb
 1742              		.thumb_func
 1744              	handleGDBCommand:
 1745              	.LFB30:
 342:mri/core/mri.c ****     Buffer*         pBuffer = GetBuffer();
 1746              		.loc 1 342 1 view -0
 1747              		.cfi_startproc
 1748              		@ args = 0, pretend = 0, frame = 0
 1749              		@ frame_needed = 0, uses_anonymous_args = 0
 1750 0000 38B5     		push	{r3, r4, r5, lr}
 1751              	.LCFI23:
 1752              		.cfi_def_cfa_offset 16
 1753              		.cfi_offset 3, -16
 1754              		.cfi_offset 4, -12
 1755              		.cfi_offset 5, -8
 1756              		.cfi_offset 14, -4
 343:mri/core/mri.c ****     uint32_t        handlerResult = 0;
 1757              		.loc 1 343 5 view .LVU318
 343:mri/core/mri.c ****     uint32_t        handlerResult = 0;
ARM GAS  /tmp/cccmYxwc.s 			page 44


 1758              		.loc 1 343 31 is_stmt 0 view .LVU319
 1759 0002 FFF7FEFF 		bl	mriCore_GetBuffer
 1760              	.LVL63:
 1761 0006 0446     		mov	r4, r0
 1762              	.LVL64:
 344:mri/core/mri.c ****     char            commandChar;
 1763              		.loc 1 344 5 is_stmt 1 view .LVU320
 345:mri/core/mri.c ****     size_t          i;
 1764              		.loc 1 345 5 view .LVU321
 346:mri/core/mri.c ****     static const struct
 1765              		.loc 1 346 5 view .LVU322
 347:mri/core/mri.c ****     {
 1766              		.loc 1 347 5 view .LVU323
 373:mri/core/mri.c **** 
 1767              		.loc 1 373 5 view .LVU324
 1768 0008 FFF7FEFF 		bl	getPacketFromGDB
 1769              	.LVL65:
 375:mri/core/mri.c ****         handlerResult = Platform_HandleGDBCommand(pBuffer);
 1770              		.loc 1 375 5 view .LVU325
 375:mri/core/mri.c ****         handlerResult = Platform_HandleGDBCommand(pBuffer);
 1771              		.loc 1 375 8 is_stmt 0 view .LVU326
 1772 000c 164B     		ldr	r3, .L190
 1773 000e ABB1     		cbz	r3, .L185
 376:mri/core/mri.c ****     if (handlerResult == 0)
 1774              		.loc 1 376 9 is_stmt 1 view .LVU327
 376:mri/core/mri.c ****     if (handlerResult == 0)
 1775              		.loc 1 376 25 is_stmt 0 view .LVU328
 1776 0010 2046     		mov	r0, r4
 1777 0012 FFF7FEFF 		bl	mriPlatform_HandleGDBCommand
 1778              	.LVL66:
 377:mri/core/mri.c ****     {
 1779              		.loc 1 377 5 is_stmt 1 view .LVU329
 377:mri/core/mri.c ****     {
 1780              		.loc 1 377 8 is_stmt 0 view .LVU330
 1781 0016 0546     		mov	r5, r0
 1782 0018 C8B9     		cbnz	r0, .L179
 1783              	.LVL67:
 1784              	.L178:
 379:mri/core/mri.c ****         commandChar = Buffer_ReadChar(pBuffer);
 1785              		.loc 1 379 9 is_stmt 1 view .LVU331
 1786 001a 2046     		mov	r0, r4
 1787 001c FFF7FEFF 		bl	mriBuffer_Reset
 1788              	.LVL68:
 380:mri/core/mri.c ****         for (i = 0 ; i < ARRAY_SIZE(commandTable) ; i++)
 1789              		.loc 1 380 9 view .LVU332
 380:mri/core/mri.c ****         for (i = 0 ; i < ARRAY_SIZE(commandTable) ; i++)
 1790              		.loc 1 380 23 is_stmt 0 view .LVU333
 1791 0020 2046     		mov	r0, r4
 1792 0022 FFF7FEFF 		bl	mriBuffer_ReadChar
 1793              	.LVL69:
 381:mri/core/mri.c ****         {
 1794              		.loc 1 381 9 is_stmt 1 view .LVU334
 381:mri/core/mri.c ****         {
 1795              		.loc 1 381 16 is_stmt 0 view .LVU335
 1796 0026 0024     		movs	r4, #0
 1797              	.LVL70:
 1798              	.L180:
ARM GAS  /tmp/cccmYxwc.s 			page 45


 381:mri/core/mri.c ****         {
 1799              		.loc 1 381 24 is_stmt 1 discriminator 1 view .LVU336
 1800 0028 112C     		cmp	r4, #17
 1801 002a 0ED8     		bhi	.L182
 383:mri/core/mri.c ****             {
 1802              		.loc 1 383 13 view .LVU337
 383:mri/core/mri.c ****             {
 1803              		.loc 1 383 32 is_stmt 0 view .LVU338
 1804 002c 0F4B     		ldr	r3, .L190+4
 1805 002e 03EBC403 		add	r3, r3, r4, lsl #3
 1806 0032 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 383:mri/core/mri.c ****             {
 1807              		.loc 1 383 16 view .LVU339
 1808 0034 8342     		cmp	r3, r0
 1809 0036 03D0     		beq	.L187
 381:mri/core/mri.c ****         {
 1810              		.loc 1 381 54 is_stmt 1 discriminator 2 view .LVU340
 1811 0038 0134     		adds	r4, r4, #1
 1812              	.LVL71:
 381:mri/core/mri.c ****         {
 1813              		.loc 1 381 54 is_stmt 0 discriminator 2 view .LVU341
 1814 003a F5E7     		b	.L180
 1815              	.LVL72:
 1816              	.L185:
 344:mri/core/mri.c ****     char            commandChar;
 1817              		.loc 1 344 21 view .LVU342
 1818 003c 0025     		movs	r5, #0
 1819 003e ECE7     		b	.L178
 1820              	.LVL73:
 1821              	.L187:
 385:mri/core/mri.c ****                 break;
 1822              		.loc 1 385 17 is_stmt 1 view .LVU343
 385:mri/core/mri.c ****                 break;
 1823              		.loc 1 385 48 is_stmt 0 view .LVU344
 1824 0040 0A4B     		ldr	r3, .L190+4
 1825 0042 53F83430 		ldr	r3, [r3, r4, lsl #3]
 385:mri/core/mri.c ****                 break;
 1826              		.loc 1 385 33 view .LVU345
 1827 0046 9847     		blx	r3
 1828              	.LVL74:
 385:mri/core/mri.c ****                 break;
 1829              		.loc 1 385 33 view .LVU346
 1830 0048 0546     		mov	r5, r0
 1831              	.LVL75:
 386:mri/core/mri.c ****             }
 1832              		.loc 1 386 17 is_stmt 1 view .LVU347
 1833              	.L182:
 389:mri/core/mri.c ****             PrepareEmptyResponseForUnknownCommand();
 1834              		.loc 1 389 9 view .LVU348
 389:mri/core/mri.c ****             PrepareEmptyResponseForUnknownCommand();
 1835              		.loc 1 389 12 is_stmt 0 view .LVU349
 1836 004a 122C     		cmp	r4, #18
 1837 004c 05D0     		beq	.L188
 1838              	.LVL76:
 1839              	.L179:
 393:mri/core/mri.c ****         SendPacketToGdb();
 1840              		.loc 1 393 5 is_stmt 1 view .LVU350
ARM GAS  /tmp/cccmYxwc.s 			page 46


 393:mri/core/mri.c ****         SendPacketToGdb();
 1841              		.loc 1 393 8 is_stmt 0 view .LVU351
 1842 004e 15F0020F 		tst	r5, #2
 1843 0052 06D0     		beq	.L189
 1844              	.L184:
 395:mri/core/mri.c **** }
 1845              		.loc 1 395 5 is_stmt 1 view .LVU352
 396:mri/core/mri.c **** 
 1846              		.loc 1 396 1 is_stmt 0 view .LVU353
 1847 0054 05F00100 		and	r0, r5, #1
 1848 0058 38BD     		pop	{r3, r4, r5, pc}
 1849              	.LVL77:
 1850              	.L188:
 390:mri/core/mri.c ****     }
 1851              		.loc 1 390 13 is_stmt 1 view .LVU354
 1852 005a 0548     		ldr	r0, .L190+8
 1853 005c FFF7FEFF 		bl	mriCore_PrepareStringResponse
 1854              	.LVL78:
 1855 0060 F5E7     		b	.L179
 1856              	.LVL79:
 1857              	.L189:
 394:mri/core/mri.c ****     return handlerResult & HANDLER_RETURN_RESUME_PROGRAM;
 1858              		.loc 1 394 9 view .LVU355
 1859 0062 FFF7FEFF 		bl	mriCore_SendPacketToGdb
 1860              	.LVL80:
 1861 0066 F5E7     		b	.L184
 1862              	.L191:
 1863              		.align	2
 1864              	.L190:
 1865 0068 00000000 		.word	mriPlatform_HandleGDBCommand
 1866 006c 00000000 		.word	commandTable.0
 1867 0070 00000000 		.word	.LC1
 1868              		.cfi_endproc
 1869              	.LFE30:
 1871              		.section	.text.mriCore_GdbCommandHandlingLoop,"ax",%progbits
 1872              		.align	1
 1873              		.global	mriCore_GdbCommandHandlingLoop
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1878              	mriCore_GdbCommandHandlingLoop:
 1879              	.LFB29:
 331:mri/core/mri.c ****     int startDebuggeeUpAgain;
 1880              		.loc 1 331 1 view -0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884 0000 08B5     		push	{r3, lr}
 1885              	.LCFI24:
 1886              		.cfi_def_cfa_offset 8
 1887              		.cfi_offset 3, -8
 1888              		.cfi_offset 14, -4
 1889              	.L193:
 332:mri/core/mri.c **** 
 1890              		.loc 1 332 5 discriminator 1 view .LVU357
 334:mri/core/mri.c ****     {
 1891              		.loc 1 334 5 discriminator 1 view .LVU358
ARM GAS  /tmp/cccmYxwc.s 			page 47


 336:mri/core/mri.c ****     } while (!startDebuggeeUpAgain);
 1892              		.loc 1 336 9 discriminator 1 view .LVU359
 336:mri/core/mri.c ****     } while (!startDebuggeeUpAgain);
 1893              		.loc 1 336 32 is_stmt 0 discriminator 1 view .LVU360
 1894 0002 FFF7FEFF 		bl	handleGDBCommand
 1895              	.LVL81:
 337:mri/core/mri.c **** }
 1896              		.loc 1 337 14 is_stmt 1 discriminator 1 view .LVU361
 1897 0006 0028     		cmp	r0, #0
 1898 0008 FBD0     		beq	.L193
 338:mri/core/mri.c **** 
 1899              		.loc 1 338 1 is_stmt 0 view .LVU362
 1900 000a 08BD     		pop	{r3, pc}
 1901              		.cfi_endproc
 1902              	.LFE29:
 1904              		.section	.text.mriDebugException,"ax",%progbits
 1905              		.align	1
 1906              		.global	mriDebugException
 1907              		.syntax unified
 1908              		.thumb
 1909              		.thumb_func
 1911              	mriDebugException:
 1912              	.LVL82:
 1913              	.LFB17:
 179:mri/core/mri.c ****     int justSingleStepped;
 1914              		.loc 1 179 1 is_stmt 1 view -0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 0
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
 179:mri/core/mri.c ****     int justSingleStepped;
 1918              		.loc 1 179 1 is_stmt 0 view .LVU364
 1919 0000 70B5     		push	{r4, r5, r6, lr}
 1920              	.LCFI25:
 1921              		.cfi_def_cfa_offset 16
 1922              		.cfi_offset 4, -16
 1923              		.cfi_offset 5, -12
 1924              		.cfi_offset 6, -8
 1925              		.cfi_offset 14, -4
 180:mri/core/mri.c **** 
 1926              		.loc 1 180 5 is_stmt 1 view .LVU365
 182:mri/core/mri.c ****     clearControlCEncounteredFlag();
 1927              		.loc 1 182 5 view .LVU366
 1928 0002 FFF7FEFF 		bl	mriCore_SetContext
 1929              	.LVL83:
 183:mri/core/mri.c ****     justSingleStepped = Platform_IsSingleStepping();
 1930              		.loc 1 183 5 view .LVU367
 1931 0006 FFF7FEFF 		bl	clearControlCEncounteredFlag
 1932              	.LVL84:
 184:mri/core/mri.c **** 
 1933              		.loc 1 184 5 view .LVU368
 184:mri/core/mri.c **** 
 1934              		.loc 1 184 25 is_stmt 0 view .LVU369
 1935 000a FFF7FEFF 		bl	mriPlatform_IsSingleStepping
 1936              	.LVL85:
 1937 000e 0446     		mov	r4, r0
 1938              	.LVL86:
 186:mri/core/mri.c ****     {
ARM GAS  /tmp/cccmYxwc.s 			page 48


 1939              		.loc 1 186 5 is_stmt 1 view .LVU370
 186:mri/core/mri.c ****     {
 1940              		.loc 1 186 9 is_stmt 0 view .LVU371
 1941 0010 FFF7FEFF 		bl	wasTempBreakpointHit
 1942              	.LVL87:
 186:mri/core/mri.c ****     {
 1943              		.loc 1 186 8 view .LVU372
 1944 0014 40B1     		cbz	r0, .L196
 1945              	.LBB28:
 188:mri/core/mri.c ****         void* pvTempBreakpointContext = g_mri.pvTempBreakpointContext;
 1946              		.loc 1 188 9 is_stmt 1 view .LVU373
 188:mri/core/mri.c ****         void* pvTempBreakpointContext = g_mri.pvTempBreakpointContext;
 1947              		.loc 1 188 35 is_stmt 0 view .LVU374
 1948 0016 254B     		ldr	r3, .L207
 1949 0018 1D68     		ldr	r5, [r3]
 1950              	.LVL88:
 189:mri/core/mri.c ****         int resumeExecution;
 1951              		.loc 1 189 9 is_stmt 1 view .LVU375
 189:mri/core/mri.c ****         int resumeExecution;
 1952              		.loc 1 189 15 is_stmt 0 view .LVU376
 1953 001a 5E68     		ldr	r6, [r3, #4]
 1954              	.LVL89:
 190:mri/core/mri.c **** 
 1955              		.loc 1 190 9 is_stmt 1 view .LVU377
 192:mri/core/mri.c ****         if (pTempBreakpointCallback)
 1956              		.loc 1 192 9 view .LVU378
 1957 001c FFF7FEFF 		bl	clearTempBreakpoint
 1958              	.LVL90:
 193:mri/core/mri.c ****         {
 1959              		.loc 1 193 9 view .LVU379
 193:mri/core/mri.c ****         {
 1960              		.loc 1 193 12 is_stmt 0 view .LVU380
 1961 0020 15B1     		cbz	r5, .L196
 195:mri/core/mri.c ****             if (resumeExecution)
 1962              		.loc 1 195 13 is_stmt 1 view .LVU381
 195:mri/core/mri.c ****             if (resumeExecution)
 1963              		.loc 1 195 31 is_stmt 0 view .LVU382
 1964 0022 3046     		mov	r0, r6
 1965 0024 A847     		blx	r5
 1966              	.LVL91:
 196:mri/core/mri.c ****             {
 1967              		.loc 1 196 13 is_stmt 1 view .LVU383
 196:mri/core/mri.c ****             {
 1968              		.loc 1 196 16 is_stmt 0 view .LVU384
 1969 0026 28BB     		cbnz	r0, .L203
 1970              	.LVL92:
 1971              	.L196:
 196:mri/core/mri.c ****             {
 1972              		.loc 1 196 16 view .LVU385
 1973              	.LBE28:
 204:mri/core/mri.c ****     if (areSingleSteppingInRange())
 1974              		.loc 1 204 5 is_stmt 1 view .LVU386
 1975 0028 FFF7FEFF 		bl	determineSignalValue
 1976              	.LVL93:
 205:mri/core/mri.c ****     {
 1977              		.loc 1 205 5 view .LVU387
 205:mri/core/mri.c ****     {
ARM GAS  /tmp/cccmYxwc.s 			page 49


 1978              		.loc 1 205 9 is_stmt 0 view .LVU388
 1979 002c FFF7FEFF 		bl	areSingleSteppingInRange
 1980              	.LVL94:
 205:mri/core/mri.c ****     {
 1981              		.loc 1 205 8 view .LVU389
 1982 0030 48B1     		cbz	r0, .L198
 1983              	.LBB29:
 207:mri/core/mri.c ****         if (pc >= g_mri.rangeForSingleStepping.start && pc < g_mri.rangeForSingleStepping.end)
 1984              		.loc 1 207 9 is_stmt 1 view .LVU390
 207:mri/core/mri.c ****         if (pc >= g_mri.rangeForSingleStepping.start && pc < g_mri.rangeForSingleStepping.end)
 1985              		.loc 1 207 23 is_stmt 0 view .LVU391
 1986 0032 FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 1987              	.LVL95:
 208:mri/core/mri.c ****         {
 1988              		.loc 1 208 9 is_stmt 1 view .LVU392
 208:mri/core/mri.c ****         {
 1989              		.loc 1 208 47 is_stmt 0 view .LVU393
 1990 0036 1D4A     		ldr	r2, .L207
 1991 0038 D26B     		ldr	r2, [r2, #60]
 208:mri/core/mri.c ****         {
 1992              		.loc 1 208 12 view .LVU394
 1993 003a 8242     		cmp	r2, r0
 1994 003c 03D8     		bhi	.L198
 208:mri/core/mri.c ****         {
 1995              		.loc 1 208 90 discriminator 1 view .LVU395
 1996 003e 1B4A     		ldr	r2, .L207
 1997 0040 126C     		ldr	r2, [r2, #64]
 208:mri/core/mri.c ****         {
 1998              		.loc 1 208 54 discriminator 1 view .LVU396
 1999 0042 8242     		cmp	r2, r0
 2000 0044 19D8     		bhi	.L204
 2001              	.LVL96:
 2002              	.L198:
 208:mri/core/mri.c ****         {
 2003              		.loc 1 208 54 discriminator 1 view .LVU397
 2004              	.LBE29:
 216:mri/core/mri.c **** 
 2005              		.loc 1 216 5 is_stmt 1 view .LVU398
 2006 0046 FFF7FEFF 		bl	clearSingleSteppingInRange
 2007              	.LVL97:
 218:mri/core/mri.c ****         g_mri.pEnteringHook(g_mri.pvEnteringLeavingContext);
 2008              		.loc 1 218 5 view .LVU399
 218:mri/core/mri.c ****         g_mri.pEnteringHook(g_mri.pvEnteringLeavingContext);
 2009              		.loc 1 218 14 is_stmt 0 view .LVU400
 2010 004a 184B     		ldr	r3, .L207
 2011 004c 9B68     		ldr	r3, [r3, #8]
 218:mri/core/mri.c ****         g_mri.pEnteringHook(g_mri.pvEnteringLeavingContext);
 2012              		.loc 1 218 8 view .LVU401
 2013 004e 13B1     		cbz	r3, .L199
 219:mri/core/mri.c ****     Platform_EnteringDebugger();
 2014              		.loc 1 219 9 is_stmt 1 view .LVU402
 2015 0050 164A     		ldr	r2, .L207
 2016 0052 1069     		ldr	r0, [r2, #16]
 2017 0054 9847     		blx	r3
 2018              	.LVL98:
 2019              	.L199:
 220:mri/core/mri.c **** 
ARM GAS  /tmp/cccmYxwc.s 			page 50


 2020              		.loc 1 220 5 view .LVU403
 2021 0056 FFF7FEFF 		bl	mriPlatform_EnteringDebugger
 2022              	.LVL99:
 222:mri/core/mri.c ****         Semihost_IsDebuggeeMakingSemihostCall() &&
 2023              		.loc 1 222 5 view .LVU404
 222:mri/core/mri.c ****         Semihost_IsDebuggeeMakingSemihostCall() &&
 2024              		.loc 1 222 9 is_stmt 0 view .LVU405
 2025 005a FFF7FEFF 		bl	isDebugTrap
 2026              	.LVL100:
 222:mri/core/mri.c ****         Semihost_IsDebuggeeMakingSemihostCall() &&
 2027              		.loc 1 222 8 view .LVU406
 2028 005e 98B9     		cbnz	r0, .L205
 2029              	.L200:
 232:mri/core/mri.c ****         Platform_DisplayFaultCauseToGdbConsole();
 2030              		.loc 1 232 5 is_stmt 1 view .LVU407
 232:mri/core/mri.c ****         Platform_DisplayFaultCauseToGdbConsole();
 2031              		.loc 1 232 10 is_stmt 0 view .LVU408
 2032 0060 FFF7FEFF 		bl	mriCore_IsFirstException
 2033              	.LVL101:
 232:mri/core/mri.c ****         Platform_DisplayFaultCauseToGdbConsole();
 2034              		.loc 1 232 8 view .LVU409
 2035 0064 F8B1     		cbz	r0, .L206
 2036              	.L201:
 234:mri/core/mri.c **** 
 2037              		.loc 1 234 5 is_stmt 1 view .LVU410
 2038 0066 FFF7FEFF 		bl	mriCmd_Send_T_StopResponse
 2039              	.LVL102:
 236:mri/core/mri.c **** 
 2040              		.loc 1 236 5 view .LVU411
 2041 006a FFF7FEFF 		bl	mriCore_GdbCommandHandlingLoop
 2042              	.LVL103:
 238:mri/core/mri.c **** }
 2043              		.loc 1 238 5 view .LVU412
 2044 006e FFF7FEFF 		bl	prepareForDebuggerExit
 2045              	.LVL104:
 2046              	.L195:
 239:mri/core/mri.c **** 
 2047              		.loc 1 239 1 is_stmt 0 view .LVU413
 2048 0072 70BD     		pop	{r4, r5, r6, pc}
 2049              	.LVL105:
 2050              	.L203:
 2051              	.LBB30:
 198:mri/core/mri.c ****                 return;
 2052              		.loc 1 198 17 is_stmt 1 view .LVU414
 2053 0074 FFF7FEFF 		bl	mriCmd_RestoreThreadStates
 2054              	.LVL106:
 199:mri/core/mri.c ****             }
 2055              		.loc 1 199 17 view .LVU415
 2056 0078 FBE7     		b	.L195
 2057              	.LVL107:
 2058              	.L204:
 199:mri/core/mri.c ****             }
 2059              		.loc 1 199 17 is_stmt 0 view .LVU416
 2060              	.LBE30:
 2061              	.LBB31:
 210:mri/core/mri.c ****             Platform_EnableSingleStep();
 2062              		.loc 1 210 13 is_stmt 1 view .LVU417
ARM GAS  /tmp/cccmYxwc.s 			page 51


 2063 007a FFF7FEFF 		bl	mriPlatform_DisableSingleStep
 2064              	.LVL108:
 211:mri/core/mri.c ****             RestoreThreadStates();
 2065              		.loc 1 211 13 view .LVU418
 2066 007e FFF7FEFF 		bl	mriPlatform_EnableSingleStep
 2067              	.LVL109:
 212:mri/core/mri.c ****             return;
 2068              		.loc 1 212 13 view .LVU419
 2069 0082 FFF7FEFF 		bl	mriCmd_RestoreThreadStates
 2070              	.LVL110:
 213:mri/core/mri.c ****         }
 2071              		.loc 1 213 13 view .LVU420
 2072 0086 F4E7     		b	.L195
 2073              	.LVL111:
 2074              	.L205:
 213:mri/core/mri.c ****         }
 2075              		.loc 1 213 13 is_stmt 0 view .LVU421
 2076              	.LBE31:
 223:mri/core/mri.c ****         Semihost_HandleSemihostRequest() &&
 2077              		.loc 1 223 9 discriminator 1 view .LVU422
 2078 0088 FFF7FEFF 		bl	mriSemihost_IsDebuggeeMakingSemihostCall
 2079              	.LVL112:
 222:mri/core/mri.c ****         Semihost_IsDebuggeeMakingSemihostCall() &&
 2080              		.loc 1 222 23 discriminator 1 view .LVU423
 2081 008c 0028     		cmp	r0, #0
 2082 008e E7D0     		beq	.L200
 224:mri/core/mri.c ****         !justSingleStepped )
 2083              		.loc 1 224 9 view .LVU424
 2084 0090 FFF7FEFF 		bl	mriSemihost_HandleSemihostRequest
 2085              	.LVL113:
 223:mri/core/mri.c ****         Semihost_HandleSemihostRequest() &&
 2086              		.loc 1 223 49 view .LVU425
 2087 0094 0028     		cmp	r0, #0
 2088 0096 E3D0     		beq	.L200
 224:mri/core/mri.c ****         !justSingleStepped )
 2089              		.loc 1 224 42 view .LVU426
 2090 0098 002C     		cmp	r4, #0
 2091 009a E1D1     		bne	.L200
 227:mri/core/mri.c ****         prepareForDebuggerExit();
 2092              		.loc 1 227 9 is_stmt 1 view .LVU427
 2093 009c FFF7FEFF 		bl	mriCmd_RestoreThreadStates
 2094              	.LVL114:
 228:mri/core/mri.c ****         return;
 2095              		.loc 1 228 9 view .LVU428
 2096 00a0 FFF7FEFF 		bl	prepareForDebuggerExit
 2097              	.LVL115:
 229:mri/core/mri.c ****     }
 2098              		.loc 1 229 9 view .LVU429
 2099 00a4 E5E7     		b	.L195
 2100              	.L206:
 233:mri/core/mri.c ****     Send_T_StopResponse();
 2101              		.loc 1 233 9 view .LVU430
 2102 00a6 FFF7FEFF 		bl	mriPlatform_DisplayFaultCauseToGdbConsole
 2103              	.LVL116:
 2104 00aa DCE7     		b	.L201
 2105              	.L208:
 2106              		.align	2
ARM GAS  /tmp/cccmYxwc.s 			page 52


 2107              	.L207:
 2108 00ac 00000000 		.word	g_mri
 2109              		.cfi_endproc
 2110              	.LFE17:
 2112              		.section	.rodata.commandTable.0,"a"
 2113              		.align	2
 2116              	commandTable.0:
 2117 0000 00000000 		.word	mriCmd_Send_T_StopResponse
 2118 0004 3F       		.byte	63
 2119 0005 000000   		.space	3
 2120 0008 00000000 		.word	mriCmd_HandleContinueCommand
 2121 000c 63       		.byte	99
 2122 000d 000000   		.space	3
 2123 0010 00000000 		.word	mriCmd_HandleContinueWithSignalCommand
 2124 0014 43       		.byte	67
 2125 0015 000000   		.space	3
 2126 0018 00000000 		.word	mriCmd_HandleDetachCommand
 2127 001c 44       		.byte	68
 2128 001d 000000   		.space	3
 2129 0020 00000000 		.word	mriHandleFileIOCommand
 2130 0024 46       		.byte	70
 2131 0025 000000   		.space	3
 2132 0028 00000000 		.word	mriCmd_HandleRegisterReadCommand
 2133 002c 67       		.byte	103
 2134 002d 000000   		.space	3
 2135 0030 00000000 		.word	mriCmd_HandleRegisterWriteCommand
 2136 0034 47       		.byte	71
 2137 0035 000000   		.space	3
 2138 0038 00000000 		.word	mriCmd_HandleThreadContextCommand
 2139 003c 48       		.byte	72
 2140 003d 000000   		.space	3
 2141 0040 00000000 		.word	mriCmd_HandleMemoryReadCommand
 2142 0044 6D       		.byte	109
 2143 0045 000000   		.space	3
 2144 0048 00000000 		.word	mriCmd_HandleMemoryWriteCommand
 2145 004c 4D       		.byte	77
 2146 004d 000000   		.space	3
 2147 0050 00000000 		.word	mriCmd_HandleQueryCommand
 2148 0054 71       		.byte	113
 2149 0055 000000   		.space	3
 2150 0058 00000000 		.word	mriCmd_HandleSingleStepCommand
 2151 005c 73       		.byte	115
 2152 005d 000000   		.space	3
 2153 0060 00000000 		.word	mriCmd_HandleSingleStepWithSignalCommand
 2154 0064 53       		.byte	83
 2155 0065 000000   		.space	3
 2156 0068 00000000 		.word	mriCmd_HandleIsThreadActiveCommand
 2157 006c 54       		.byte	84
 2158 006d 000000   		.space	3
 2159 0070 00000000 		.word	mriCmd_HandleVContCommands
 2160 0074 76       		.byte	118
 2161 0075 000000   		.space	3
 2162 0078 00000000 		.word	mriCmd_HandleBinaryMemoryWriteCommand
 2163 007c 58       		.byte	88
 2164 007d 000000   		.space	3
 2165 0080 00000000 		.word	mriCmd_HandleBreakpointWatchpointRemoveCommand
 2166 0084 7A       		.byte	122
ARM GAS  /tmp/cccmYxwc.s 			page 53


 2167 0085 000000   		.space	3
 2168 0088 00000000 		.word	mriCmd_HandleBreakpointWatchpointSetCommand
 2169 008c 5A       		.byte	90
 2170 008d 000000   		.space	3
 2171              		.section	.bss.g_mri,"aw",%nobits
 2172              		.align	2
 2175              	g_mri:
 2176 0000 00000000 		.space	80
 2176      00000000 
 2176      00000000 
 2176      00000000 
 2176      00000000 
 2177              		.weak	mriPlatform_HandleGDBCommand
 2178              		.text
 2179              	.Letext0:
 2180              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2181              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2182              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2183              		.file 6 "mri/core/mri.h"
 2184              		.file 7 "mri/core/buffer.h"
 2185              		.file 8 "mri/core/packet.h"
 2186              		.file 9 "mri/core/token.h"
 2187              		.file 10 "mri/core/context.h"
 2188              		.file 11 "mri/core/core.h"
 2189              		.file 12 "mri/core/platforms.h"
 2190              		.file 13 "mri/core/hex_convert.h"
 2191              		.file 14 "mri/core/cmd_break_watch.h"
 2192              		.file 15 "mri/core/cmd_memory.h"
 2193              		.file 16 "mri/core/cmd_vcont.h"
 2194              		.file 17 "mri/core/cmd_thread.h"
 2195              		.file 18 "mri/core/cmd_step.h"
 2196              		.file 19 "mri/core/cmd_query.h"
 2197              		.file 20 "mri/core/cmd_registers.h"
 2198              		.file 21 "mri/core/cmd_file.h"
 2199              		.file 22 "mri/core/cmd_continue.h"
 2200              		.file 23 "mri/core/semihost.h"
 2201              		.file 24 "mri/core/libc.h"
ARM GAS  /tmp/cccmYxwc.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mri.c
     /tmp/cccmYxwc.s:21     .text.setFirstExceptionFlag:0000000000000000 $t
     /tmp/cccmYxwc.s:26     .text.setFirstExceptionFlag:0000000000000000 setFirstExceptionFlag
     /tmp/cccmYxwc.s:45     .text.setFirstExceptionFlag:000000000000000c $d
     /tmp/cccmYxwc.s:2175   .bss.g_mri:0000000000000000 g_mri
     /tmp/cccmYxwc.s:50     .text.setSuccessfulInitFlag:0000000000000000 $t
     /tmp/cccmYxwc.s:55     .text.setSuccessfulInitFlag:0000000000000000 setSuccessfulInitFlag
     /tmp/cccmYxwc.s:74     .text.setSuccessfulInitFlag:000000000000000c $d
     /tmp/cccmYxwc.s:79     .text.isTempBreakpointSet:0000000000000000 $t
     /tmp/cccmYxwc.s:84     .text.isTempBreakpointSet:0000000000000000 isTempBreakpointSet
     /tmp/cccmYxwc.s:101    .text.isTempBreakpointSet:000000000000000c $d
     /tmp/cccmYxwc.s:106    .text.clearThumbBitOfAddress:0000000000000000 $t
     /tmp/cccmYxwc.s:111    .text.clearThumbBitOfAddress:0000000000000000 clearThumbBitOfAddress
     /tmp/cccmYxwc.s:129    .text.setTempBreakpointFlag:0000000000000000 $t
     /tmp/cccmYxwc.s:134    .text.setTempBreakpointFlag:0000000000000000 setTempBreakpointFlag
     /tmp/cccmYxwc.s:153    .text.setTempBreakpointFlag:000000000000000c $d
     /tmp/cccmYxwc.s:158    .text.clearControlCEncounteredFlag:0000000000000000 $t
     /tmp/cccmYxwc.s:163    .text.clearControlCEncounteredFlag:0000000000000000 clearControlCEncounteredFlag
     /tmp/cccmYxwc.s:182    .text.clearControlCEncounteredFlag:000000000000000c $d
     /tmp/cccmYxwc.s:187    .text.clearTempBreakpointFlag:0000000000000000 $t
     /tmp/cccmYxwc.s:192    .text.clearTempBreakpointFlag:0000000000000000 clearTempBreakpointFlag
     /tmp/cccmYxwc.s:211    .text.clearTempBreakpointFlag:000000000000000c $d
     /tmp/cccmYxwc.s:216    .text.clearSingleSteppingInRange:0000000000000000 $t
     /tmp/cccmYxwc.s:221    .text.clearSingleSteppingInRange:0000000000000000 clearSingleSteppingInRange
     /tmp/cccmYxwc.s:240    .text.clearSingleSteppingInRange:000000000000000c $d
     /tmp/cccmYxwc.s:245    .text.isDebugTrap:0000000000000000 $t
     /tmp/cccmYxwc.s:250    .text.isDebugTrap:0000000000000000 isDebugTrap
     /tmp/cccmYxwc.s:270    .text.isDebugTrap:0000000000000010 $d
     /tmp/cccmYxwc.s:275    .text.clearFirstExceptionFlag:0000000000000000 $t
     /tmp/cccmYxwc.s:280    .text.clearFirstExceptionFlag:0000000000000000 clearFirstExceptionFlag
     /tmp/cccmYxwc.s:299    .text.clearFirstExceptionFlag:000000000000000c $d
     /tmp/cccmYxwc.s:304    .text.clearCoreStructure:0000000000000000 $t
     /tmp/cccmYxwc.s:309    .text.clearCoreStructure:0000000000000000 clearCoreStructure
     /tmp/cccmYxwc.s:331    .text.clearCoreStructure:0000000000000010 $d
     /tmp/cccmYxwc.s:336    .text.initializePlatformSpecificModulesWithDebuggerParameters:0000000000000000 $t
     /tmp/cccmYxwc.s:341    .text.initializePlatformSpecificModulesWithDebuggerParameters:0000000000000000 initializePlatformSpecificModulesWithDebuggerParameters
     /tmp/cccmYxwc.s:413    .text.initializePlatformSpecificModulesWithDebuggerParameters:000000000000002c $d
     /tmp/cccmYxwc.s:418    .text.wasTempBreakpointHit:0000000000000000 $t
     /tmp/cccmYxwc.s:423    .text.wasTempBreakpointHit:0000000000000000 wasTempBreakpointHit
     /tmp/cccmYxwc.s:464    .text.wasTempBreakpointHit:0000000000000024 $d
     /tmp/cccmYxwc.s:469    .text.clearTempBreakpoint:0000000000000000 $t
     /tmp/cccmYxwc.s:474    .text.clearTempBreakpoint:0000000000000000 clearTempBreakpoint
     /tmp/cccmYxwc.s:538    .text.clearTempBreakpoint:0000000000000028 $d
     /tmp/cccmYxwc.s:544    .text.determineSignalValue:0000000000000000 $t
     /tmp/cccmYxwc.s:549    .text.determineSignalValue:0000000000000000 determineSignalValue
     /tmp/cccmYxwc.s:572    .text.determineSignalValue:0000000000000010 $d
     /tmp/cccmYxwc.s:577    .text.areSingleSteppingInRange:0000000000000000 $t
     /tmp/cccmYxwc.s:582    .text.areSingleSteppingInRange:0000000000000000 areSingleSteppingInRange
     /tmp/cccmYxwc.s:661    .text.areSingleSteppingInRange:0000000000000040 $d
     /tmp/cccmYxwc.s:666    .text.waitForAckToBeTransmitted:0000000000000000 $t
     /tmp/cccmYxwc.s:671    .text.waitForAckToBeTransmitted:0000000000000000 waitForAckToBeTransmitted
     /tmp/cccmYxwc.s:697    .text.mriInit:0000000000000000 $t
     /tmp/cccmYxwc.s:703    .text.mriInit:0000000000000000 mriInit
     /tmp/cccmYxwc.s:758    .text.mriInit:0000000000000024 $d
     /tmp/cccmYxwc.s:763    .text.mriCore_SetTempBreakpoint:0000000000000000 $t
     /tmp/cccmYxwc.s:769    .text.mriCore_SetTempBreakpoint:0000000000000000 mriCore_SetTempBreakpoint
ARM GAS  /tmp/cccmYxwc.s 			page 55


     /tmp/cccmYxwc.s:867    .text.mriCore_SetTempBreakpoint:0000000000000050 $d
     /tmp/cccmYxwc.s:873    .text.mriCoreSetDebuggerHooks:0000000000000000 $t
     /tmp/cccmYxwc.s:879    .text.mriCoreSetDebuggerHooks:0000000000000000 mriCoreSetDebuggerHooks
     /tmp/cccmYxwc.s:902    .text.mriCoreSetDebuggerHooks:000000000000000c $d
     /tmp/cccmYxwc.s:907    .text.mriCore_InitPacketBuffers:0000000000000000 $t
     /tmp/cccmYxwc.s:913    .text.mriCore_InitPacketBuffers:0000000000000000 mriCore_InitPacketBuffers
     /tmp/cccmYxwc.s:942    .text.mriCore_InitPacketBuffers:0000000000000018 $d
     /tmp/cccmYxwc.s:947    .text.getPacketFromGDB:0000000000000000 $t
     /tmp/cccmYxwc.s:952    .text.getPacketFromGDB:0000000000000000 getPacketFromGDB
     /tmp/cccmYxwc.s:975    .text.getPacketFromGDB:0000000000000010 $d
     /tmp/cccmYxwc.s:980    .text.mriCore_WasSuccessfullyInit:0000000000000000 $t
     /tmp/cccmYxwc.s:986    .text.mriCore_WasSuccessfullyInit:0000000000000000 mriCore_WasSuccessfullyInit
     /tmp/cccmYxwc.s:1003   .text.mriCore_WasSuccessfullyInit:000000000000000c $d
     /tmp/cccmYxwc.s:1008   .text.mriCore_WasControlCFlagSentFromGdb:0000000000000000 $t
     /tmp/cccmYxwc.s:1014   .text.mriCore_WasControlCFlagSentFromGdb:0000000000000000 mriCore_WasControlCFlagSentFromGdb
     /tmp/cccmYxwc.s:1031   .text.mriCore_WasControlCFlagSentFromGdb:000000000000000c $d
     /tmp/cccmYxwc.s:1036   .text.mriCore_RequestResetOnNextContinue:0000000000000000 $t
     /tmp/cccmYxwc.s:1042   .text.mriCore_RequestResetOnNextContinue:0000000000000000 mriCore_RequestResetOnNextContinue
     /tmp/cccmYxwc.s:1061   .text.mriCore_RequestResetOnNextContinue:000000000000000c $d
     /tmp/cccmYxwc.s:1066   .text.mriCore_WasControlCEncountered:0000000000000000 $t
     /tmp/cccmYxwc.s:1072   .text.mriCore_WasControlCEncountered:0000000000000000 mriCore_WasControlCEncountered
     /tmp/cccmYxwc.s:1089   .text.mriCore_WasControlCEncountered:000000000000000c $d
     /tmp/cccmYxwc.s:1094   .text.mriCore_ControlCEncountered:0000000000000000 $t
     /tmp/cccmYxwc.s:1100   .text.mriCore_ControlCEncountered:0000000000000000 mriCore_ControlCEncountered
     /tmp/cccmYxwc.s:1119   .text.mriCore_ControlCEncountered:000000000000000c $d
     /tmp/cccmYxwc.s:1124   .text.mriCore_WasResetOnNextContinueRequested:0000000000000000 $t
     /tmp/cccmYxwc.s:1130   .text.mriCore_WasResetOnNextContinueRequested:0000000000000000 mriCore_WasResetOnNextContinueRequested
     /tmp/cccmYxwc.s:1147   .text.mriCore_WasResetOnNextContinueRequested:000000000000000c $d
     /tmp/cccmYxwc.s:1152   .text.prepareForDebuggerExit:0000000000000000 $t
     /tmp/cccmYxwc.s:1157   .text.prepareForDebuggerExit:0000000000000000 prepareForDebuggerExit
     /tmp/cccmYxwc.s:1212   .text.prepareForDebuggerExit:0000000000000030 $d
     /tmp/cccmYxwc.s:1217   .text.mriCore_SetSingleSteppingRange:0000000000000000 $t
     /tmp/cccmYxwc.s:1223   .text.mriCore_SetSingleSteppingRange:0000000000000000 mriCore_SetSingleSteppingRange
     /tmp/cccmYxwc.s:1250   .text.mriCore_SetSingleSteppingRange:0000000000000018 $d
     /tmp/cccmYxwc.s:1255   .text.mriCore_GetContext:0000000000000000 $t
     /tmp/cccmYxwc.s:1261   .text.mriCore_GetContext:0000000000000000 mriCore_GetContext
     /tmp/cccmYxwc.s:1276   .text.mriCore_GetContext:0000000000000008 $d
     /tmp/cccmYxwc.s:1281   .text.mriCore_SetContext:0000000000000000 $t
     /tmp/cccmYxwc.s:1287   .text.mriCore_SetContext:0000000000000000 mriCore_SetContext
     /tmp/cccmYxwc.s:1304   .text.mriCore_SetContext:0000000000000008 $d
     /tmp/cccmYxwc.s:1309   .text.mriCore_RecordControlCFlagSentFromGdb:0000000000000000 $t
     /tmp/cccmYxwc.s:1315   .text.mriCore_RecordControlCFlagSentFromGdb:0000000000000000 mriCore_RecordControlCFlagSentFromGdb
     /tmp/cccmYxwc.s:1347   .text.mriCore_RecordControlCFlagSentFromGdb:000000000000001c $d
     /tmp/cccmYxwc.s:1352   .text.mriCore_WasSemihostCallCancelledByGdb:0000000000000000 $t
     /tmp/cccmYxwc.s:1358   .text.mriCore_WasSemihostCallCancelledByGdb:0000000000000000 mriCore_WasSemihostCallCancelledByGdb
     /tmp/cccmYxwc.s:1378   .text.mriCore_WasSemihostCallCancelledByGdb:0000000000000010 $d
     /tmp/cccmYxwc.s:1383   .text.mriCore_FlagSemihostCallAsHandled:0000000000000000 $t
     /tmp/cccmYxwc.s:1389   .text.mriCore_FlagSemihostCallAsHandled:0000000000000000 mriCore_FlagSemihostCallAsHandled
     /tmp/cccmYxwc.s:1414   .text.mriCore_FlagSemihostCallAsHandled:0000000000000014 $d
     /tmp/cccmYxwc.s:1419   .text.mriCore_IsFirstException:0000000000000000 $t
     /tmp/cccmYxwc.s:1425   .text.mriCore_IsFirstException:0000000000000000 mriCore_IsFirstException
     /tmp/cccmYxwc.s:1442   .text.mriCore_IsFirstException:000000000000000c $d
     /tmp/cccmYxwc.s:1447   .text.mriCore_SetSignalValue:0000000000000000 $t
     /tmp/cccmYxwc.s:1453   .text.mriCore_SetSignalValue:0000000000000000 mriCore_SetSignalValue
     /tmp/cccmYxwc.s:1470   .text.mriCore_SetSignalValue:0000000000000008 $d
     /tmp/cccmYxwc.s:1475   .text.mriCore_GetSignalValue:0000000000000000 $t
     /tmp/cccmYxwc.s:1481   .text.mriCore_GetSignalValue:0000000000000000 mriCore_GetSignalValue
ARM GAS  /tmp/cccmYxwc.s 			page 56


     /tmp/cccmYxwc.s:1496   .text.mriCore_GetSignalValue:0000000000000008 $d
     /tmp/cccmYxwc.s:1501   .text.mriCore_SetSemihostReturnValues:0000000000000000 $t
     /tmp/cccmYxwc.s:1507   .text.mriCore_SetSemihostReturnValues:0000000000000000 mriCore_SetSemihostReturnValues
     /tmp/cccmYxwc.s:1527   .text.mriCore_SetSemihostReturnValues:0000000000000008 $d
     /tmp/cccmYxwc.s:1532   .text.mriCore_GetSemihostReturnCode:0000000000000000 $t
     /tmp/cccmYxwc.s:1538   .text.mriCore_GetSemihostReturnCode:0000000000000000 mriCore_GetSemihostReturnCode
     /tmp/cccmYxwc.s:1553   .text.mriCore_GetSemihostReturnCode:0000000000000008 $d
     /tmp/cccmYxwc.s:1558   .text.mriCore_GetSemihostErrno:0000000000000000 $t
     /tmp/cccmYxwc.s:1564   .text.mriCore_GetSemihostErrno:0000000000000000 mriCore_GetSemihostErrno
     /tmp/cccmYxwc.s:1579   .text.mriCore_GetSemihostErrno:0000000000000008 $d
     /tmp/cccmYxwc.s:1584   .text.mriCore_GetBuffer:0000000000000000 $t
     /tmp/cccmYxwc.s:1590   .text.mriCore_GetBuffer:0000000000000000 mriCore_GetBuffer
     /tmp/cccmYxwc.s:1604   .text.mriCore_GetBuffer:0000000000000004 $d
     /tmp/cccmYxwc.s:1609   .text.mriCore_PrepareStringResponse:0000000000000000 $t
     /tmp/cccmYxwc.s:1615   .text.mriCore_PrepareStringResponse:0000000000000000 mriCore_PrepareStringResponse
     /tmp/cccmYxwc.s:1645   .text.mriCore_GetInitializedBuffer:0000000000000000 $t
     /tmp/cccmYxwc.s:1651   .text.mriCore_GetInitializedBuffer:0000000000000000 mriCore_GetInitializedBuffer
     /tmp/cccmYxwc.s:1675   .rodata.mriCore_SendPacketToGdb.str1.4:0000000000000000 $d
     /tmp/cccmYxwc.s:1679   .text.mriCore_SendPacketToGdb:0000000000000000 $t
     /tmp/cccmYxwc.s:1685   .text.mriCore_SendPacketToGdb:0000000000000000 mriCore_SendPacketToGdb
     /tmp/cccmYxwc.s:1729   .text.mriCore_SendPacketToGdb:000000000000002c $d
     /tmp/cccmYxwc.s:1735   .rodata.handleGDBCommand.str1.4:0000000000000000 $d
     /tmp/cccmYxwc.s:1739   .text.handleGDBCommand:0000000000000000 $t
     /tmp/cccmYxwc.s:1744   .text.handleGDBCommand:0000000000000000 handleGDBCommand
     /tmp/cccmYxwc.s:1865   .text.handleGDBCommand:0000000000000068 $d
     /tmp/cccmYxwc.s:2116   .rodata.commandTable.0:0000000000000000 commandTable.0
     /tmp/cccmYxwc.s:1872   .text.mriCore_GdbCommandHandlingLoop:0000000000000000 $t
     /tmp/cccmYxwc.s:1878   .text.mriCore_GdbCommandHandlingLoop:0000000000000000 mriCore_GdbCommandHandlingLoop
     /tmp/cccmYxwc.s:1905   .text.mriDebugException:0000000000000000 $t
     /tmp/cccmYxwc.s:1911   .text.mriDebugException:0000000000000000 mriDebugException
     /tmp/cccmYxwc.s:2108   .text.mriDebugException:00000000000000ac $d
     /tmp/cccmYxwc.s:2113   .rodata.commandTable.0:0000000000000000 $d
     /tmp/cccmYxwc.s:2172   .bss.g_mri:0000000000000000 $d

UNDEFINED SYMBOLS
mri_memset
mriToken_Init
mriToken_SplitString
mriPlatform_Init
mriExceptionCode
mriPlatform_GetProgramCounter
mriPlatform_ClearHardwareBreakpoint
mriPlatform_DetermineCauseOfException
mriPlatform_GetTrapReason
mriPlatform_CommHasTransmitCompleted
mriPlatform_SetHardwareBreakpoint
mriPlatform_GetPacketBuffer
mriPlatform_GetPacketBufferSize
mriPacket_Init
mriPacket_GetFromGDB
mriPlatform_LeavingDebugger
mriPlatform_IsSingleStepping
mriPlatform_ResetDevice
mriPlatform_AdvanceProgramCounterToNextInstruction
mriPlatform_SetSemihostCallReturnAndErrnoValues
mriBuffer_WriteString
mriBuffer_OverrunDetected
ARM GAS  /tmp/cccmYxwc.s 			page 57


mriBuffer_SetEndOfBuffer
mriPacket_SendToGDB
mriPlatform_HandleGDBCommand
mriBuffer_Reset
mriBuffer_ReadChar
mriPlatform_EnteringDebugger
mriCmd_Send_T_StopResponse
mriCmd_RestoreThreadStates
mriPlatform_DisableSingleStep
mriPlatform_EnableSingleStep
mriSemihost_IsDebuggeeMakingSemihostCall
mriSemihost_HandleSemihostRequest
mriPlatform_DisplayFaultCauseToGdbConsole
mriCmd_HandleContinueCommand
mriCmd_HandleContinueWithSignalCommand
mriCmd_HandleDetachCommand
mriHandleFileIOCommand
mriCmd_HandleRegisterReadCommand
mriCmd_HandleRegisterWriteCommand
mriCmd_HandleThreadContextCommand
mriCmd_HandleMemoryReadCommand
mriCmd_HandleMemoryWriteCommand
mriCmd_HandleQueryCommand
mriCmd_HandleSingleStepCommand
mriCmd_HandleSingleStepWithSignalCommand
mriCmd_HandleIsThreadActiveCommand
mriCmd_HandleVContCommands
mriCmd_HandleBinaryMemoryWriteCommand
mriCmd_HandleBreakpointWatchpointRemoveCommand
mriCmd_HandleBreakpointWatchpointSetCommand
