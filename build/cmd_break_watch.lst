ARM GAS  /tmp/ccOh3fOC.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"cmd_break_watch.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "mri/core/cmd_break_watch.c"
  20              		.section	.rodata.handleBreakpointWatchpointException.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 45303100 		.ascii	"E01\000"
  24              		.align	2
  25              	.LC1:
  26 0004 45303500 		.ascii	"E05\000"
  27              		.section	.text.handleBreakpointWatchpointException,"ax",%progbits
  28              		.align	1
  29              		.syntax unified
  30              		.thumb
  31              		.thumb_func
  33              	handleBreakpointWatchpointException:
  34              	.LFB6:
   1:mri/core/cmd_break_watch.c **** /* Copyright 2014 Adam Green (https://github.com/adamgreen/)
   2:mri/core/cmd_break_watch.c **** 
   3:mri/core/cmd_break_watch.c ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/cmd_break_watch.c ****    you may not use this file except in compliance with the License.
   5:mri/core/cmd_break_watch.c ****    You may obtain a copy of the License at
   6:mri/core/cmd_break_watch.c **** 
   7:mri/core/cmd_break_watch.c ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/cmd_break_watch.c **** 
   9:mri/core/cmd_break_watch.c ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/cmd_break_watch.c ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/cmd_break_watch.c ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/cmd_break_watch.c ****    See the License for the specific language governing permissions and
  13:mri/core/cmd_break_watch.c ****    limitations under the License.
  14:mri/core/cmd_break_watch.c **** */
  15:mri/core/cmd_break_watch.c **** /* Handlers for gdb breakpoint and watchpoint commands. */
  16:mri/core/cmd_break_watch.c **** #include <core/platforms.h>
  17:mri/core/cmd_break_watch.c **** #include <core/core.h>
  18:mri/core/cmd_break_watch.c **** #include <core/mri.h>
  19:mri/core/cmd_break_watch.c **** #include <core/cmd_common.h>
  20:mri/core/cmd_break_watch.c **** #include <core/cmd_break_watch.h>
  21:mri/core/cmd_break_watch.c **** 
  22:mri/core/cmd_break_watch.c **** typedef struct
  23:mri/core/cmd_break_watch.c **** {
  24:mri/core/cmd_break_watch.c ****     uint32_t address;
ARM GAS  /tmp/ccOh3fOC.s 			page 2


  25:mri/core/cmd_break_watch.c ****     uint32_t kind;
  26:mri/core/cmd_break_watch.c ****     char     type;
  27:mri/core/cmd_break_watch.c **** } BreakpointWatchpointArguments;
  28:mri/core/cmd_break_watch.c **** 
  29:mri/core/cmd_break_watch.c **** static void parseBreakpointWatchpointCommandArguments(BreakpointWatchpointArguments* pArguments);
  30:mri/core/cmd_break_watch.c **** static void handleHardwareBreakpointSetCommand(BreakpointWatchpointArguments* pArguments);
  31:mri/core/cmd_break_watch.c **** static void handleBreakpointWatchpointException(void);
  32:mri/core/cmd_break_watch.c **** static void handleWatchpointSetCommand(PlatformWatchpointType type, BreakpointWatchpointArguments* 
  33:mri/core/cmd_break_watch.c **** /* Handle the '"Z*" commands used by gdb to set hardware breakpoints/watchpoints.
  34:mri/core/cmd_break_watch.c **** 
  35:mri/core/cmd_break_watch.c ****     Command Format:     Z*,AAAAAAAA,K
  36:mri/core/cmd_break_watch.c ****     Response Format:    OK
  37:mri/core/cmd_break_watch.c ****     Where * is 1 for hardware breakpoint.
  38:mri/core/cmd_break_watch.c ****                2 for write watchpoint.
  39:mri/core/cmd_break_watch.c ****                3 for read watchpoint.
  40:mri/core/cmd_break_watch.c ****                4 for read/write watchpoint.
  41:mri/core/cmd_break_watch.c ****           AAAAAAAA is the hexadecimal representation of the address on which the breakpoint should 
  42:mri/core/cmd_break_watch.c ****           K is either 2: 16-bit Thumb instruction.
  43:mri/core/cmd_break_watch.c ****                       3: 32-bit Thumb2 instruction.
  44:mri/core/cmd_break_watch.c ****                       4: 32-bit ARM insruction.
  45:mri/core/cmd_break_watch.c ****                       value: byte size for data watchpoint.
  46:mri/core/cmd_break_watch.c **** */
  47:mri/core/cmd_break_watch.c **** uint32_t HandleBreakpointWatchpointSetCommand(void)
  48:mri/core/cmd_break_watch.c **** {
  49:mri/core/cmd_break_watch.c ****     BreakpointWatchpointArguments  arguments;
  50:mri/core/cmd_break_watch.c **** 
  51:mri/core/cmd_break_watch.c ****     __try
  52:mri/core/cmd_break_watch.c ****     {
  53:mri/core/cmd_break_watch.c ****         parseBreakpointWatchpointCommandArguments(&arguments);
  54:mri/core/cmd_break_watch.c ****     }
  55:mri/core/cmd_break_watch.c ****     __catch
  56:mri/core/cmd_break_watch.c ****     {
  57:mri/core/cmd_break_watch.c ****         PrepareStringResponse(MRI_ERROR_INVALID_ARGUMENT);
  58:mri/core/cmd_break_watch.c ****         return 0;
  59:mri/core/cmd_break_watch.c ****     }
  60:mri/core/cmd_break_watch.c **** 
  61:mri/core/cmd_break_watch.c ****     switch(arguments.type)
  62:mri/core/cmd_break_watch.c ****     {
  63:mri/core/cmd_break_watch.c ****     case '1':
  64:mri/core/cmd_break_watch.c ****         handleHardwareBreakpointSetCommand(&arguments);
  65:mri/core/cmd_break_watch.c ****         break;
  66:mri/core/cmd_break_watch.c ****     case '2':
  67:mri/core/cmd_break_watch.c ****         handleWatchpointSetCommand(MRI_PLATFORM_WRITE_WATCHPOINT, &arguments);
  68:mri/core/cmd_break_watch.c ****         break;
  69:mri/core/cmd_break_watch.c ****     case '3':
  70:mri/core/cmd_break_watch.c ****         handleWatchpointSetCommand(MRI_PLATFORM_READ_WATCHPOINT, &arguments);
  71:mri/core/cmd_break_watch.c ****         break;
  72:mri/core/cmd_break_watch.c ****     case '4':
  73:mri/core/cmd_break_watch.c ****         handleWatchpointSetCommand(MRI_PLATFORM_READWRITE_WATCHPOINT, &arguments);
  74:mri/core/cmd_break_watch.c ****         break;
  75:mri/core/cmd_break_watch.c ****     default:
  76:mri/core/cmd_break_watch.c ****         PrepareEmptyResponseForUnknownCommand();
  77:mri/core/cmd_break_watch.c ****         break;
  78:mri/core/cmd_break_watch.c ****     }
  79:mri/core/cmd_break_watch.c **** 
  80:mri/core/cmd_break_watch.c ****     return 0;
  81:mri/core/cmd_break_watch.c **** }
ARM GAS  /tmp/ccOh3fOC.s 			page 3


  82:mri/core/cmd_break_watch.c **** 
  83:mri/core/cmd_break_watch.c **** static void parseBreakpointWatchpointCommandArguments(BreakpointWatchpointArguments* pArguments)
  84:mri/core/cmd_break_watch.c **** {
  85:mri/core/cmd_break_watch.c ****     Buffer*    pBuffer = GetBuffer();
  86:mri/core/cmd_break_watch.c **** 
  87:mri/core/cmd_break_watch.c ****     __try
  88:mri/core/cmd_break_watch.c ****     {
  89:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->type = Buffer_ReadChar(pBuffer) );
  90:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
  91:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->address = ReadUIntegerArgument(pBuffer) );
  92:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
  93:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->kind = ReadUIntegerArgument(pBuffer) );
  94:mri/core/cmd_break_watch.c ****     }
  95:mri/core/cmd_break_watch.c ****     __catch
  96:mri/core/cmd_break_watch.c ****     {
  97:mri/core/cmd_break_watch.c ****         __rethrow;
  98:mri/core/cmd_break_watch.c ****     }
  99:mri/core/cmd_break_watch.c **** }
 100:mri/core/cmd_break_watch.c **** 
 101:mri/core/cmd_break_watch.c **** static void handleHardwareBreakpointSetCommand(BreakpointWatchpointArguments* pArguments)
 102:mri/core/cmd_break_watch.c **** {
 103:mri/core/cmd_break_watch.c ****     __try
 104:mri/core/cmd_break_watch.c ****     {
 105:mri/core/cmd_break_watch.c ****         Platform_SetHardwareBreakpointOfGdbKind(pArguments->address, pArguments->kind);
 106:mri/core/cmd_break_watch.c ****     }
 107:mri/core/cmd_break_watch.c ****     __catch
 108:mri/core/cmd_break_watch.c ****     {
 109:mri/core/cmd_break_watch.c ****         handleBreakpointWatchpointException();
 110:mri/core/cmd_break_watch.c ****         return;
 111:mri/core/cmd_break_watch.c ****     }
 112:mri/core/cmd_break_watch.c ****     PrepareStringResponse("OK");
 113:mri/core/cmd_break_watch.c **** }
 114:mri/core/cmd_break_watch.c **** 
 115:mri/core/cmd_break_watch.c **** static void handleBreakpointWatchpointException(void)
 116:mri/core/cmd_break_watch.c **** {
  35              		.loc 1 116 1 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39 0000 08B5     		push	{r3, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 3, -8
  43              		.cfi_offset 14, -4
 117:mri/core/cmd_break_watch.c ****     switch(getExceptionCode())
  44              		.loc 1 117 5 view .LVU1
  45              	.LBB18:
  46              	.LBI18:
  47              		.file 2 "mri/core/try_catch.h"
   1:mri/core/try_catch.h **** /* Copyright 2014 Adam Green (https://github.com/adamgreen/)
   2:mri/core/try_catch.h **** 
   3:mri/core/try_catch.h ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/try_catch.h ****    you may not use this file except in compliance with the License.
   5:mri/core/try_catch.h ****    You may obtain a copy of the License at
   6:mri/core/try_catch.h **** 
   7:mri/core/try_catch.h ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/try_catch.h **** 
ARM GAS  /tmp/ccOh3fOC.s 			page 4


   9:mri/core/try_catch.h ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/try_catch.h ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/try_catch.h ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/try_catch.h ****    See the License for the specific language governing permissions and
  13:mri/core/try_catch.h ****    limitations under the License.
  14:mri/core/try_catch.h **** */
  15:mri/core/try_catch.h **** /* Very rough exception handling like macros for C. */
  16:mri/core/try_catch.h **** #ifndef MRI_TRY_CATCH_H_
  17:mri/core/try_catch.h **** #define MRI_TRY_CATCH_H_
  18:mri/core/try_catch.h **** 
  19:mri/core/try_catch.h **** #define noException                         0
  20:mri/core/try_catch.h **** #define bufferOverrunException              1
  21:mri/core/try_catch.h **** #define invalidHexDigitException            2
  22:mri/core/try_catch.h **** #define invalidValueException               3
  23:mri/core/try_catch.h **** #define invalidArgumentException            4
  24:mri/core/try_catch.h **** #define timeoutException                    5
  25:mri/core/try_catch.h **** #define invalidIndexException               6
  26:mri/core/try_catch.h **** #define notFoundException                   7
  27:mri/core/try_catch.h **** #define exceededHardwareResourcesException  8
  28:mri/core/try_catch.h **** #define invalidDecDigitException            9
  29:mri/core/try_catch.h **** #define memFaultException                   10
  30:mri/core/try_catch.h **** #define mriMaxException                     15
  31:mri/core/try_catch.h **** 
  32:mri/core/try_catch.h **** extern int mriExceptionCode;
  33:mri/core/try_catch.h **** 
  34:mri/core/try_catch.h **** 
  35:mri/core/try_catch.h **** /* Allow an application including MRI to extend with their own exception codes and replace the belo
  36:mri/core/try_catch.h **** #ifndef MRI_SKIP_TRY_CATCH_MACRO_DEFINES
  37:mri/core/try_catch.h **** 
  38:mri/core/try_catch.h **** /* On Linux, it is possible that __try and __catch are already defined. */
  39:mri/core/try_catch.h **** #undef __try
  40:mri/core/try_catch.h **** #undef __catch
  41:mri/core/try_catch.h **** 
  42:mri/core/try_catch.h **** #define __throws
  43:mri/core/try_catch.h **** 
  44:mri/core/try_catch.h **** #define __try \
  45:mri/core/try_catch.h ****         do \
  46:mri/core/try_catch.h ****         { \
  47:mri/core/try_catch.h ****             clearExceptionCode();
  48:mri/core/try_catch.h **** 
  49:mri/core/try_catch.h **** #define __throwing_func(X) \
  50:mri/core/try_catch.h ****             X; \
  51:mri/core/try_catch.h ****             if (mriExceptionCode) \
  52:mri/core/try_catch.h ****                 break;
  53:mri/core/try_catch.h **** 
  54:mri/core/try_catch.h **** #define __catch \
  55:mri/core/try_catch.h ****         } while (0); \
  56:mri/core/try_catch.h ****         if (mriExceptionCode)
  57:mri/core/try_catch.h **** 
  58:mri/core/try_catch.h **** #define __throw(EXCEPTION) return ((void)setExceptionCode(EXCEPTION))
  59:mri/core/try_catch.h **** 
  60:mri/core/try_catch.h **** #define __throw_and_return(EXCEPTION, RETURN) return (setExceptionCode(EXCEPTION), (RETURN))
  61:mri/core/try_catch.h **** 
  62:mri/core/try_catch.h **** #define __rethrow return
  63:mri/core/try_catch.h **** 
  64:mri/core/try_catch.h **** #define __rethrow_and_return(RETURN) return RETURN
  65:mri/core/try_catch.h **** 
ARM GAS  /tmp/ccOh3fOC.s 			page 5


  66:mri/core/try_catch.h **** static inline int getExceptionCode(void)
  48              		.loc 2 66 19 view .LVU2
  49              	.LBB19:
  67:mri/core/try_catch.h **** {
  68:mri/core/try_catch.h ****     return mriExceptionCode;
  50              		.loc 2 68 5 view .LVU3
  51              		.loc 2 68 12 is_stmt 0 view .LVU4
  52 0002 064B     		ldr	r3, .L6
  53 0004 1B68     		ldr	r3, [r3]
  54              	.LBE19:
  55              	.LBE18:
  56              		.loc 1 117 5 view .LVU5
  57 0006 042B     		cmp	r3, #4
  58 0008 03D0     		beq	.L5
 118:mri/core/cmd_break_watch.c ****     {
 119:mri/core/cmd_break_watch.c ****     case invalidArgumentException:
 120:mri/core/cmd_break_watch.c ****         PrepareStringResponse(MRI_ERROR_INVALID_ARGUMENT);
 121:mri/core/cmd_break_watch.c ****         break;
 122:mri/core/cmd_break_watch.c ****     case exceededHardwareResourcesException:
 123:mri/core/cmd_break_watch.c ****     default:
 124:mri/core/cmd_break_watch.c ****         PrepareStringResponse(MRI_ERROR_NO_FREE_BREAKPOINT);
  59              		.loc 1 124 9 is_stmt 1 view .LVU6
  60 000a 0548     		ldr	r0, .L6+4
  61 000c FFF7FEFF 		bl	mriCore_PrepareStringResponse
  62              	.LVL0:
 125:mri/core/cmd_break_watch.c ****         break;
  63              		.loc 1 125 9 view .LVU7
 126:mri/core/cmd_break_watch.c ****     }
 127:mri/core/cmd_break_watch.c **** 
 128:mri/core/cmd_break_watch.c ****     return;
  64              		.loc 1 128 5 view .LVU8
  65              	.L1:
 129:mri/core/cmd_break_watch.c **** }
  66              		.loc 1 129 1 is_stmt 0 view .LVU9
  67 0010 08BD     		pop	{r3, pc}
  68              	.L5:
 120:mri/core/cmd_break_watch.c ****         break;
  69              		.loc 1 120 9 is_stmt 1 view .LVU10
  70 0012 0448     		ldr	r0, .L6+8
  71 0014 FFF7FEFF 		bl	mriCore_PrepareStringResponse
  72              	.LVL1:
 121:mri/core/cmd_break_watch.c ****     case exceededHardwareResourcesException:
  73              		.loc 1 121 9 view .LVU11
  74 0018 FAE7     		b	.L1
  75              	.L7:
  76 001a 00BF     		.align	2
  77              	.L6:
  78 001c 00000000 		.word	mriExceptionCode
  79 0020 04000000 		.word	.LC1
  80 0024 00000000 		.word	.LC0
  81              		.cfi_endproc
  82              	.LFE6:
  84              		.section	.text.parseBreakpointWatchpointCommandArguments,"ax",%progbits
  85              		.align	1
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
ARM GAS  /tmp/ccOh3fOC.s 			page 6


  90              	parseBreakpointWatchpointCommandArguments:
  91              	.LVL2:
  92              	.LFB4:
  84:mri/core/cmd_break_watch.c ****     Buffer*    pBuffer = GetBuffer();
  93              		.loc 1 84 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  84:mri/core/cmd_break_watch.c ****     Buffer*    pBuffer = GetBuffer();
  97              		.loc 1 84 1 is_stmt 0 view .LVU13
  98 0000 70B5     		push	{r4, r5, r6, lr}
  99              	.LCFI1:
 100              		.cfi_def_cfa_offset 16
 101              		.cfi_offset 4, -16
 102              		.cfi_offset 5, -12
 103              		.cfi_offset 6, -8
 104              		.cfi_offset 14, -4
 105 0002 0446     		mov	r4, r0
  85:mri/core/cmd_break_watch.c **** 
 106              		.loc 1 85 5 is_stmt 1 view .LVU14
  85:mri/core/cmd_break_watch.c **** 
 107              		.loc 1 85 26 is_stmt 0 view .LVU15
 108 0004 FFF7FEFF 		bl	mriCore_GetBuffer
 109              	.LVL3:
  85:mri/core/cmd_break_watch.c **** 
 110              		.loc 1 85 26 view .LVU16
 111 0008 0646     		mov	r6, r0
 112              	.LVL4:
  87:mri/core/cmd_break_watch.c ****     {
 113              		.loc 1 87 5 is_stmt 1 view .LVU17
  87:mri/core/cmd_break_watch.c ****     {
 114              		.loc 1 87 5 view .LVU18
 115              	.LBB20:
 116              	.LBI20:
  69:mri/core/try_catch.h **** }
  70:mri/core/try_catch.h **** 
  71:mri/core/try_catch.h **** static inline void setExceptionCode(int exceptionCode)
  72:mri/core/try_catch.h **** {
  73:mri/core/try_catch.h ****     mriExceptionCode = exceptionCode > mriExceptionCode ? exceptionCode : mriExceptionCode;
  74:mri/core/try_catch.h **** }
  75:mri/core/try_catch.h **** 
  76:mri/core/try_catch.h **** static inline void clearExceptionCode(void)
 117              		.loc 2 76 20 view .LVU19
 118              	.LBB21:
  77:mri/core/try_catch.h **** {
  78:mri/core/try_catch.h ****     mriExceptionCode = noException;
 119              		.loc 2 78 5 view .LVU20
 120              		.loc 2 78 22 is_stmt 0 view .LVU21
 121 000a 114D     		ldr	r5, .L12
 122 000c 0023     		movs	r3, #0
 123 000e 2B60     		str	r3, [r5]
 124              	.LBE21:
 125              	.LBE20:
  89:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 126              		.loc 1 89 9 is_stmt 1 view .LVU22
 127 0010 FFF7FEFF 		bl	mriBuffer_ReadChar
 128              	.LVL5:
ARM GAS  /tmp/ccOh3fOC.s 			page 7


  89:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 129              		.loc 1 89 9 is_stmt 0 view .LVU23
 130 0014 2072     		strb	r0, [r4, #8]
  89:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 131              		.loc 1 89 9 is_stmt 1 view .LVU24
 132 0016 2B68     		ldr	r3, [r5]
 133 0018 03B1     		cbz	r3, .L11
 134              	.L8:
  99:mri/core/cmd_break_watch.c **** 
 135              		.loc 1 99 1 is_stmt 0 view .LVU25
 136 001a 70BD     		pop	{r4, r5, r6, pc}
 137              	.LVL6:
 138              	.L11:
  89:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 139              		.loc 1 89 71 is_stmt 1 discriminator 1 view .LVU26
  90:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->address = ReadUIntegerArgument(pBuffer) );
 140              		.loc 1 90 9 discriminator 1 view .LVU27
 141 001c 2C21     		movs	r1, #44
 142 001e 3046     		mov	r0, r6
 143 0020 FFF7FEFF 		bl	mriCmd_ThrowIfNextCharIsNotEqualTo
 144              	.LVL7:
  90:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->address = ReadUIntegerArgument(pBuffer) );
 145              		.loc 1 90 9 discriminator 1 view .LVU28
 146 0024 2B68     		ldr	r3, [r5]
 147 0026 002B     		cmp	r3, #0
 148 0028 F7D1     		bne	.L8
  90:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->address = ReadUIntegerArgument(pBuffer) );
 149              		.loc 1 90 69 discriminator 1 view .LVU29
  91:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 150              		.loc 1 91 9 discriminator 1 view .LVU30
 151 002a 3046     		mov	r0, r6
 152 002c FFF7FEFF 		bl	mriCmd_ReadUIntegerArgument
 153              	.LVL8:
 154 0030 2060     		str	r0, [r4]
  91:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 155              		.loc 1 91 9 discriminator 1 view .LVU31
 156 0032 2B68     		ldr	r3, [r5]
 157 0034 002B     		cmp	r3, #0
 158 0036 F0D1     		bne	.L8
  91:mri/core/cmd_break_watch.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 159              		.loc 1 91 79 discriminator 1 view .LVU32
  92:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->kind = ReadUIntegerArgument(pBuffer) );
 160              		.loc 1 92 9 discriminator 1 view .LVU33
 161 0038 2C21     		movs	r1, #44
 162 003a 3046     		mov	r0, r6
 163 003c FFF7FEFF 		bl	mriCmd_ThrowIfNextCharIsNotEqualTo
 164              	.LVL9:
  92:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->kind = ReadUIntegerArgument(pBuffer) );
 165              		.loc 1 92 9 discriminator 1 view .LVU34
 166 0040 2B68     		ldr	r3, [r5]
 167 0042 002B     		cmp	r3, #0
 168 0044 E9D1     		bne	.L8
  92:mri/core/cmd_break_watch.c ****         __throwing_func( pArguments->kind = ReadUIntegerArgument(pBuffer) );
 169              		.loc 1 92 69 discriminator 1 view .LVU35
  93:mri/core/cmd_break_watch.c ****     }
 170              		.loc 1 93 9 discriminator 1 view .LVU36
 171 0046 3046     		mov	r0, r6
ARM GAS  /tmp/ccOh3fOC.s 			page 8


 172 0048 FFF7FEFF 		bl	mriCmd_ReadUIntegerArgument
 173              	.LVL10:
 174 004c 6060     		str	r0, [r4, #4]
  93:mri/core/cmd_break_watch.c ****     }
 175              		.loc 1 93 9 discriminator 1 view .LVU37
  93:mri/core/cmd_break_watch.c ****     }
 176              		.loc 1 93 76 discriminator 1 view .LVU38
  87:mri/core/cmd_break_watch.c ****     {
 177              		.loc 1 87 5 discriminator 1 view .LVU39
  95:mri/core/cmd_break_watch.c ****     {
 178              		.loc 1 95 5 discriminator 1 view .LVU40
 179 004e E4E7     		b	.L8
 180              	.L13:
 181              		.align	2
 182              	.L12:
 183 0050 00000000 		.word	mriExceptionCode
 184              		.cfi_endproc
 185              	.LFE4:
 187              		.section	.rodata.handleHardwareBreakpointSetCommand.str1.4,"aMS",%progbits,1
 188              		.align	2
 189              	.LC2:
 190 0000 4F4B00   		.ascii	"OK\000"
 191              		.section	.text.handleHardwareBreakpointSetCommand,"ax",%progbits
 192              		.align	1
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	handleHardwareBreakpointSetCommand:
 198              	.LVL11:
 199              	.LFB5:
 102:mri/core/cmd_break_watch.c ****     __try
 200              		.loc 1 102 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 102:mri/core/cmd_break_watch.c ****     __try
 204              		.loc 1 102 1 is_stmt 0 view .LVU42
 205 0000 10B5     		push	{r4, lr}
 206              	.LCFI2:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 4, -8
 209              		.cfi_offset 14, -4
 103:mri/core/cmd_break_watch.c ****     {
 210              		.loc 1 103 5 is_stmt 1 view .LVU43
 103:mri/core/cmd_break_watch.c ****     {
 211              		.loc 1 103 5 view .LVU44
 212              	.LBB22:
 213              	.LBI22:
  76:mri/core/try_catch.h **** {
 214              		.loc 2 76 20 view .LVU45
 215              	.LBB23:
 216              		.loc 2 78 5 view .LVU46
 217              		.loc 2 78 22 is_stmt 0 view .LVU47
 218 0002 084C     		ldr	r4, .L19
 219 0004 0023     		movs	r3, #0
 220 0006 2360     		str	r3, [r4]
 221              	.LBE23:
ARM GAS  /tmp/ccOh3fOC.s 			page 9


 222              	.LBE22:
 105:mri/core/cmd_break_watch.c ****     }
 223              		.loc 1 105 9 is_stmt 1 view .LVU48
 224 0008 4168     		ldr	r1, [r0, #4]
 225 000a 0068     		ldr	r0, [r0]
 226              	.LVL12:
 105:mri/core/cmd_break_watch.c ****     }
 227              		.loc 1 105 9 is_stmt 0 view .LVU49
 228 000c FFF7FEFF 		bl	mriPlatform_SetHardwareBreakpointOfGdbKind
 229              	.LVL13:
 103:mri/core/cmd_break_watch.c ****     {
 230              		.loc 1 103 5 is_stmt 1 view .LVU50
 107:mri/core/cmd_break_watch.c ****     {
 231              		.loc 1 107 5 view .LVU51
 232 0010 2368     		ldr	r3, [r4]
 233 0012 1BB9     		cbnz	r3, .L18
 112:mri/core/cmd_break_watch.c **** }
 234              		.loc 1 112 5 view .LVU52
 235 0014 0448     		ldr	r0, .L19+4
 236 0016 FFF7FEFF 		bl	mriCore_PrepareStringResponse
 237              	.LVL14:
 238              	.L14:
 113:mri/core/cmd_break_watch.c **** 
 239              		.loc 1 113 1 is_stmt 0 view .LVU53
 240 001a 10BD     		pop	{r4, pc}
 241              	.L18:
 109:mri/core/cmd_break_watch.c ****         return;
 242              		.loc 1 109 9 is_stmt 1 view .LVU54
 243 001c FFF7FEFF 		bl	handleBreakpointWatchpointException
 244              	.LVL15:
 110:mri/core/cmd_break_watch.c ****     }
 245              		.loc 1 110 9 view .LVU55
 246 0020 FBE7     		b	.L14
 247              	.L20:
 248 0022 00BF     		.align	2
 249              	.L19:
 250 0024 00000000 		.word	mriExceptionCode
 251 0028 00000000 		.word	.LC2
 252              		.cfi_endproc
 253              	.LFE5:
 255              		.section	.text.handleWatchpointSetCommand,"ax",%progbits
 256              		.align	1
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	handleWatchpointSetCommand:
 262              	.LVL16:
 263              	.LFB7:
 130:mri/core/cmd_break_watch.c **** 
 131:mri/core/cmd_break_watch.c **** static void handleWatchpointSetCommand(PlatformWatchpointType type, BreakpointWatchpointArguments* 
 132:mri/core/cmd_break_watch.c **** {
 264              		.loc 1 132 1 view -0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              		.loc 1 132 1 is_stmt 0 view .LVU57
 269 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccOh3fOC.s 			page 10


 270              	.LCFI3:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 4, -8
 273              		.cfi_offset 14, -4
 274 0002 0246     		mov	r2, r0
 133:mri/core/cmd_break_watch.c ****     uint32_t        address = pArguments->address;
 275              		.loc 1 133 5 is_stmt 1 view .LVU58
 276              		.loc 1 133 21 is_stmt 0 view .LVU59
 277 0004 0B68     		ldr	r3, [r1]
 278              	.LVL17:
 134:mri/core/cmd_break_watch.c ****     uint32_t        size = pArguments->kind;
 279              		.loc 1 134 5 is_stmt 1 view .LVU60
 135:mri/core/cmd_break_watch.c **** 
 136:mri/core/cmd_break_watch.c ****     __try
 280              		.loc 1 136 5 view .LVU61
 281              		.loc 1 136 5 view .LVU62
 282              	.LBB24:
 283              	.LBI24:
  76:mri/core/try_catch.h **** {
 284              		.loc 2 76 20 view .LVU63
 285              	.LBB25:
 286              		.loc 2 78 5 view .LVU64
 287              		.loc 2 78 22 is_stmt 0 view .LVU65
 288 0006 084C     		ldr	r4, .L26
 289 0008 0020     		movs	r0, #0
 290              	.LVL18:
 291              		.loc 2 78 22 view .LVU66
 292 000a 2060     		str	r0, [r4]
 293              	.LBE25:
 294              	.LBE24:
 137:mri/core/cmd_break_watch.c ****     {
 138:mri/core/cmd_break_watch.c ****         Platform_SetHardwareWatchpoint(address, size, type);
 295              		.loc 1 138 9 is_stmt 1 view .LVU67
 296 000c 4968     		ldr	r1, [r1, #4]
 297              	.LVL19:
 298              		.loc 1 138 9 is_stmt 0 view .LVU68
 299 000e 1846     		mov	r0, r3
 300 0010 FFF7FEFF 		bl	mriPlatform_SetHardwareWatchpoint
 301              	.LVL20:
 136:mri/core/cmd_break_watch.c ****     {
 302              		.loc 1 136 5 is_stmt 1 view .LVU69
 139:mri/core/cmd_break_watch.c ****     }
 140:mri/core/cmd_break_watch.c ****     __catch
 303              		.loc 1 140 5 view .LVU70
 304 0014 2368     		ldr	r3, [r4]
 305 0016 1BB9     		cbnz	r3, .L25
 141:mri/core/cmd_break_watch.c ****     {
 142:mri/core/cmd_break_watch.c ****         handleBreakpointWatchpointException();
 143:mri/core/cmd_break_watch.c ****         return;
 144:mri/core/cmd_break_watch.c ****     }
 145:mri/core/cmd_break_watch.c ****     PrepareStringResponse("OK");
 306              		.loc 1 145 5 view .LVU71
 307 0018 0448     		ldr	r0, .L26+4
 308 001a FFF7FEFF 		bl	mriCore_PrepareStringResponse
 309              	.LVL21:
 310              	.L21:
 146:mri/core/cmd_break_watch.c **** }
ARM GAS  /tmp/ccOh3fOC.s 			page 11


 311              		.loc 1 146 1 is_stmt 0 view .LVU72
 312 001e 10BD     		pop	{r4, pc}
 313              	.L25:
 142:mri/core/cmd_break_watch.c ****         return;
 314              		.loc 1 142 9 is_stmt 1 view .LVU73
 315 0020 FFF7FEFF 		bl	handleBreakpointWatchpointException
 316              	.LVL22:
 143:mri/core/cmd_break_watch.c ****     }
 317              		.loc 1 143 9 view .LVU74
 318 0024 FBE7     		b	.L21
 319              	.L27:
 320 0026 00BF     		.align	2
 321              	.L26:
 322 0028 00000000 		.word	mriExceptionCode
 323 002c 00000000 		.word	.LC2
 324              		.cfi_endproc
 325              	.LFE7:
 327              		.section	.text.handleHardwareBreakpointRemoveCommand,"ax",%progbits
 328              		.align	1
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 333              	handleHardwareBreakpointRemoveCommand:
 334              	.LVL23:
 335              	.LFB9:
 147:mri/core/cmd_break_watch.c **** 
 148:mri/core/cmd_break_watch.c **** 
 149:mri/core/cmd_break_watch.c **** static void handleHardwareBreakpointRemoveCommand(BreakpointWatchpointArguments* pArguments);
 150:mri/core/cmd_break_watch.c **** static void handleWatchpointRemoveCommand(PlatformWatchpointType type, BreakpointWatchpointArgument
 151:mri/core/cmd_break_watch.c **** /* Handle the '"z*" commands used by gdb to remove hardware breakpoints/watchpoints.
 152:mri/core/cmd_break_watch.c **** 
 153:mri/core/cmd_break_watch.c ****     Command Format:     z*,AAAAAAAA,K
 154:mri/core/cmd_break_watch.c ****     Response Format:    OK
 155:mri/core/cmd_break_watch.c ****     Where * is 1 for hardware breakpoint.
 156:mri/core/cmd_break_watch.c ****                2 for write watchpoint.
 157:mri/core/cmd_break_watch.c ****                3 for read watchpoint.
 158:mri/core/cmd_break_watch.c ****                4 for read/write watchpoint.
 159:mri/core/cmd_break_watch.c ****           AAAAAAAA is the hexadecimal representation of the address on which the breakpoint should 
 160:mri/core/cmd_break_watch.c ****           K is either 2: 16-bit Thumb instruction.
 161:mri/core/cmd_break_watch.c ****                       3: 32-bit Thumb2 instruction.
 162:mri/core/cmd_break_watch.c ****                       4: 32-bit ARM insruction.
 163:mri/core/cmd_break_watch.c ****                       value: byte size for data watchpoint.
 164:mri/core/cmd_break_watch.c **** */
 165:mri/core/cmd_break_watch.c **** uint32_t HandleBreakpointWatchpointRemoveCommand(void)
 166:mri/core/cmd_break_watch.c **** {
 167:mri/core/cmd_break_watch.c ****     BreakpointWatchpointArguments  arguments;
 168:mri/core/cmd_break_watch.c **** 
 169:mri/core/cmd_break_watch.c ****     __try
 170:mri/core/cmd_break_watch.c ****     {
 171:mri/core/cmd_break_watch.c ****         parseBreakpointWatchpointCommandArguments(&arguments);
 172:mri/core/cmd_break_watch.c ****     }
 173:mri/core/cmd_break_watch.c ****     __catch
 174:mri/core/cmd_break_watch.c ****     {
 175:mri/core/cmd_break_watch.c ****         PrepareStringResponse(MRI_ERROR_INVALID_ARGUMENT);
 176:mri/core/cmd_break_watch.c ****         return 0;
 177:mri/core/cmd_break_watch.c ****     }
 178:mri/core/cmd_break_watch.c **** 
ARM GAS  /tmp/ccOh3fOC.s 			page 12


 179:mri/core/cmd_break_watch.c ****     switch(arguments.type)
 180:mri/core/cmd_break_watch.c ****     {
 181:mri/core/cmd_break_watch.c ****     case '1':
 182:mri/core/cmd_break_watch.c ****         handleHardwareBreakpointRemoveCommand(&arguments);
 183:mri/core/cmd_break_watch.c ****         break;
 184:mri/core/cmd_break_watch.c ****     case '2':
 185:mri/core/cmd_break_watch.c ****         handleWatchpointRemoveCommand(MRI_PLATFORM_WRITE_WATCHPOINT, &arguments);
 186:mri/core/cmd_break_watch.c ****         break;
 187:mri/core/cmd_break_watch.c ****     case '3':
 188:mri/core/cmd_break_watch.c ****         handleWatchpointRemoveCommand(MRI_PLATFORM_READ_WATCHPOINT, &arguments);
 189:mri/core/cmd_break_watch.c ****         break;
 190:mri/core/cmd_break_watch.c ****     case '4':
 191:mri/core/cmd_break_watch.c ****         handleWatchpointRemoveCommand(MRI_PLATFORM_READWRITE_WATCHPOINT, &arguments);
 192:mri/core/cmd_break_watch.c ****         break;
 193:mri/core/cmd_break_watch.c ****     default:
 194:mri/core/cmd_break_watch.c ****         PrepareEmptyResponseForUnknownCommand();
 195:mri/core/cmd_break_watch.c ****         break;
 196:mri/core/cmd_break_watch.c ****     }
 197:mri/core/cmd_break_watch.c **** 
 198:mri/core/cmd_break_watch.c ****     return 0;
 199:mri/core/cmd_break_watch.c **** }
 200:mri/core/cmd_break_watch.c **** 
 201:mri/core/cmd_break_watch.c **** static void handleHardwareBreakpointRemoveCommand(BreakpointWatchpointArguments* pArguments)
 202:mri/core/cmd_break_watch.c **** {
 336              		.loc 1 202 1 view -0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		.loc 1 202 1 is_stmt 0 view .LVU76
 341 0000 10B5     		push	{r4, lr}
 342              	.LCFI4:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 4, -8
 345              		.cfi_offset 14, -4
 203:mri/core/cmd_break_watch.c ****     __try
 346              		.loc 1 203 5 is_stmt 1 view .LVU77
 347              		.loc 1 203 5 view .LVU78
 348              	.LBB26:
 349              	.LBI26:
  76:mri/core/try_catch.h **** {
 350              		.loc 2 76 20 view .LVU79
 351              	.LBB27:
 352              		.loc 2 78 5 view .LVU80
 353              		.loc 2 78 22 is_stmt 0 view .LVU81
 354 0002 084C     		ldr	r4, .L33
 355 0004 0023     		movs	r3, #0
 356 0006 2360     		str	r3, [r4]
 357              	.LBE27:
 358              	.LBE26:
 204:mri/core/cmd_break_watch.c ****     {
 205:mri/core/cmd_break_watch.c ****         Platform_ClearHardwareBreakpointOfGdbKind(pArguments->address, pArguments->kind);
 359              		.loc 1 205 9 is_stmt 1 view .LVU82
 360 0008 4168     		ldr	r1, [r0, #4]
 361 000a 0068     		ldr	r0, [r0]
 362              	.LVL24:
 363              		.loc 1 205 9 is_stmt 0 view .LVU83
 364 000c FFF7FEFF 		bl	mriPlatform_ClearHardwareBreakpointOfGdbKind
ARM GAS  /tmp/ccOh3fOC.s 			page 13


 365              	.LVL25:
 203:mri/core/cmd_break_watch.c ****     {
 366              		.loc 1 203 5 is_stmt 1 view .LVU84
 206:mri/core/cmd_break_watch.c ****     }
 207:mri/core/cmd_break_watch.c ****     __catch
 367              		.loc 1 207 5 view .LVU85
 368 0010 2368     		ldr	r3, [r4]
 369 0012 1BB9     		cbnz	r3, .L32
 208:mri/core/cmd_break_watch.c ****     {
 209:mri/core/cmd_break_watch.c ****         handleBreakpointWatchpointException();
 210:mri/core/cmd_break_watch.c ****         return;
 211:mri/core/cmd_break_watch.c ****     }
 212:mri/core/cmd_break_watch.c ****     PrepareStringResponse("OK");
 370              		.loc 1 212 5 view .LVU86
 371 0014 0448     		ldr	r0, .L33+4
 372 0016 FFF7FEFF 		bl	mriCore_PrepareStringResponse
 373              	.LVL26:
 374              	.L28:
 213:mri/core/cmd_break_watch.c **** }
 375              		.loc 1 213 1 is_stmt 0 view .LVU87
 376 001a 10BD     		pop	{r4, pc}
 377              	.L32:
 209:mri/core/cmd_break_watch.c ****         return;
 378              		.loc 1 209 9 is_stmt 1 view .LVU88
 379 001c FFF7FEFF 		bl	handleBreakpointWatchpointException
 380              	.LVL27:
 210:mri/core/cmd_break_watch.c ****     }
 381              		.loc 1 210 9 view .LVU89
 382 0020 FBE7     		b	.L28
 383              	.L34:
 384 0022 00BF     		.align	2
 385              	.L33:
 386 0024 00000000 		.word	mriExceptionCode
 387 0028 00000000 		.word	.LC2
 388              		.cfi_endproc
 389              	.LFE9:
 391              		.section	.text.handleWatchpointRemoveCommand,"ax",%progbits
 392              		.align	1
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	handleWatchpointRemoveCommand:
 398              	.LVL28:
 399              	.LFB10:
 214:mri/core/cmd_break_watch.c **** 
 215:mri/core/cmd_break_watch.c **** static void handleWatchpointRemoveCommand(PlatformWatchpointType type, BreakpointWatchpointArgument
 216:mri/core/cmd_break_watch.c **** {
 400              		.loc 1 216 1 view -0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              		.loc 1 216 1 is_stmt 0 view .LVU91
 405 0000 10B5     		push	{r4, lr}
 406              	.LCFI5:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 4, -8
 409              		.cfi_offset 14, -4
ARM GAS  /tmp/ccOh3fOC.s 			page 14


 410 0002 0246     		mov	r2, r0
 217:mri/core/cmd_break_watch.c ****     uint32_t        address = pArguments->address;
 411              		.loc 1 217 5 is_stmt 1 view .LVU92
 412              		.loc 1 217 21 is_stmt 0 view .LVU93
 413 0004 0B68     		ldr	r3, [r1]
 414              	.LVL29:
 218:mri/core/cmd_break_watch.c ****     uint32_t        size = pArguments->kind;
 415              		.loc 1 218 5 is_stmt 1 view .LVU94
 219:mri/core/cmd_break_watch.c **** 
 220:mri/core/cmd_break_watch.c ****     __try
 416              		.loc 1 220 5 view .LVU95
 417              		.loc 1 220 5 view .LVU96
 418              	.LBB28:
 419              	.LBI28:
  76:mri/core/try_catch.h **** {
 420              		.loc 2 76 20 view .LVU97
 421              	.LBB29:
 422              		.loc 2 78 5 view .LVU98
 423              		.loc 2 78 22 is_stmt 0 view .LVU99
 424 0006 084C     		ldr	r4, .L40
 425 0008 0020     		movs	r0, #0
 426              	.LVL30:
 427              		.loc 2 78 22 view .LVU100
 428 000a 2060     		str	r0, [r4]
 429              	.LBE29:
 430              	.LBE28:
 221:mri/core/cmd_break_watch.c ****     {
 222:mri/core/cmd_break_watch.c ****         Platform_ClearHardwareWatchpoint(address, size, type);
 431              		.loc 1 222 9 is_stmt 1 view .LVU101
 432 000c 4968     		ldr	r1, [r1, #4]
 433              	.LVL31:
 434              		.loc 1 222 9 is_stmt 0 view .LVU102
 435 000e 1846     		mov	r0, r3
 436 0010 FFF7FEFF 		bl	mriPlatform_ClearHardwareWatchpoint
 437              	.LVL32:
 220:mri/core/cmd_break_watch.c ****     {
 438              		.loc 1 220 5 is_stmt 1 view .LVU103
 223:mri/core/cmd_break_watch.c ****     }
 224:mri/core/cmd_break_watch.c ****     __catch
 439              		.loc 1 224 5 view .LVU104
 440 0014 2368     		ldr	r3, [r4]
 441 0016 1BB9     		cbnz	r3, .L39
 225:mri/core/cmd_break_watch.c ****     {
 226:mri/core/cmd_break_watch.c ****         handleBreakpointWatchpointException();
 227:mri/core/cmd_break_watch.c ****         return;
 228:mri/core/cmd_break_watch.c ****     }
 229:mri/core/cmd_break_watch.c ****     PrepareStringResponse("OK");
 442              		.loc 1 229 5 view .LVU105
 443 0018 0448     		ldr	r0, .L40+4
 444 001a FFF7FEFF 		bl	mriCore_PrepareStringResponse
 445              	.LVL33:
 446              	.L35:
 230:mri/core/cmd_break_watch.c **** }
 447              		.loc 1 230 1 is_stmt 0 view .LVU106
 448 001e 10BD     		pop	{r4, pc}
 449              	.L39:
 226:mri/core/cmd_break_watch.c ****         return;
ARM GAS  /tmp/ccOh3fOC.s 			page 15


 450              		.loc 1 226 9 is_stmt 1 view .LVU107
 451 0020 FFF7FEFF 		bl	handleBreakpointWatchpointException
 452              	.LVL34:
 227:mri/core/cmd_break_watch.c ****     }
 453              		.loc 1 227 9 view .LVU108
 454 0024 FBE7     		b	.L35
 455              	.L41:
 456 0026 00BF     		.align	2
 457              	.L40:
 458 0028 00000000 		.word	mriExceptionCode
 459 002c 00000000 		.word	.LC2
 460              		.cfi_endproc
 461              	.LFE10:
 463              		.section	.rodata.mriCmd_HandleBreakpointWatchpointSetCommand.str1.4,"aMS",%progbits,1
 464              		.align	2
 465              	.LC3:
 466 0000 00       		.ascii	"\000"
 467              		.section	.text.mriCmd_HandleBreakpointWatchpointSetCommand,"ax",%progbits
 468              		.align	1
 469              		.global	mriCmd_HandleBreakpointWatchpointSetCommand
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 474              	mriCmd_HandleBreakpointWatchpointSetCommand:
 475              	.LFB3:
  48:mri/core/cmd_break_watch.c ****     BreakpointWatchpointArguments  arguments;
 476              		.loc 1 48 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 16
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480 0000 10B5     		push	{r4, lr}
 481              	.LCFI6:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 4, -8
 484              		.cfi_offset 14, -4
 485 0002 84B0     		sub	sp, sp, #16
 486              	.LCFI7:
 487              		.cfi_def_cfa_offset 24
  49:mri/core/cmd_break_watch.c **** 
 488              		.loc 1 49 5 view .LVU110
  51:mri/core/cmd_break_watch.c ****     {
 489              		.loc 1 51 5 view .LVU111
  51:mri/core/cmd_break_watch.c ****     {
 490              		.loc 1 51 5 view .LVU112
 491              	.LBB30:
 492              	.LBI30:
  76:mri/core/try_catch.h **** {
 493              		.loc 2 76 20 view .LVU113
 494              	.LBB31:
 495              		.loc 2 78 5 view .LVU114
 496              		.loc 2 78 22 is_stmt 0 view .LVU115
 497 0004 164C     		ldr	r4, .L53
 498 0006 0023     		movs	r3, #0
 499 0008 2360     		str	r3, [r4]
 500              	.LBE31:
 501              	.LBE30:
  53:mri/core/cmd_break_watch.c ****     }
ARM GAS  /tmp/ccOh3fOC.s 			page 16


 502              		.loc 1 53 9 is_stmt 1 view .LVU116
 503 000a 01A8     		add	r0, sp, #4
 504 000c FFF7FEFF 		bl	parseBreakpointWatchpointCommandArguments
 505              	.LVL35:
  51:mri/core/cmd_break_watch.c ****     {
 506              		.loc 1 51 5 view .LVU117
  55:mri/core/cmd_break_watch.c ****     {
 507              		.loc 1 55 5 view .LVU118
 508 0010 2368     		ldr	r3, [r4]
 509 0012 43B9     		cbnz	r3, .L52
  61:mri/core/cmd_break_watch.c ****     {
 510              		.loc 1 61 5 view .LVU119
  61:mri/core/cmd_break_watch.c ****     {
 511              		.loc 1 61 21 is_stmt 0 view .LVU120
 512 0014 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
  61:mri/core/cmd_break_watch.c ****     {
 513              		.loc 1 61 5 view .LVU121
 514 0018 313B     		subs	r3, r3, #49
 515 001a 032B     		cmp	r3, #3
 516 001c 1CD8     		bhi	.L45
 517 001e DFE803F0 		tbb	[pc, r3]
 518              	.L47:
 519 0022 08       		.byte	(.L50-.L47)/2
 520 0023 0C       		.byte	(.L49-.L47)/2
 521 0024 11       		.byte	(.L48-.L47)/2
 522 0025 16       		.byte	(.L46-.L47)/2
 523              		.p2align 1
 524              	.L52:
  57:mri/core/cmd_break_watch.c ****         return 0;
 525              		.loc 1 57 9 is_stmt 1 view .LVU122
 526 0026 0F48     		ldr	r0, .L53+4
 527 0028 FFF7FEFF 		bl	mriCore_PrepareStringResponse
 528              	.LVL36:
  58:mri/core/cmd_break_watch.c ****     }
 529              		.loc 1 58 9 view .LVU123
 530              	.L44:
  81:mri/core/cmd_break_watch.c **** 
 531              		.loc 1 81 1 is_stmt 0 view .LVU124
 532 002c 0020     		movs	r0, #0
 533 002e 04B0     		add	sp, sp, #16
 534              	.LCFI8:
 535              		.cfi_remember_state
 536              		.cfi_def_cfa_offset 8
 537              		@ sp needed
 538 0030 10BD     		pop	{r4, pc}
 539              	.L50:
 540              	.LCFI9:
 541              		.cfi_restore_state
  64:mri/core/cmd_break_watch.c ****         break;
 542              		.loc 1 64 9 is_stmt 1 view .LVU125
 543 0032 01A8     		add	r0, sp, #4
 544 0034 FFF7FEFF 		bl	handleHardwareBreakpointSetCommand
 545              	.LVL37:
  65:mri/core/cmd_break_watch.c ****     case '2':
 546              		.loc 1 65 9 view .LVU126
 547 0038 F8E7     		b	.L44
 548              	.L49:
ARM GAS  /tmp/ccOh3fOC.s 			page 17


  67:mri/core/cmd_break_watch.c ****         break;
 549              		.loc 1 67 9 view .LVU127
 550 003a 01A9     		add	r1, sp, #4
 551 003c 0020     		movs	r0, #0
 552 003e FFF7FEFF 		bl	handleWatchpointSetCommand
 553              	.LVL38:
  68:mri/core/cmd_break_watch.c ****     case '3':
 554              		.loc 1 68 9 view .LVU128
 555 0042 F3E7     		b	.L44
 556              	.L48:
  70:mri/core/cmd_break_watch.c ****         break;
 557              		.loc 1 70 9 view .LVU129
 558 0044 01A9     		add	r1, sp, #4
 559 0046 0120     		movs	r0, #1
 560 0048 FFF7FEFF 		bl	handleWatchpointSetCommand
 561              	.LVL39:
  71:mri/core/cmd_break_watch.c ****     case '4':
 562              		.loc 1 71 9 view .LVU130
 563 004c EEE7     		b	.L44
 564              	.L46:
  73:mri/core/cmd_break_watch.c ****         break;
 565              		.loc 1 73 9 view .LVU131
 566 004e 01A9     		add	r1, sp, #4
 567 0050 0220     		movs	r0, #2
 568 0052 FFF7FEFF 		bl	handleWatchpointSetCommand
 569              	.LVL40:
  74:mri/core/cmd_break_watch.c ****     default:
 570              		.loc 1 74 9 view .LVU132
 571 0056 E9E7     		b	.L44
 572              	.L45:
  76:mri/core/cmd_break_watch.c ****         break;
 573              		.loc 1 76 9 view .LVU133
 574 0058 0348     		ldr	r0, .L53+8
 575 005a FFF7FEFF 		bl	mriCore_PrepareStringResponse
 576              	.LVL41:
  77:mri/core/cmd_break_watch.c ****     }
 577              		.loc 1 77 9 view .LVU134
 578 005e E5E7     		b	.L44
 579              	.L54:
 580              		.align	2
 581              	.L53:
 582 0060 00000000 		.word	mriExceptionCode
 583 0064 00000000 		.word	.LC0
 584 0068 00000000 		.word	.LC3
 585              		.cfi_endproc
 586              	.LFE3:
 588              		.section	.text.mriCmd_HandleBreakpointWatchpointRemoveCommand,"ax",%progbits
 589              		.align	1
 590              		.global	mriCmd_HandleBreakpointWatchpointRemoveCommand
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 595              	mriCmd_HandleBreakpointWatchpointRemoveCommand:
 596              	.LFB8:
 166:mri/core/cmd_break_watch.c ****     BreakpointWatchpointArguments  arguments;
 597              		.loc 1 166 1 view -0
 598              		.cfi_startproc
ARM GAS  /tmp/ccOh3fOC.s 			page 18


 599              		@ args = 0, pretend = 0, frame = 16
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601 0000 10B5     		push	{r4, lr}
 602              	.LCFI10:
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 4, -8
 605              		.cfi_offset 14, -4
 606 0002 84B0     		sub	sp, sp, #16
 607              	.LCFI11:
 608              		.cfi_def_cfa_offset 24
 167:mri/core/cmd_break_watch.c **** 
 609              		.loc 1 167 5 view .LVU136
 169:mri/core/cmd_break_watch.c ****     {
 610              		.loc 1 169 5 view .LVU137
 169:mri/core/cmd_break_watch.c ****     {
 611              		.loc 1 169 5 view .LVU138
 612              	.LBB32:
 613              	.LBI32:
  76:mri/core/try_catch.h **** {
 614              		.loc 2 76 20 view .LVU139
 615              	.LBB33:
 616              		.loc 2 78 5 view .LVU140
 617              		.loc 2 78 22 is_stmt 0 view .LVU141
 618 0004 164C     		ldr	r4, .L66
 619 0006 0023     		movs	r3, #0
 620 0008 2360     		str	r3, [r4]
 621              	.LBE33:
 622              	.LBE32:
 171:mri/core/cmd_break_watch.c ****     }
 623              		.loc 1 171 9 is_stmt 1 view .LVU142
 624 000a 01A8     		add	r0, sp, #4
 625 000c FFF7FEFF 		bl	parseBreakpointWatchpointCommandArguments
 626              	.LVL42:
 169:mri/core/cmd_break_watch.c ****     {
 627              		.loc 1 169 5 view .LVU143
 173:mri/core/cmd_break_watch.c ****     {
 628              		.loc 1 173 5 view .LVU144
 629 0010 2368     		ldr	r3, [r4]
 630 0012 43B9     		cbnz	r3, .L65
 179:mri/core/cmd_break_watch.c ****     {
 631              		.loc 1 179 5 view .LVU145
 179:mri/core/cmd_break_watch.c ****     {
 632              		.loc 1 179 21 is_stmt 0 view .LVU146
 633 0014 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 179:mri/core/cmd_break_watch.c ****     {
 634              		.loc 1 179 5 view .LVU147
 635 0018 313B     		subs	r3, r3, #49
 636 001a 032B     		cmp	r3, #3
 637 001c 1CD8     		bhi	.L58
 638 001e DFE803F0 		tbb	[pc, r3]
 639              	.L60:
 640 0022 08       		.byte	(.L63-.L60)/2
 641 0023 0C       		.byte	(.L62-.L60)/2
 642 0024 11       		.byte	(.L61-.L60)/2
 643 0025 16       		.byte	(.L59-.L60)/2
 644              		.p2align 1
 645              	.L65:
ARM GAS  /tmp/ccOh3fOC.s 			page 19


 175:mri/core/cmd_break_watch.c ****         return 0;
 646              		.loc 1 175 9 is_stmt 1 view .LVU148
 647 0026 0F48     		ldr	r0, .L66+4
 648 0028 FFF7FEFF 		bl	mriCore_PrepareStringResponse
 649              	.LVL43:
 176:mri/core/cmd_break_watch.c ****     }
 650              		.loc 1 176 9 view .LVU149
 651              	.L57:
 199:mri/core/cmd_break_watch.c **** 
 652              		.loc 1 199 1 is_stmt 0 view .LVU150
 653 002c 0020     		movs	r0, #0
 654 002e 04B0     		add	sp, sp, #16
 655              	.LCFI12:
 656              		.cfi_remember_state
 657              		.cfi_def_cfa_offset 8
 658              		@ sp needed
 659 0030 10BD     		pop	{r4, pc}
 660              	.L63:
 661              	.LCFI13:
 662              		.cfi_restore_state
 182:mri/core/cmd_break_watch.c ****         break;
 663              		.loc 1 182 9 is_stmt 1 view .LVU151
 664 0032 01A8     		add	r0, sp, #4
 665 0034 FFF7FEFF 		bl	handleHardwareBreakpointRemoveCommand
 666              	.LVL44:
 183:mri/core/cmd_break_watch.c ****     case '2':
 667              		.loc 1 183 9 view .LVU152
 668 0038 F8E7     		b	.L57
 669              	.L62:
 185:mri/core/cmd_break_watch.c ****         break;
 670              		.loc 1 185 9 view .LVU153
 671 003a 01A9     		add	r1, sp, #4
 672 003c 0020     		movs	r0, #0
 673 003e FFF7FEFF 		bl	handleWatchpointRemoveCommand
 674              	.LVL45:
 186:mri/core/cmd_break_watch.c ****     case '3':
 675              		.loc 1 186 9 view .LVU154
 676 0042 F3E7     		b	.L57
 677              	.L61:
 188:mri/core/cmd_break_watch.c ****         break;
 678              		.loc 1 188 9 view .LVU155
 679 0044 01A9     		add	r1, sp, #4
 680 0046 0120     		movs	r0, #1
 681 0048 FFF7FEFF 		bl	handleWatchpointRemoveCommand
 682              	.LVL46:
 189:mri/core/cmd_break_watch.c ****     case '4':
 683              		.loc 1 189 9 view .LVU156
 684 004c EEE7     		b	.L57
 685              	.L59:
 191:mri/core/cmd_break_watch.c ****         break;
 686              		.loc 1 191 9 view .LVU157
 687 004e 01A9     		add	r1, sp, #4
 688 0050 0220     		movs	r0, #2
 689 0052 FFF7FEFF 		bl	handleWatchpointRemoveCommand
 690              	.LVL47:
 192:mri/core/cmd_break_watch.c ****     default:
 691              		.loc 1 192 9 view .LVU158
ARM GAS  /tmp/ccOh3fOC.s 			page 20


 692 0056 E9E7     		b	.L57
 693              	.L58:
 194:mri/core/cmd_break_watch.c ****         break;
 694              		.loc 1 194 9 view .LVU159
 695 0058 0348     		ldr	r0, .L66+8
 696 005a FFF7FEFF 		bl	mriCore_PrepareStringResponse
 697              	.LVL48:
 195:mri/core/cmd_break_watch.c ****     }
 698              		.loc 1 195 9 view .LVU160
 699 005e E5E7     		b	.L57
 700              	.L67:
 701              		.align	2
 702              	.L66:
 703 0060 00000000 		.word	mriExceptionCode
 704 0064 00000000 		.word	.LC0
 705 0068 00000000 		.word	.LC3
 706              		.cfi_endproc
 707              	.LFE8:
 709              		.text
 710              	.Letext0:
 711              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 712              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 713              		.file 5 "mri/core/buffer.h"
 714              		.file 6 "mri/core/platforms.h"
 715              		.file 7 "mri/core/cmd_common.h"
 716              		.file 8 "mri/core/core.h"
ARM GAS  /tmp/ccOh3fOC.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 cmd_break_watch.c
     /tmp/ccOh3fOC.s:21     .rodata.handleBreakpointWatchpointException.str1.4:0000000000000000 $d
     /tmp/ccOh3fOC.s:28     .text.handleBreakpointWatchpointException:0000000000000000 $t
     /tmp/ccOh3fOC.s:33     .text.handleBreakpointWatchpointException:0000000000000000 handleBreakpointWatchpointException
     /tmp/ccOh3fOC.s:78     .text.handleBreakpointWatchpointException:000000000000001c $d
     /tmp/ccOh3fOC.s:85     .text.parseBreakpointWatchpointCommandArguments:0000000000000000 $t
     /tmp/ccOh3fOC.s:90     .text.parseBreakpointWatchpointCommandArguments:0000000000000000 parseBreakpointWatchpointCommandArguments
     /tmp/ccOh3fOC.s:183    .text.parseBreakpointWatchpointCommandArguments:0000000000000050 $d
     /tmp/ccOh3fOC.s:188    .rodata.handleHardwareBreakpointSetCommand.str1.4:0000000000000000 $d
     /tmp/ccOh3fOC.s:192    .text.handleHardwareBreakpointSetCommand:0000000000000000 $t
     /tmp/ccOh3fOC.s:197    .text.handleHardwareBreakpointSetCommand:0000000000000000 handleHardwareBreakpointSetCommand
     /tmp/ccOh3fOC.s:250    .text.handleHardwareBreakpointSetCommand:0000000000000024 $d
     /tmp/ccOh3fOC.s:256    .text.handleWatchpointSetCommand:0000000000000000 $t
     /tmp/ccOh3fOC.s:261    .text.handleWatchpointSetCommand:0000000000000000 handleWatchpointSetCommand
     /tmp/ccOh3fOC.s:322    .text.handleWatchpointSetCommand:0000000000000028 $d
     /tmp/ccOh3fOC.s:328    .text.handleHardwareBreakpointRemoveCommand:0000000000000000 $t
     /tmp/ccOh3fOC.s:333    .text.handleHardwareBreakpointRemoveCommand:0000000000000000 handleHardwareBreakpointRemoveCommand
     /tmp/ccOh3fOC.s:386    .text.handleHardwareBreakpointRemoveCommand:0000000000000024 $d
     /tmp/ccOh3fOC.s:392    .text.handleWatchpointRemoveCommand:0000000000000000 $t
     /tmp/ccOh3fOC.s:397    .text.handleWatchpointRemoveCommand:0000000000000000 handleWatchpointRemoveCommand
     /tmp/ccOh3fOC.s:458    .text.handleWatchpointRemoveCommand:0000000000000028 $d
     /tmp/ccOh3fOC.s:464    .rodata.mriCmd_HandleBreakpointWatchpointSetCommand.str1.4:0000000000000000 $d
     /tmp/ccOh3fOC.s:468    .text.mriCmd_HandleBreakpointWatchpointSetCommand:0000000000000000 $t
     /tmp/ccOh3fOC.s:474    .text.mriCmd_HandleBreakpointWatchpointSetCommand:0000000000000000 mriCmd_HandleBreakpointWatchpointSetCommand
     /tmp/ccOh3fOC.s:519    .text.mriCmd_HandleBreakpointWatchpointSetCommand:0000000000000022 $d
     /tmp/ccOh3fOC.s:523    .text.mriCmd_HandleBreakpointWatchpointSetCommand:0000000000000026 $t
     /tmp/ccOh3fOC.s:582    .text.mriCmd_HandleBreakpointWatchpointSetCommand:0000000000000060 $d
     /tmp/ccOh3fOC.s:589    .text.mriCmd_HandleBreakpointWatchpointRemoveCommand:0000000000000000 $t
     /tmp/ccOh3fOC.s:595    .text.mriCmd_HandleBreakpointWatchpointRemoveCommand:0000000000000000 mriCmd_HandleBreakpointWatchpointRemoveCommand
     /tmp/ccOh3fOC.s:640    .text.mriCmd_HandleBreakpointWatchpointRemoveCommand:0000000000000022 $d
     /tmp/ccOh3fOC.s:644    .text.mriCmd_HandleBreakpointWatchpointRemoveCommand:0000000000000026 $t
     /tmp/ccOh3fOC.s:703    .text.mriCmd_HandleBreakpointWatchpointRemoveCommand:0000000000000060 $d

UNDEFINED SYMBOLS
mriCore_PrepareStringResponse
mriExceptionCode
mriCore_GetBuffer
mriBuffer_ReadChar
mriCmd_ThrowIfNextCharIsNotEqualTo
mriCmd_ReadUIntegerArgument
mriPlatform_SetHardwareBreakpointOfGdbKind
mriPlatform_SetHardwareWatchpoint
mriPlatform_ClearHardwareBreakpointOfGdbKind
mriPlatform_ClearHardwareWatchpoint
