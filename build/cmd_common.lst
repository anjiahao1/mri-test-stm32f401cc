ARM GAS  /tmp/ccBjSt3D.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"cmd_common.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "mri/core/cmd_common.c"
  20              		.section	.text.mriCmd_ReadUIntegerArgument,"ax",%progbits
  21              		.align	1
  22              		.global	mriCmd_ReadUIntegerArgument
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	mriCmd_ReadUIntegerArgument:
  28              	.LVL0:
  29              	.LFB5:
   1:mri/core/cmd_common.c **** /* Copyright 2012 Adam Green (https://github.com/adamgreen/)
   2:mri/core/cmd_common.c **** 
   3:mri/core/cmd_common.c ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/cmd_common.c ****    you may not use this file except in compliance with the License.
   5:mri/core/cmd_common.c ****    You may obtain a copy of the License at
   6:mri/core/cmd_common.c **** 
   7:mri/core/cmd_common.c ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/cmd_common.c **** 
   9:mri/core/cmd_common.c ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/cmd_common.c ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/cmd_common.c ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/cmd_common.c ****    See the License for the specific language governing permissions and
  13:mri/core/cmd_common.c ****    limitations under the License.
  14:mri/core/cmd_common.c **** */
  15:mri/core/cmd_common.c **** /* Common functionality shared between gdb command handlers in mri. */
  16:mri/core/cmd_common.c **** #include <core/cmd_common.h>
  17:mri/core/cmd_common.c **** 
  18:mri/core/cmd_common.c **** 
  19:mri/core/cmd_common.c **** void ReadAddressAndLengthArguments(Buffer* pBuffer, AddressLength* pArguments)
  20:mri/core/cmd_common.c **** {
  21:mri/core/cmd_common.c ****     __try
  22:mri/core/cmd_common.c ****     {
  23:mri/core/cmd_common.c ****         __throwing_func( pArguments->address = ReadUIntegerArgument(pBuffer) );
  24:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
  25:mri/core/cmd_common.c ****         __throwing_func( pArguments->length = ReadUIntegerArgument(pBuffer) );
  26:mri/core/cmd_common.c ****     }
  27:mri/core/cmd_common.c ****     __catch
  28:mri/core/cmd_common.c ****     {
  29:mri/core/cmd_common.c ****         __rethrow;
ARM GAS  /tmp/ccBjSt3D.s 			page 2


  30:mri/core/cmd_common.c ****     }
  31:mri/core/cmd_common.c **** }
  32:mri/core/cmd_common.c **** 
  33:mri/core/cmd_common.c **** 
  34:mri/core/cmd_common.c **** void ReadAddressAndLengthArgumentsWithColon(Buffer* pBuffer, AddressLength* pArguments)
  35:mri/core/cmd_common.c **** {
  36:mri/core/cmd_common.c ****     __try
  37:mri/core/cmd_common.c ****     {
  38:mri/core/cmd_common.c ****         __throwing_func( ReadAddressAndLengthArguments(pBuffer, pArguments) );
  39:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ':') );
  40:mri/core/cmd_common.c ****     }
  41:mri/core/cmd_common.c ****     __catch
  42:mri/core/cmd_common.c ****     {
  43:mri/core/cmd_common.c ****         __rethrow;
  44:mri/core/cmd_common.c ****     }
  45:mri/core/cmd_common.c **** }
  46:mri/core/cmd_common.c **** 
  47:mri/core/cmd_common.c **** 
  48:mri/core/cmd_common.c **** uint32_t ReadUIntegerArgument(Buffer* pBuffer)
  49:mri/core/cmd_common.c **** {
  30              		.loc 1 49 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 49 1 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  50:mri/core/cmd_common.c ****     uint32_t value;
  40              		.loc 1 50 5 is_stmt 1 view .LVU2
  51:mri/core/cmd_common.c **** 
  52:mri/core/cmd_common.c ****     __try
  41              		.loc 1 52 5 view .LVU3
  42              		.loc 1 52 5 view .LVU4
  43              	.LBB10:
  44              	.LBI10:
  45              		.file 2 "mri/core/try_catch.h"
   1:mri/core/try_catch.h **** /* Copyright 2014 Adam Green (https://github.com/adamgreen/)
   2:mri/core/try_catch.h **** 
   3:mri/core/try_catch.h ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/try_catch.h ****    you may not use this file except in compliance with the License.
   5:mri/core/try_catch.h ****    You may obtain a copy of the License at
   6:mri/core/try_catch.h **** 
   7:mri/core/try_catch.h ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/try_catch.h **** 
   9:mri/core/try_catch.h ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/try_catch.h ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/try_catch.h ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/try_catch.h ****    See the License for the specific language governing permissions and
  13:mri/core/try_catch.h ****    limitations under the License.
  14:mri/core/try_catch.h **** */
  15:mri/core/try_catch.h **** /* Very rough exception handling like macros for C. */
  16:mri/core/try_catch.h **** #ifndef MRI_TRY_CATCH_H_
  17:mri/core/try_catch.h **** #define MRI_TRY_CATCH_H_
  18:mri/core/try_catch.h **** 
ARM GAS  /tmp/ccBjSt3D.s 			page 3


  19:mri/core/try_catch.h **** #define noException                         0
  20:mri/core/try_catch.h **** #define bufferOverrunException              1
  21:mri/core/try_catch.h **** #define invalidHexDigitException            2
  22:mri/core/try_catch.h **** #define invalidValueException               3
  23:mri/core/try_catch.h **** #define invalidArgumentException            4
  24:mri/core/try_catch.h **** #define timeoutException                    5
  25:mri/core/try_catch.h **** #define invalidIndexException               6
  26:mri/core/try_catch.h **** #define notFoundException                   7
  27:mri/core/try_catch.h **** #define exceededHardwareResourcesException  8
  28:mri/core/try_catch.h **** #define invalidDecDigitException            9
  29:mri/core/try_catch.h **** #define memFaultException                   10
  30:mri/core/try_catch.h **** #define mriMaxException                     15
  31:mri/core/try_catch.h **** 
  32:mri/core/try_catch.h **** extern int mriExceptionCode;
  33:mri/core/try_catch.h **** 
  34:mri/core/try_catch.h **** 
  35:mri/core/try_catch.h **** /* Allow an application including MRI to extend with their own exception codes and replace the belo
  36:mri/core/try_catch.h **** #ifndef MRI_SKIP_TRY_CATCH_MACRO_DEFINES
  37:mri/core/try_catch.h **** 
  38:mri/core/try_catch.h **** /* On Linux, it is possible that __try and __catch are already defined. */
  39:mri/core/try_catch.h **** #undef __try
  40:mri/core/try_catch.h **** #undef __catch
  41:mri/core/try_catch.h **** 
  42:mri/core/try_catch.h **** #define __throws
  43:mri/core/try_catch.h **** 
  44:mri/core/try_catch.h **** #define __try \
  45:mri/core/try_catch.h ****         do \
  46:mri/core/try_catch.h ****         { \
  47:mri/core/try_catch.h ****             clearExceptionCode();
  48:mri/core/try_catch.h **** 
  49:mri/core/try_catch.h **** #define __throwing_func(X) \
  50:mri/core/try_catch.h ****             X; \
  51:mri/core/try_catch.h ****             if (mriExceptionCode) \
  52:mri/core/try_catch.h ****                 break;
  53:mri/core/try_catch.h **** 
  54:mri/core/try_catch.h **** #define __catch \
  55:mri/core/try_catch.h ****         } while (0); \
  56:mri/core/try_catch.h ****         if (mriExceptionCode)
  57:mri/core/try_catch.h **** 
  58:mri/core/try_catch.h **** #define __throw(EXCEPTION) return ((void)setExceptionCode(EXCEPTION))
  59:mri/core/try_catch.h **** 
  60:mri/core/try_catch.h **** #define __throw_and_return(EXCEPTION, RETURN) return (setExceptionCode(EXCEPTION), (RETURN))
  61:mri/core/try_catch.h **** 
  62:mri/core/try_catch.h **** #define __rethrow return
  63:mri/core/try_catch.h **** 
  64:mri/core/try_catch.h **** #define __rethrow_and_return(RETURN) return RETURN
  65:mri/core/try_catch.h **** 
  66:mri/core/try_catch.h **** static inline int getExceptionCode(void)
  67:mri/core/try_catch.h **** {
  68:mri/core/try_catch.h ****     return mriExceptionCode;
  69:mri/core/try_catch.h **** }
  70:mri/core/try_catch.h **** 
  71:mri/core/try_catch.h **** static inline void setExceptionCode(int exceptionCode)
  72:mri/core/try_catch.h **** {
  73:mri/core/try_catch.h ****     mriExceptionCode = exceptionCode > mriExceptionCode ? exceptionCode : mriExceptionCode;
  74:mri/core/try_catch.h **** }
  75:mri/core/try_catch.h **** 
ARM GAS  /tmp/ccBjSt3D.s 			page 4


  76:mri/core/try_catch.h **** static inline void clearExceptionCode(void)
  46              		.loc 2 76 20 view .LVU5
  47              	.LBB11:
  77:mri/core/try_catch.h **** {
  78:mri/core/try_catch.h ****     mriExceptionCode = noException;
  48              		.loc 2 78 5 view .LVU6
  49              		.loc 2 78 22 is_stmt 0 view .LVU7
  50 0002 054C     		ldr	r4, .L6
  51 0004 0023     		movs	r3, #0
  52 0006 2360     		str	r3, [r4]
  53              	.LBE11:
  54              	.LBE10:
  53:mri/core/cmd_common.c ****         value = Buffer_ReadUIntegerAsHex(pBuffer);
  55              		.loc 1 53 9 is_stmt 1 view .LVU8
  56              		.loc 1 53 17 is_stmt 0 view .LVU9
  57 0008 FFF7FEFF 		bl	mriBuffer_ReadUIntegerAsHex
  58              	.LVL1:
  52:mri/core/cmd_common.c ****         value = Buffer_ReadUIntegerAsHex(pBuffer);
  59              		.loc 1 52 5 is_stmt 1 view .LVU10
  54:mri/core/cmd_common.c ****     __catch
  60              		.loc 1 54 5 view .LVU11
  61 000c 2368     		ldr	r3, [r4]
  62 000e 03B9     		cbnz	r3, .L5
  63              	.LVL2:
  64              	.L1:
  55:mri/core/cmd_common.c ****         __rethrow_and_return(0);
  56:mri/core/cmd_common.c **** 
  57:mri/core/cmd_common.c ****     return value;
  58:mri/core/cmd_common.c **** }
  65              		.loc 1 58 1 is_stmt 0 view .LVU12
  66 0010 10BD     		pop	{r4, pc}
  67              	.LVL3:
  68              	.L5:
  55:mri/core/cmd_common.c ****         __rethrow_and_return(0);
  69              		.loc 1 55 9 view .LVU13
  70 0012 0020     		movs	r0, #0
  71              	.LVL4:
  55:mri/core/cmd_common.c ****         __rethrow_and_return(0);
  72              		.loc 1 55 9 view .LVU14
  73 0014 FCE7     		b	.L1
  74              	.L7:
  75 0016 00BF     		.align	2
  76              	.L6:
  77 0018 00000000 		.word	mriExceptionCode
  78              		.cfi_endproc
  79              	.LFE5:
  81              		.section	.text.mriCmd_ThrowIfNextCharIsNotEqualTo,"ax",%progbits
  82              		.align	1
  83              		.global	mriCmd_ThrowIfNextCharIsNotEqualTo
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  88              	mriCmd_ThrowIfNextCharIsNotEqualTo:
  89              	.LVL5:
  90              	.LFB6:
  59:mri/core/cmd_common.c **** 
  60:mri/core/cmd_common.c **** 
ARM GAS  /tmp/ccBjSt3D.s 			page 5


  61:mri/core/cmd_common.c **** void ThrowIfNextCharIsNotEqualTo(Buffer* pBuffer, char thisChar)
  62:mri/core/cmd_common.c **** {
  91              		.loc 1 62 1 is_stmt 1 view -0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		.loc 1 62 1 is_stmt 0 view .LVU16
  96 0000 08B5     		push	{r3, lr}
  97              	.LCFI1:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 3, -8
 100              		.cfi_offset 14, -4
  63:mri/core/cmd_common.c ****     if (!Buffer_IsNextCharEqualTo(pBuffer, thisChar))
 101              		.loc 1 63 5 is_stmt 1 view .LVU17
 102              		.loc 1 63 10 is_stmt 0 view .LVU18
 103 0002 FFF7FEFF 		bl	mriBuffer_IsNextCharEqualTo
 104              	.LVL6:
 105              		.loc 1 63 8 view .LVU19
 106 0006 00B1     		cbz	r0, .L11
 107              	.L8:
  64:mri/core/cmd_common.c ****         __throw(invalidArgumentException);
  65:mri/core/cmd_common.c **** }
 108              		.loc 1 65 1 view .LVU20
 109 0008 08BD     		pop	{r3, pc}
 110              	.L11:
  64:mri/core/cmd_common.c ****         __throw(invalidArgumentException);
 111              		.loc 1 64 9 is_stmt 1 view .LVU21
 112              	.LVL7:
 113              	.LBB12:
 114              	.LBI12:
  71:mri/core/try_catch.h **** {
 115              		.loc 2 71 20 view .LVU22
 116              	.LBB13:
  73:mri/core/try_catch.h **** }
 117              		.loc 2 73 5 view .LVU23
  73:mri/core/try_catch.h **** }
 118              		.loc 2 73 73 is_stmt 0 view .LVU24
 119 000a 034A     		ldr	r2, .L12
 120 000c 1368     		ldr	r3, [r2]
 121 000e 042B     		cmp	r3, #4
 122 0010 B8BF     		it	lt
 123 0012 0423     		movlt	r3, #4
  73:mri/core/try_catch.h **** }
 124              		.loc 2 73 22 view .LVU25
 125 0014 1360     		str	r3, [r2]
 126              	.LVL8:
  73:mri/core/try_catch.h **** }
 127              		.loc 2 73 22 view .LVU26
 128              	.LBE13:
 129              	.LBE12:
  64:mri/core/cmd_common.c ****         __throw(invalidArgumentException);
 130              		.loc 1 64 9 view .LVU27
 131 0016 F7E7     		b	.L8
 132              	.L13:
 133              		.align	2
 134              	.L12:
 135 0018 00000000 		.word	mriExceptionCode
ARM GAS  /tmp/ccBjSt3D.s 			page 6


 136              		.cfi_endproc
 137              	.LFE6:
 139              		.section	.text.mriCmd_ReadAddressAndLengthArguments,"ax",%progbits
 140              		.align	1
 141              		.global	mriCmd_ReadAddressAndLengthArguments
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	mriCmd_ReadAddressAndLengthArguments:
 147              	.LVL9:
 148              	.LFB3:
  20:mri/core/cmd_common.c ****     __try
 149              		.loc 1 20 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
  20:mri/core/cmd_common.c ****     __try
 153              		.loc 1 20 1 is_stmt 0 view .LVU29
 154 0000 70B5     		push	{r4, r5, r6, lr}
 155              	.LCFI2:
 156              		.cfi_def_cfa_offset 16
 157              		.cfi_offset 4, -16
 158              		.cfi_offset 5, -12
 159              		.cfi_offset 6, -8
 160              		.cfi_offset 14, -4
 161 0002 0646     		mov	r6, r0
 162 0004 0C46     		mov	r4, r1
  21:mri/core/cmd_common.c ****     {
 163              		.loc 1 21 5 is_stmt 1 view .LVU30
  21:mri/core/cmd_common.c ****     {
 164              		.loc 1 21 5 view .LVU31
 165              	.LBB14:
 166              	.LBI14:
  76:mri/core/try_catch.h **** {
 167              		.loc 2 76 20 view .LVU32
 168              	.LBB15:
 169              		.loc 2 78 5 view .LVU33
 170              		.loc 2 78 22 is_stmt 0 view .LVU34
 171 0006 0A4D     		ldr	r5, .L18
 172 0008 0023     		movs	r3, #0
 173 000a 2B60     		str	r3, [r5]
 174              	.LBE15:
 175              	.LBE14:
  23:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 176              		.loc 1 23 9 is_stmt 1 view .LVU35
 177 000c FFF7FEFF 		bl	mriCmd_ReadUIntegerArgument
 178              	.LVL10:
  23:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 179              		.loc 1 23 9 is_stmt 0 view .LVU36
 180 0010 2060     		str	r0, [r4]
  23:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 181              		.loc 1 23 9 is_stmt 1 view .LVU37
 182 0012 2B68     		ldr	r3, [r5]
 183 0014 03B1     		cbz	r3, .L17
 184              	.L14:
  31:mri/core/cmd_common.c **** 
 185              		.loc 1 31 1 is_stmt 0 view .LVU38
ARM GAS  /tmp/ccBjSt3D.s 			page 7


 186 0016 70BD     		pop	{r4, r5, r6, pc}
 187              	.LVL11:
 188              	.L17:
  23:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ',') );
 189              		.loc 1 23 79 is_stmt 1 discriminator 1 view .LVU39
  24:mri/core/cmd_common.c ****         __throwing_func( pArguments->length = ReadUIntegerArgument(pBuffer) );
 190              		.loc 1 24 9 discriminator 1 view .LVU40
 191 0018 2C21     		movs	r1, #44
 192 001a 3046     		mov	r0, r6
 193 001c FFF7FEFF 		bl	mriCmd_ThrowIfNextCharIsNotEqualTo
 194              	.LVL12:
  24:mri/core/cmd_common.c ****         __throwing_func( pArguments->length = ReadUIntegerArgument(pBuffer) );
 195              		.loc 1 24 9 discriminator 1 view .LVU41
 196 0020 2B68     		ldr	r3, [r5]
 197 0022 002B     		cmp	r3, #0
 198 0024 F7D1     		bne	.L14
  24:mri/core/cmd_common.c ****         __throwing_func( pArguments->length = ReadUIntegerArgument(pBuffer) );
 199              		.loc 1 24 69 discriminator 1 view .LVU42
  25:mri/core/cmd_common.c ****     }
 200              		.loc 1 25 9 discriminator 1 view .LVU43
 201 0026 3046     		mov	r0, r6
 202 0028 FFF7FEFF 		bl	mriCmd_ReadUIntegerArgument
 203              	.LVL13:
 204 002c 6060     		str	r0, [r4, #4]
  25:mri/core/cmd_common.c ****     }
 205              		.loc 1 25 9 discriminator 1 view .LVU44
  25:mri/core/cmd_common.c ****     }
 206              		.loc 1 25 78 discriminator 1 view .LVU45
  21:mri/core/cmd_common.c ****     {
 207              		.loc 1 21 5 discriminator 1 view .LVU46
  27:mri/core/cmd_common.c ****     {
 208              		.loc 1 27 5 discriminator 1 view .LVU47
 209 002e F2E7     		b	.L14
 210              	.L19:
 211              		.align	2
 212              	.L18:
 213 0030 00000000 		.word	mriExceptionCode
 214              		.cfi_endproc
 215              	.LFE3:
 217              		.section	.text.mriCmd_ReadAddressAndLengthArgumentsWithColon,"ax",%progbits
 218              		.align	1
 219              		.global	mriCmd_ReadAddressAndLengthArgumentsWithColon
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 224              	mriCmd_ReadAddressAndLengthArgumentsWithColon:
 225              	.LVL14:
 226              	.LFB4:
  35:mri/core/cmd_common.c ****     __try
 227              		.loc 1 35 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
  35:mri/core/cmd_common.c ****     __try
 231              		.loc 1 35 1 is_stmt 0 view .LVU49
 232 0000 38B5     		push	{r3, r4, r5, lr}
 233              	.LCFI3:
ARM GAS  /tmp/ccBjSt3D.s 			page 8


 234              		.cfi_def_cfa_offset 16
 235              		.cfi_offset 3, -16
 236              		.cfi_offset 4, -12
 237              		.cfi_offset 5, -8
 238              		.cfi_offset 14, -4
 239 0002 0446     		mov	r4, r0
  36:mri/core/cmd_common.c ****     {
 240              		.loc 1 36 5 is_stmt 1 view .LVU50
  36:mri/core/cmd_common.c ****     {
 241              		.loc 1 36 5 view .LVU51
 242              	.LBB16:
 243              	.LBI16:
  76:mri/core/try_catch.h **** {
 244              		.loc 2 76 20 view .LVU52
 245              	.LBB17:
 246              		.loc 2 78 5 view .LVU53
 247              		.loc 2 78 22 is_stmt 0 view .LVU54
 248 0004 064D     		ldr	r5, .L24
 249 0006 0023     		movs	r3, #0
 250 0008 2B60     		str	r3, [r5]
 251              	.LBE17:
 252              	.LBE16:
  38:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ':') );
 253              		.loc 1 38 9 is_stmt 1 view .LVU55
 254 000a FFF7FEFF 		bl	mriCmd_ReadAddressAndLengthArguments
 255              	.LVL15:
  38:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ':') );
 256              		.loc 1 38 9 view .LVU56
 257 000e 2B68     		ldr	r3, [r5]
 258 0010 03B1     		cbz	r3, .L23
 259              	.L20:
  45:mri/core/cmd_common.c **** 
 260              		.loc 1 45 1 is_stmt 0 view .LVU57
 261 0012 38BD     		pop	{r3, r4, r5, pc}
 262              	.LVL16:
 263              	.L23:
  38:mri/core/cmd_common.c ****         __throwing_func( ThrowIfNextCharIsNotEqualTo(pBuffer, ':') );
 264              		.loc 1 38 78 is_stmt 1 discriminator 1 view .LVU58
  39:mri/core/cmd_common.c ****     }
 265              		.loc 1 39 9 discriminator 1 view .LVU59
 266 0014 3A21     		movs	r1, #58
 267 0016 2046     		mov	r0, r4
 268 0018 FFF7FEFF 		bl	mriCmd_ThrowIfNextCharIsNotEqualTo
 269              	.LVL17:
  39:mri/core/cmd_common.c ****     }
 270              		.loc 1 39 9 discriminator 1 view .LVU60
  39:mri/core/cmd_common.c ****     }
 271              		.loc 1 39 69 discriminator 1 view .LVU61
  36:mri/core/cmd_common.c ****     {
 272              		.loc 1 36 5 discriminator 1 view .LVU62
  41:mri/core/cmd_common.c ****     {
 273              		.loc 1 41 5 discriminator 1 view .LVU63
 274 001c F9E7     		b	.L20
 275              	.L25:
 276 001e 00BF     		.align	2
 277              	.L24:
 278 0020 00000000 		.word	mriExceptionCode
ARM GAS  /tmp/ccBjSt3D.s 			page 9


 279              		.cfi_endproc
 280              	.LFE4:
 282              		.text
 283              	.Letext0:
 284              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 285              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 286              		.file 5 "mri/core/buffer.h"
 287              		.file 6 "mri/core/cmd_common.h"
ARM GAS  /tmp/ccBjSt3D.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 cmd_common.c
     /tmp/ccBjSt3D.s:21     .text.mriCmd_ReadUIntegerArgument:0000000000000000 $t
     /tmp/ccBjSt3D.s:27     .text.mriCmd_ReadUIntegerArgument:0000000000000000 mriCmd_ReadUIntegerArgument
     /tmp/ccBjSt3D.s:77     .text.mriCmd_ReadUIntegerArgument:0000000000000018 $d
     /tmp/ccBjSt3D.s:82     .text.mriCmd_ThrowIfNextCharIsNotEqualTo:0000000000000000 $t
     /tmp/ccBjSt3D.s:88     .text.mriCmd_ThrowIfNextCharIsNotEqualTo:0000000000000000 mriCmd_ThrowIfNextCharIsNotEqualTo
     /tmp/ccBjSt3D.s:135    .text.mriCmd_ThrowIfNextCharIsNotEqualTo:0000000000000018 $d
     /tmp/ccBjSt3D.s:140    .text.mriCmd_ReadAddressAndLengthArguments:0000000000000000 $t
     /tmp/ccBjSt3D.s:146    .text.mriCmd_ReadAddressAndLengthArguments:0000000000000000 mriCmd_ReadAddressAndLengthArguments
     /tmp/ccBjSt3D.s:213    .text.mriCmd_ReadAddressAndLengthArguments:0000000000000030 $d
     /tmp/ccBjSt3D.s:218    .text.mriCmd_ReadAddressAndLengthArgumentsWithColon:0000000000000000 $t
     /tmp/ccBjSt3D.s:224    .text.mriCmd_ReadAddressAndLengthArgumentsWithColon:0000000000000000 mriCmd_ReadAddressAndLengthArgumentsWithColon
     /tmp/ccBjSt3D.s:278    .text.mriCmd_ReadAddressAndLengthArgumentsWithColon:0000000000000020 $d

UNDEFINED SYMBOLS
mriBuffer_ReadUIntegerAsHex
mriExceptionCode
mriBuffer_IsNextCharEqualTo
