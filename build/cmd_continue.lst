ARM GAS  /tmp/ccGYaKgS.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"cmd_continue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "mri/core/cmd_continue.c"
  20              		.section	.text.isCurrentInstructionHardcodedBreakpoint,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	isCurrentInstructionHardcodedBreakpoint:
  27              	.LFB6:
   1:mri/core/cmd_continue.c **** /* Copyright 2020 Adam Green (https://github.com/adamgreen/)
   2:mri/core/cmd_continue.c **** 
   3:mri/core/cmd_continue.c ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/cmd_continue.c ****    you may not use this file except in compliance with the License.
   5:mri/core/cmd_continue.c ****    You may obtain a copy of the License at
   6:mri/core/cmd_continue.c **** 
   7:mri/core/cmd_continue.c ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/cmd_continue.c **** 
   9:mri/core/cmd_continue.c ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/cmd_continue.c ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/cmd_continue.c ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/cmd_continue.c ****    See the License for the specific language governing permissions and
  13:mri/core/cmd_continue.c ****    limitations under the License.
  14:mri/core/cmd_continue.c **** */
  15:mri/core/cmd_continue.c **** /* Handler for continue gdb command. */
  16:mri/core/cmd_continue.c **** #include <core/buffer.h>
  17:mri/core/cmd_continue.c **** #include <core/core.h>
  18:mri/core/cmd_continue.c **** #include <core/platforms.h>
  19:mri/core/cmd_continue.c **** #include <core/mri.h>
  20:mri/core/cmd_continue.c **** #include <core/cmd_common.h>
  21:mri/core/cmd_continue.c **** #include <core/cmd_continue.h>
  22:mri/core/cmd_continue.c **** 
  23:mri/core/cmd_continue.c **** 
  24:mri/core/cmd_continue.c **** static int shouldSkipHardcodedBreakpoint(void);
  25:mri/core/cmd_continue.c **** static int isCurrentInstructionHardcodedBreakpoint(void);
  26:mri/core/cmd_continue.c **** uint32_t ContinueExecution(int setPC, uint32_t newPC)
  27:mri/core/cmd_continue.c **** {
  28:mri/core/cmd_continue.c ****     if (Platform_RtosIsSetThreadStateSupported())
  29:mri/core/cmd_continue.c ****         Platform_RtosSetThreadState(MRI_PLATFORM_ALL_THREADS, MRI_PLATFORM_THREAD_THAWED);
  30:mri/core/cmd_continue.c ****     uint32_t returnValue = SkipHardcodedBreakpoint();
  31:mri/core/cmd_continue.c ****     if (setPC)
ARM GAS  /tmp/ccGYaKgS.s 			page 2


  32:mri/core/cmd_continue.c ****         Platform_SetProgramCounter(newPC);
  33:mri/core/cmd_continue.c ****     return (returnValue | HANDLER_RETURN_RESUME_PROGRAM | HANDLER_RETURN_RETURN_IMMEDIATELY);
  34:mri/core/cmd_continue.c **** }
  35:mri/core/cmd_continue.c **** 
  36:mri/core/cmd_continue.c **** uint32_t SkipHardcodedBreakpoint(void)
  37:mri/core/cmd_continue.c **** {
  38:mri/core/cmd_continue.c ****     if (shouldSkipHardcodedBreakpoint())
  39:mri/core/cmd_continue.c ****     {
  40:mri/core/cmd_continue.c ****         Platform_AdvanceProgramCounterToNextInstruction();
  41:mri/core/cmd_continue.c ****         return HANDLER_RETURN_SKIPPED_OVER_BREAK;
  42:mri/core/cmd_continue.c ****     }
  43:mri/core/cmd_continue.c **** 
  44:mri/core/cmd_continue.c ****     return 0;
  45:mri/core/cmd_continue.c **** }
  46:mri/core/cmd_continue.c **** 
  47:mri/core/cmd_continue.c **** static int shouldSkipHardcodedBreakpoint(void)
  48:mri/core/cmd_continue.c **** {
  49:mri/core/cmd_continue.c ****     return !Platform_WasProgramCounterModifiedByUser() && isCurrentInstructionHardcodedBreakpoint()
  50:mri/core/cmd_continue.c **** }
  51:mri/core/cmd_continue.c **** 
  52:mri/core/cmd_continue.c **** static int isCurrentInstructionHardcodedBreakpoint(void)
  53:mri/core/cmd_continue.c **** {
  28              		.loc 1 53 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  54:mri/core/cmd_continue.c ****     return Platform_TypeOfCurrentInstruction() == MRI_PLATFORM_INSTRUCTION_HARDCODED_BREAKPOINT;
  37              		.loc 1 54 5 view .LVU1
  38              		.loc 1 54 12 is_stmt 0 view .LVU2
  39 0002 FFF7FEFF 		bl	mriPlatform_TypeOfCurrentInstruction
  40              	.LVL0:
  55:mri/core/cmd_continue.c **** }
  41              		.loc 1 55 1 view .LVU3
  42 0006 0328     		cmp	r0, #3
  43 0008 14BF     		ite	ne
  44 000a 0020     		movne	r0, #0
  45 000c 0120     		moveq	r0, #1
  46 000e 08BD     		pop	{r3, pc}
  47              		.cfi_endproc
  48              	.LFE6:
  50              		.section	.text.shouldSkipHardcodedBreakpoint,"ax",%progbits
  51              		.align	1
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  56              	shouldSkipHardcodedBreakpoint:
  57              	.LFB5:
  48:mri/core/cmd_continue.c ****     return !Platform_WasProgramCounterModifiedByUser() && isCurrentInstructionHardcodedBreakpoint()
  58              		.loc 1 48 1 is_stmt 1 view -0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccGYaKgS.s 			page 3


  62 0000 08B5     		push	{r3, lr}
  63              	.LCFI1:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 3, -8
  66              		.cfi_offset 14, -4
  49:mri/core/cmd_continue.c **** }
  67              		.loc 1 49 5 view .LVU5
  49:mri/core/cmd_continue.c **** }
  68              		.loc 1 49 13 is_stmt 0 view .LVU6
  69 0002 FFF7FEFF 		bl	mriPlatform_WasProgramCounterModifiedByUser
  70              	.LVL1:
  49:mri/core/cmd_continue.c **** }
  71              		.loc 1 49 56 view .LVU7
  72 0006 08B1     		cbz	r0, .L7
  73 0008 0020     		movs	r0, #0
  74              	.L3:
  50:mri/core/cmd_continue.c **** 
  75              		.loc 1 50 1 view .LVU8
  76 000a 08BD     		pop	{r3, pc}
  77              	.L7:
  49:mri/core/cmd_continue.c **** }
  78              		.loc 1 49 59 discriminator 1 view .LVU9
  79 000c FFF7FEFF 		bl	isCurrentInstructionHardcodedBreakpoint
  80              	.LVL2:
  49:mri/core/cmd_continue.c **** }
  81              		.loc 1 49 56 discriminator 1 view .LVU10
  82 0010 0028     		cmp	r0, #0
  83 0012 FAD0     		beq	.L3
  49:mri/core/cmd_continue.c **** }
  84              		.loc 1 49 56 view .LVU11
  85 0014 0120     		movs	r0, #1
  86 0016 F8E7     		b	.L3
  87              		.cfi_endproc
  88              	.LFE5:
  90              		.section	.text.mriCmd_SkipHardcodedBreakpoint,"ax",%progbits
  91              		.align	1
  92              		.global	mriCmd_SkipHardcodedBreakpoint
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
  97              	mriCmd_SkipHardcodedBreakpoint:
  98              	.LFB4:
  37:mri/core/cmd_continue.c ****     if (shouldSkipHardcodedBreakpoint())
  99              		.loc 1 37 1 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103 0000 08B5     		push	{r3, lr}
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 3, -8
 107              		.cfi_offset 14, -4
  38:mri/core/cmd_continue.c ****     {
 108              		.loc 1 38 5 view .LVU13
  38:mri/core/cmd_continue.c ****     {
 109              		.loc 1 38 9 is_stmt 0 view .LVU14
 110 0002 FFF7FEFF 		bl	shouldSkipHardcodedBreakpoint
ARM GAS  /tmp/ccGYaKgS.s 			page 4


 111              	.LVL3:
  38:mri/core/cmd_continue.c ****     {
 112              		.loc 1 38 8 view .LVU15
 113 0006 08B9     		cbnz	r0, .L12
  44:mri/core/cmd_continue.c **** }
 114              		.loc 1 44 12 view .LVU16
 115 0008 0020     		movs	r0, #0
 116              	.L8:
  45:mri/core/cmd_continue.c **** 
 117              		.loc 1 45 1 view .LVU17
 118 000a 08BD     		pop	{r3, pc}
 119              	.L12:
  40:mri/core/cmd_continue.c ****         return HANDLER_RETURN_SKIPPED_OVER_BREAK;
 120              		.loc 1 40 9 is_stmt 1 view .LVU18
 121 000c FFF7FEFF 		bl	mriPlatform_AdvanceProgramCounterToNextInstruction
 122              	.LVL4:
  41:mri/core/cmd_continue.c ****     }
 123              		.loc 1 41 9 view .LVU19
  41:mri/core/cmd_continue.c ****     }
 124              		.loc 1 41 16 is_stmt 0 view .LVU20
 125 0010 0420     		movs	r0, #4
 126 0012 FAE7     		b	.L8
 127              		.cfi_endproc
 128              	.LFE4:
 130              		.section	.text.mriCmd_ContinueExecution,"ax",%progbits
 131              		.align	1
 132              		.global	mriCmd_ContinueExecution
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 137              	mriCmd_ContinueExecution:
 138              	.LVL5:
 139              	.LFB3:
  27:mri/core/cmd_continue.c ****     if (Platform_RtosIsSetThreadStateSupported())
 140              		.loc 1 27 1 is_stmt 1 view -0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
  27:mri/core/cmd_continue.c ****     if (Platform_RtosIsSetThreadStateSupported())
 144              		.loc 1 27 1 is_stmt 0 view .LVU22
 145 0000 70B5     		push	{r4, r5, r6, lr}
 146              	.LCFI3:
 147              		.cfi_def_cfa_offset 16
 148              		.cfi_offset 4, -16
 149              		.cfi_offset 5, -12
 150              		.cfi_offset 6, -8
 151              		.cfi_offset 14, -4
 152 0002 0546     		mov	r5, r0
 153 0004 0E46     		mov	r6, r1
  28:mri/core/cmd_continue.c ****         Platform_RtosSetThreadState(MRI_PLATFORM_ALL_THREADS, MRI_PLATFORM_THREAD_THAWED);
 154              		.loc 1 28 5 is_stmt 1 view .LVU23
  28:mri/core/cmd_continue.c ****         Platform_RtosSetThreadState(MRI_PLATFORM_ALL_THREADS, MRI_PLATFORM_THREAD_THAWED);
 155              		.loc 1 28 9 is_stmt 0 view .LVU24
 156 0006 FFF7FEFF 		bl	mriPlatform_RtosIsSetThreadStateSupported
 157              	.LVL6:
  28:mri/core/cmd_continue.c ****         Platform_RtosSetThreadState(MRI_PLATFORM_ALL_THREADS, MRI_PLATFORM_THREAD_THAWED);
 158              		.loc 1 28 8 view .LVU25
ARM GAS  /tmp/ccGYaKgS.s 			page 5


 159 000a 30B9     		cbnz	r0, .L17
 160              	.L14:
  30:mri/core/cmd_continue.c ****     if (setPC)
 161              		.loc 1 30 5 is_stmt 1 view .LVU26
  30:mri/core/cmd_continue.c ****     if (setPC)
 162              		.loc 1 30 28 is_stmt 0 view .LVU27
 163 000c FFF7FEFF 		bl	mriCmd_SkipHardcodedBreakpoint
 164              	.LVL7:
 165 0010 0446     		mov	r4, r0
 166              	.LVL8:
  31:mri/core/cmd_continue.c ****         Platform_SetProgramCounter(newPC);
 167              		.loc 1 31 5 is_stmt 1 view .LVU28
  31:mri/core/cmd_continue.c ****         Platform_SetProgramCounter(newPC);
 168              		.loc 1 31 8 is_stmt 0 view .LVU29
 169 0012 45B9     		cbnz	r5, .L18
 170              	.LVL9:
 171              	.L15:
  33:mri/core/cmd_continue.c **** }
 172              		.loc 1 33 5 is_stmt 1 view .LVU30
  34:mri/core/cmd_continue.c **** 
 173              		.loc 1 34 1 is_stmt 0 view .LVU31
 174 0014 44F00300 		orr	r0, r4, #3
 175 0018 70BD     		pop	{r4, r5, r6, pc}
 176              	.LVL10:
 177              	.L17:
  29:mri/core/cmd_continue.c ****     uint32_t returnValue = SkipHardcodedBreakpoint();
 178              		.loc 1 29 9 is_stmt 1 view .LVU32
 179 001a 0121     		movs	r1, #1
 180 001c 4FF0FF30 		mov	r0, #-1
 181 0020 FFF7FEFF 		bl	mriPlatform_RtosSetThreadState
 182              	.LVL11:
 183 0024 F2E7     		b	.L14
 184              	.LVL12:
 185              	.L18:
  32:mri/core/cmd_continue.c ****     return (returnValue | HANDLER_RETURN_RESUME_PROGRAM | HANDLER_RETURN_RETURN_IMMEDIATELY);
 186              		.loc 1 32 9 view .LVU33
 187 0026 3046     		mov	r0, r6
 188              	.LVL13:
  32:mri/core/cmd_continue.c ****     return (returnValue | HANDLER_RETURN_RESUME_PROGRAM | HANDLER_RETURN_RETURN_IMMEDIATELY);
 189              		.loc 1 32 9 is_stmt 0 view .LVU34
 190 0028 FFF7FEFF 		bl	mriPlatform_SetProgramCounter
 191              	.LVL14:
 192 002c F2E7     		b	.L15
 193              		.cfi_endproc
 194              	.LFE3:
 196              		.section	.text.mriCmd_HandleContinueCommand,"ax",%progbits
 197              		.align	1
 198              		.global	mriCmd_HandleContinueCommand
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 203              	mriCmd_HandleContinueCommand:
 204              	.LFB7:
  56:mri/core/cmd_continue.c **** 
  57:mri/core/cmd_continue.c **** 
  58:mri/core/cmd_continue.c **** /* Handle the 'c' command which is sent from gdb to tell the debugger to continue execution of the 
  59:mri/core/cmd_continue.c ****    program.
ARM GAS  /tmp/ccGYaKgS.s 			page 6


  60:mri/core/cmd_continue.c **** 
  61:mri/core/cmd_continue.c ****     Command Format:     cAAAAAAAA
  62:mri/core/cmd_continue.c ****     Response Format:    Blank until the next exception, at which time a 'T' stop response packet wi
  63:mri/core/cmd_continue.c **** 
  64:mri/core/cmd_continue.c ****     Where AAAAAAAA is an optional value to be used for the Program Counter when restarting the prog
  65:mri/core/cmd_continue.c **** */
  66:mri/core/cmd_continue.c **** uint32_t HandleContinueCommand(void)
  67:mri/core/cmd_continue.c **** {
 205              		.loc 1 67 1 is_stmt 1 view -0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 10B5     		push	{r4, lr}
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 4, -8
 213              		.cfi_offset 14, -4
  68:mri/core/cmd_continue.c ****     Buffer*     pBuffer = GetBuffer();
 214              		.loc 1 68 5 view .LVU36
 215              		.loc 1 68 27 is_stmt 0 view .LVU37
 216 0002 FFF7FEFF 		bl	mriCore_GetBuffer
 217              	.LVL15:
  69:mri/core/cmd_continue.c ****     int         setPC = 0;
 218              		.loc 1 69 5 is_stmt 1 view .LVU38
  70:mri/core/cmd_continue.c ****     uint32_t    newPC = 0;
 219              		.loc 1 70 5 view .LVU39
  71:mri/core/cmd_continue.c **** 
  72:mri/core/cmd_continue.c ****     /* New program counter value is optional parameter. */
  73:mri/core/cmd_continue.c ****     __try
 220              		.loc 1 73 5 view .LVU40
 221              		.loc 1 73 5 view .LVU41
 222              	.LBB8:
 223              	.LBI8:
 224              		.file 2 "mri/core/try_catch.h"
   1:mri/core/try_catch.h **** /* Copyright 2014 Adam Green (https://github.com/adamgreen/)
   2:mri/core/try_catch.h **** 
   3:mri/core/try_catch.h ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/try_catch.h ****    you may not use this file except in compliance with the License.
   5:mri/core/try_catch.h ****    You may obtain a copy of the License at
   6:mri/core/try_catch.h **** 
   7:mri/core/try_catch.h ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/try_catch.h **** 
   9:mri/core/try_catch.h ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/try_catch.h ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/try_catch.h ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/try_catch.h ****    See the License for the specific language governing permissions and
  13:mri/core/try_catch.h ****    limitations under the License.
  14:mri/core/try_catch.h **** */
  15:mri/core/try_catch.h **** /* Very rough exception handling like macros for C. */
  16:mri/core/try_catch.h **** #ifndef MRI_TRY_CATCH_H_
  17:mri/core/try_catch.h **** #define MRI_TRY_CATCH_H_
  18:mri/core/try_catch.h **** 
  19:mri/core/try_catch.h **** #define noException                         0
  20:mri/core/try_catch.h **** #define bufferOverrunException              1
  21:mri/core/try_catch.h **** #define invalidHexDigitException            2
  22:mri/core/try_catch.h **** #define invalidValueException               3
  23:mri/core/try_catch.h **** #define invalidArgumentException            4
ARM GAS  /tmp/ccGYaKgS.s 			page 7


  24:mri/core/try_catch.h **** #define timeoutException                    5
  25:mri/core/try_catch.h **** #define invalidIndexException               6
  26:mri/core/try_catch.h **** #define notFoundException                   7
  27:mri/core/try_catch.h **** #define exceededHardwareResourcesException  8
  28:mri/core/try_catch.h **** #define invalidDecDigitException            9
  29:mri/core/try_catch.h **** #define memFaultException                   10
  30:mri/core/try_catch.h **** #define mriMaxException                     15
  31:mri/core/try_catch.h **** 
  32:mri/core/try_catch.h **** extern int mriExceptionCode;
  33:mri/core/try_catch.h **** 
  34:mri/core/try_catch.h **** 
  35:mri/core/try_catch.h **** /* Allow an application including MRI to extend with their own exception codes and replace the belo
  36:mri/core/try_catch.h **** #ifndef MRI_SKIP_TRY_CATCH_MACRO_DEFINES
  37:mri/core/try_catch.h **** 
  38:mri/core/try_catch.h **** /* On Linux, it is possible that __try and __catch are already defined. */
  39:mri/core/try_catch.h **** #undef __try
  40:mri/core/try_catch.h **** #undef __catch
  41:mri/core/try_catch.h **** 
  42:mri/core/try_catch.h **** #define __throws
  43:mri/core/try_catch.h **** 
  44:mri/core/try_catch.h **** #define __try \
  45:mri/core/try_catch.h ****         do \
  46:mri/core/try_catch.h ****         { \
  47:mri/core/try_catch.h ****             clearExceptionCode();
  48:mri/core/try_catch.h **** 
  49:mri/core/try_catch.h **** #define __throwing_func(X) \
  50:mri/core/try_catch.h ****             X; \
  51:mri/core/try_catch.h ****             if (mriExceptionCode) \
  52:mri/core/try_catch.h ****                 break;
  53:mri/core/try_catch.h **** 
  54:mri/core/try_catch.h **** #define __catch \
  55:mri/core/try_catch.h ****         } while (0); \
  56:mri/core/try_catch.h ****         if (mriExceptionCode)
  57:mri/core/try_catch.h **** 
  58:mri/core/try_catch.h **** #define __throw(EXCEPTION) return ((void)setExceptionCode(EXCEPTION))
  59:mri/core/try_catch.h **** 
  60:mri/core/try_catch.h **** #define __throw_and_return(EXCEPTION, RETURN) return (setExceptionCode(EXCEPTION), (RETURN))
  61:mri/core/try_catch.h **** 
  62:mri/core/try_catch.h **** #define __rethrow return
  63:mri/core/try_catch.h **** 
  64:mri/core/try_catch.h **** #define __rethrow_and_return(RETURN) return RETURN
  65:mri/core/try_catch.h **** 
  66:mri/core/try_catch.h **** static inline int getExceptionCode(void)
  67:mri/core/try_catch.h **** {
  68:mri/core/try_catch.h ****     return mriExceptionCode;
  69:mri/core/try_catch.h **** }
  70:mri/core/try_catch.h **** 
  71:mri/core/try_catch.h **** static inline void setExceptionCode(int exceptionCode)
  72:mri/core/try_catch.h **** {
  73:mri/core/try_catch.h ****     mriExceptionCode = exceptionCode > mriExceptionCode ? exceptionCode : mriExceptionCode;
  74:mri/core/try_catch.h **** }
  75:mri/core/try_catch.h **** 
  76:mri/core/try_catch.h **** static inline void clearExceptionCode(void)
 225              		.loc 2 76 20 view .LVU42
 226              	.LBB9:
  77:mri/core/try_catch.h **** {
  78:mri/core/try_catch.h ****     mriExceptionCode = noException;
ARM GAS  /tmp/ccGYaKgS.s 			page 8


 227              		.loc 2 78 5 view .LVU43
 228              		.loc 2 78 22 is_stmt 0 view .LVU44
 229 0006 094C     		ldr	r4, .L24
 230 0008 0023     		movs	r3, #0
 231 000a 2360     		str	r3, [r4]
 232              	.LBE9:
 233              	.LBE8:
  74:mri/core/cmd_continue.c ****     {
  75:mri/core/cmd_continue.c ****         __throwing_func( newPC = ReadUIntegerArgument(pBuffer) );
 234              		.loc 1 75 9 is_stmt 1 view .LVU45
 235 000c FFF7FEFF 		bl	mriCmd_ReadUIntegerArgument
 236              	.LVL16:
 237              		.loc 1 75 9 is_stmt 0 view .LVU46
 238 0010 0146     		mov	r1, r0
 239              	.LVL17:
 240              		.loc 1 75 9 is_stmt 1 view .LVU47
 241 0012 2368     		ldr	r3, [r4]
 242 0014 3BB1     		cbz	r3, .L22
  69:mri/core/cmd_continue.c ****     uint32_t    newPC = 0;
 243              		.loc 1 69 17 is_stmt 0 view .LVU48
 244 0016 0020     		movs	r0, #0
 245              	.LVL18:
 246              	.L20:
  73:mri/core/cmd_continue.c ****     {
 247              		.loc 1 73 5 is_stmt 1 view .LVU49
  76:mri/core/cmd_continue.c ****         setPC = 1;
  77:mri/core/cmd_continue.c ****     }
  78:mri/core/cmd_continue.c ****     __catch
 248              		.loc 1 78 5 view .LVU50
 249 0018 13B1     		cbz	r3, .L21
  79:mri/core/cmd_continue.c ****     {
  80:mri/core/cmd_continue.c ****         clearExceptionCode();
 250              		.loc 1 80 9 view .LVU51
 251              	.LBB10:
 252              	.LBI10:
  76:mri/core/try_catch.h **** {
 253              		.loc 2 76 20 view .LVU52
 254              	.LBB11:
 255              		.loc 2 78 5 view .LVU53
 256              		.loc 2 78 22 is_stmt 0 view .LVU54
 257 001a 044B     		ldr	r3, .L24
 258 001c 0022     		movs	r2, #0
 259 001e 1A60     		str	r2, [r3]
 260              	.L21:
 261              	.LBE11:
 262              	.LBE10:
  81:mri/core/cmd_continue.c ****     }
  82:mri/core/cmd_continue.c ****     return ContinueExecution(setPC, newPC);
 263              		.loc 1 82 5 is_stmt 1 view .LVU55
 264              		.loc 1 82 12 is_stmt 0 view .LVU56
 265 0020 FFF7FEFF 		bl	mriCmd_ContinueExecution
 266              	.LVL19:
  83:mri/core/cmd_continue.c **** }
 267              		.loc 1 83 1 view .LVU57
 268 0024 10BD     		pop	{r4, pc}
 269              	.LVL20:
 270              	.L22:
ARM GAS  /tmp/ccGYaKgS.s 			page 9


  76:mri/core/cmd_continue.c ****     }
 271              		.loc 1 76 15 view .LVU58
 272 0026 0120     		movs	r0, #1
 273              	.LVL21:
  76:mri/core/cmd_continue.c ****     }
 274              		.loc 1 76 15 view .LVU59
 275 0028 F6E7     		b	.L20
 276              	.L25:
 277 002a 00BF     		.align	2
 278              	.L24:
 279 002c 00000000 		.word	mriExceptionCode
 280              		.cfi_endproc
 281              	.LFE7:
 283              		.section	.rodata.mriCmd_HandleContinueWithSignalCommand.str1.4,"aMS",%progbits,1
 284              		.align	2
 285              	.LC0:
 286 0000 45303100 		.ascii	"E01\000"
 287              		.section	.text.mriCmd_HandleContinueWithSignalCommand,"ax",%progbits
 288              		.align	1
 289              		.global	mriCmd_HandleContinueWithSignalCommand
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 294              	mriCmd_HandleContinueWithSignalCommand:
 295              	.LFB8:
  84:mri/core/cmd_continue.c **** 
  85:mri/core/cmd_continue.c **** 
  86:mri/core/cmd_continue.c **** 
  87:mri/core/cmd_continue.c **** /* Handle the 'C' command which is sent from gdb to tell the debugger to continue execution of the 
  88:mri/core/cmd_continue.c ****    program. It is similar to the 'c' command but it also provides a signal level, which MRI ignores
  89:mri/core/cmd_continue.c **** 
  90:mri/core/cmd_continue.c ****     Command Format:     cAA;BBBBBBBB
  91:mri/core/cmd_continue.c ****     Response Format:    Blank until the next exception, at which time a 'T' stop response packet wi
  92:mri/core/cmd_continue.c **** 
  93:mri/core/cmd_continue.c ****     Where AA is the signal to be set, and
  94:mri/core/cmd_continue.c ****           BBBBBBBB is an optional value to be used for the Program Counter when restarting the prog
  95:mri/core/cmd_continue.c **** */
  96:mri/core/cmd_continue.c **** uint32_t HandleContinueWithSignalCommand(void)
  97:mri/core/cmd_continue.c **** {
 296              		.loc 1 97 1 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300 0000 38B5     		push	{r3, r4, r5, lr}
 301              	.LCFI5:
 302              		.cfi_def_cfa_offset 16
 303              		.cfi_offset 3, -16
 304              		.cfi_offset 4, -12
 305              		.cfi_offset 5, -8
 306              		.cfi_offset 14, -4
  98:mri/core/cmd_continue.c ****     Buffer*     pBuffer = GetBuffer();
 307              		.loc 1 98 5 view .LVU61
 308              		.loc 1 98 27 is_stmt 0 view .LVU62
 309 0002 FFF7FEFF 		bl	mriCore_GetBuffer
 310              	.LVL22:
 311 0006 0446     		mov	r4, r0
 312              	.LVL23:
ARM GAS  /tmp/ccGYaKgS.s 			page 10


  99:mri/core/cmd_continue.c ****     int         setPC = 0;
 313              		.loc 1 99 5 is_stmt 1 view .LVU63
 100:mri/core/cmd_continue.c ****     uint32_t    newPC = 0;
 314              		.loc 1 100 5 view .LVU64
 101:mri/core/cmd_continue.c **** 
 102:mri/core/cmd_continue.c ****     __try
 315              		.loc 1 102 5 view .LVU65
 316              		.loc 1 102 5 view .LVU66
 317              	.LBB12:
 318              	.LBI12:
  76:mri/core/try_catch.h **** {
 319              		.loc 2 76 20 view .LVU67
 320              	.LBB13:
 321              		.loc 2 78 5 view .LVU68
 322              		.loc 2 78 22 is_stmt 0 view .LVU69
 323 0008 164D     		ldr	r5, .L37
 324 000a 0023     		movs	r3, #0
 325 000c 2B60     		str	r3, [r5]
 326              	.LBE13:
 327              	.LBE12:
 103:mri/core/cmd_continue.c ****     {
 104:mri/core/cmd_continue.c ****         /* Fetch signal value but ignore it. */
 105:mri/core/cmd_continue.c ****         __throwing_func( ReadUIntegerArgument(pBuffer) );
 328              		.loc 1 105 9 is_stmt 1 view .LVU70
 329 000e FFF7FEFF 		bl	mriCmd_ReadUIntegerArgument
 330              	.LVL24:
 331              		.loc 1 105 9 view .LVU71
 332 0012 2D68     		ldr	r5, [r5]
 333 0014 45B1     		cbz	r5, .L34
 100:mri/core/cmd_continue.c **** 
 334              		.loc 1 100 17 is_stmt 0 view .LVU72
 335 0016 0021     		movs	r1, #0
  99:mri/core/cmd_continue.c ****     uint32_t    newPC = 0;
 336              		.loc 1 99 17 view .LVU73
 337 0018 0D46     		mov	r5, r1
 338              	.LVL25:
 339              	.L27:
 102:mri/core/cmd_continue.c ****     {
 340              		.loc 1 102 5 is_stmt 1 view .LVU74
 106:mri/core/cmd_continue.c ****         if (Buffer_BytesLeft(pBuffer) && Buffer_IsNextCharEqualTo(pBuffer, ';'))
 107:mri/core/cmd_continue.c ****         {
 108:mri/core/cmd_continue.c ****             __throwing_func( newPC = ReadUIntegerArgument(pBuffer) );
 109:mri/core/cmd_continue.c ****             setPC = 1;
 110:mri/core/cmd_continue.c ****         }
 111:mri/core/cmd_continue.c ****     }
 112:mri/core/cmd_continue.c ****     __catch
 341              		.loc 1 112 5 view .LVU75
 342 001a 124B     		ldr	r3, .L37
 343 001c 1B68     		ldr	r3, [r3]
 344 001e DBB9     		cbnz	r3, .L35
 113:mri/core/cmd_continue.c ****     {
 114:mri/core/cmd_continue.c ****         PrepareStringResponse(MRI_ERROR_INVALID_ARGUMENT);
 115:mri/core/cmd_continue.c ****         return 0;
 116:mri/core/cmd_continue.c ****     }
 117:mri/core/cmd_continue.c ****     return ContinueExecution(setPC, newPC);
 345              		.loc 1 117 5 view .LVU76
 346              		.loc 1 117 12 is_stmt 0 view .LVU77
ARM GAS  /tmp/ccGYaKgS.s 			page 11


 347 0020 2846     		mov	r0, r5
 348 0022 FFF7FEFF 		bl	mriCmd_ContinueExecution
 349              	.LVL26:
 350              	.L26:
 118:mri/core/cmd_continue.c **** }
 351              		.loc 1 118 1 view .LVU78
 352 0026 38BD     		pop	{r3, r4, r5, pc}
 353              	.LVL27:
 354              	.L34:
 105:mri/core/cmd_continue.c ****         if (Buffer_BytesLeft(pBuffer) && Buffer_IsNextCharEqualTo(pBuffer, ';'))
 355              		.loc 1 105 57 is_stmt 1 discriminator 1 view .LVU79
 106:mri/core/cmd_continue.c ****         {
 356              		.loc 1 106 9 discriminator 1 view .LVU80
 106:mri/core/cmd_continue.c ****         {
 357              		.loc 1 106 13 is_stmt 0 discriminator 1 view .LVU81
 358 0028 2046     		mov	r0, r4
 359 002a FFF7FEFF 		bl	mriBuffer_BytesLeft
 360              	.LVL28:
 106:mri/core/cmd_continue.c ****         {
 361              		.loc 1 106 12 discriminator 1 view .LVU82
 362 002e 0146     		mov	r1, r0
 363 0030 0028     		cmp	r0, #0
 364 0032 F2D0     		beq	.L27
 106:mri/core/cmd_continue.c ****         {
 365              		.loc 1 106 42 discriminator 1 view .LVU83
 366 0034 3B21     		movs	r1, #59
 367 0036 2046     		mov	r0, r4
 368 0038 FFF7FEFF 		bl	mriBuffer_IsNextCharEqualTo
 369              	.LVL29:
 106:mri/core/cmd_continue.c ****         {
 370              		.loc 1 106 39 discriminator 1 view .LVU84
 371 003c 10B9     		cbnz	r0, .L36
  99:mri/core/cmd_continue.c ****     uint32_t    newPC = 0;
 372              		.loc 1 99 17 view .LVU85
 373 003e 0546     		mov	r5, r0
 100:mri/core/cmd_continue.c **** 
 374              		.loc 1 100 17 view .LVU86
 375 0040 0021     		movs	r1, #0
 376 0042 EAE7     		b	.L27
 377              	.L36:
 108:mri/core/cmd_continue.c ****             setPC = 1;
 378              		.loc 1 108 13 is_stmt 1 view .LVU87
 379 0044 2046     		mov	r0, r4
 380 0046 FFF7FEFF 		bl	mriCmd_ReadUIntegerArgument
 381              	.LVL30:
 382 004a 0146     		mov	r1, r0
 383              	.LVL31:
 108:mri/core/cmd_continue.c ****             setPC = 1;
 384              		.loc 1 108 13 view .LVU88
 385 004c 054B     		ldr	r3, .L37
 386 004e 1B68     		ldr	r3, [r3]
 387 0050 002B     		cmp	r3, #0
 388 0052 E2D1     		bne	.L27
 109:mri/core/cmd_continue.c ****         }
 389              		.loc 1 109 19 is_stmt 0 view .LVU89
 390 0054 0125     		movs	r5, #1
 391 0056 E0E7     		b	.L27
ARM GAS  /tmp/ccGYaKgS.s 			page 12


 392              	.LVL32:
 393              	.L35:
 114:mri/core/cmd_continue.c ****         return 0;
 394              		.loc 1 114 9 is_stmt 1 view .LVU90
 395 0058 0348     		ldr	r0, .L37+4
 396 005a FFF7FEFF 		bl	mriCore_PrepareStringResponse
 397              	.LVL33:
 115:mri/core/cmd_continue.c ****     }
 398              		.loc 1 115 9 view .LVU91
 115:mri/core/cmd_continue.c ****     }
 399              		.loc 1 115 16 is_stmt 0 view .LVU92
 400 005e 0020     		movs	r0, #0
 401 0060 E1E7     		b	.L26
 402              	.L38:
 403 0062 00BF     		.align	2
 404              	.L37:
 405 0064 00000000 		.word	mriExceptionCode
 406 0068 00000000 		.word	.LC0
 407              		.cfi_endproc
 408              	.LFE8:
 410              		.section	.rodata.mriCmd_HandleDetachCommand.str1.4,"aMS",%progbits,1
 411              		.align	2
 412              	.LC1:
 413 0000 4F4B00   		.ascii	"OK\000"
 414              		.section	.text.mriCmd_HandleDetachCommand,"ax",%progbits
 415              		.align	1
 416              		.global	mriCmd_HandleDetachCommand
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 421              	mriCmd_HandleDetachCommand:
 422              	.LFB9:
 119:mri/core/cmd_continue.c **** 
 120:mri/core/cmd_continue.c **** 
 121:mri/core/cmd_continue.c **** /* Handle the 'D' command which is sent from gdb to resume execution before it detaches and exits.
 122:mri/core/cmd_continue.c **** 
 123:mri/core/cmd_continue.c ****     Command Format:     D
 124:mri/core/cmd_continue.c ****     Response Format:    OK
 125:mri/core/cmd_continue.c **** 
 126:mri/core/cmd_continue.c **** */
 127:mri/core/cmd_continue.c **** uint32_t HandleDetachCommand(void)
 128:mri/core/cmd_continue.c **** {
 423              		.loc 1 128 1 is_stmt 1 view -0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427 0000 08B5     		push	{r3, lr}
 428              	.LCFI6:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 3, -8
 431              		.cfi_offset 14, -4
 129:mri/core/cmd_continue.c ****     if (Platform_RtosIsSetThreadStateSupported())
 432              		.loc 1 129 5 view .LVU94
 433              		.loc 1 129 9 is_stmt 0 view .LVU95
 434 0002 FFF7FEFF 		bl	mriPlatform_RtosIsSetThreadStateSupported
 435              	.LVL34:
 436              		.loc 1 129 8 view .LVU96
ARM GAS  /tmp/ccGYaKgS.s 			page 13


 437 0006 30B9     		cbnz	r0, .L42
 438              	.L40:
 130:mri/core/cmd_continue.c ****         Platform_RtosSetThreadState(MRI_PLATFORM_ALL_THREADS, MRI_PLATFORM_THREAD_THAWED);
 131:mri/core/cmd_continue.c ****     SkipHardcodedBreakpoint();
 439              		.loc 1 131 5 is_stmt 1 view .LVU97
 440 0008 FFF7FEFF 		bl	mriCmd_SkipHardcodedBreakpoint
 441              	.LVL35:
 132:mri/core/cmd_continue.c ****     PrepareStringResponse("OK");
 442              		.loc 1 132 5 view .LVU98
 443 000c 0548     		ldr	r0, .L43
 444 000e FFF7FEFF 		bl	mriCore_PrepareStringResponse
 445              	.LVL36:
 133:mri/core/cmd_continue.c ****     return HANDLER_RETURN_RESUME_PROGRAM;
 446              		.loc 1 133 5 view .LVU99
 134:mri/core/cmd_continue.c **** }
 447              		.loc 1 134 1 is_stmt 0 view .LVU100
 448 0012 0120     		movs	r0, #1
 449 0014 08BD     		pop	{r3, pc}
 450              	.L42:
 130:mri/core/cmd_continue.c ****     SkipHardcodedBreakpoint();
 451              		.loc 1 130 9 is_stmt 1 view .LVU101
 452 0016 0121     		movs	r1, #1
 453 0018 4FF0FF30 		mov	r0, #-1
 454 001c FFF7FEFF 		bl	mriPlatform_RtosSetThreadState
 455              	.LVL37:
 456 0020 F2E7     		b	.L40
 457              	.L44:
 458 0022 00BF     		.align	2
 459              	.L43:
 460 0024 00000000 		.word	.LC1
 461              		.cfi_endproc
 462              	.LFE9:
 464              		.text
 465              	.Letext0:
 466              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 467              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 468              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 469              		.file 6 "mri/core/buffer.h"
 470              		.file 7 "mri/core/platforms.h"
 471              		.file 8 "mri/core/cmd_common.h"
 472              		.file 9 "mri/core/core.h"
ARM GAS  /tmp/ccGYaKgS.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 cmd_continue.c
     /tmp/ccGYaKgS.s:21     .text.isCurrentInstructionHardcodedBreakpoint:0000000000000000 $t
     /tmp/ccGYaKgS.s:26     .text.isCurrentInstructionHardcodedBreakpoint:0000000000000000 isCurrentInstructionHardcodedBreakpoint
     /tmp/ccGYaKgS.s:51     .text.shouldSkipHardcodedBreakpoint:0000000000000000 $t
     /tmp/ccGYaKgS.s:56     .text.shouldSkipHardcodedBreakpoint:0000000000000000 shouldSkipHardcodedBreakpoint
     /tmp/ccGYaKgS.s:91     .text.mriCmd_SkipHardcodedBreakpoint:0000000000000000 $t
     /tmp/ccGYaKgS.s:97     .text.mriCmd_SkipHardcodedBreakpoint:0000000000000000 mriCmd_SkipHardcodedBreakpoint
     /tmp/ccGYaKgS.s:131    .text.mriCmd_ContinueExecution:0000000000000000 $t
     /tmp/ccGYaKgS.s:137    .text.mriCmd_ContinueExecution:0000000000000000 mriCmd_ContinueExecution
     /tmp/ccGYaKgS.s:197    .text.mriCmd_HandleContinueCommand:0000000000000000 $t
     /tmp/ccGYaKgS.s:203    .text.mriCmd_HandleContinueCommand:0000000000000000 mriCmd_HandleContinueCommand
     /tmp/ccGYaKgS.s:279    .text.mriCmd_HandleContinueCommand:000000000000002c $d
     /tmp/ccGYaKgS.s:284    .rodata.mriCmd_HandleContinueWithSignalCommand.str1.4:0000000000000000 $d
     /tmp/ccGYaKgS.s:288    .text.mriCmd_HandleContinueWithSignalCommand:0000000000000000 $t
     /tmp/ccGYaKgS.s:294    .text.mriCmd_HandleContinueWithSignalCommand:0000000000000000 mriCmd_HandleContinueWithSignalCommand
     /tmp/ccGYaKgS.s:405    .text.mriCmd_HandleContinueWithSignalCommand:0000000000000064 $d
     /tmp/ccGYaKgS.s:411    .rodata.mriCmd_HandleDetachCommand.str1.4:0000000000000000 $d
     /tmp/ccGYaKgS.s:415    .text.mriCmd_HandleDetachCommand:0000000000000000 $t
     /tmp/ccGYaKgS.s:421    .text.mriCmd_HandleDetachCommand:0000000000000000 mriCmd_HandleDetachCommand
     /tmp/ccGYaKgS.s:460    .text.mriCmd_HandleDetachCommand:0000000000000024 $d

UNDEFINED SYMBOLS
mriPlatform_TypeOfCurrentInstruction
mriPlatform_WasProgramCounterModifiedByUser
mriPlatform_AdvanceProgramCounterToNextInstruction
mriPlatform_RtosIsSetThreadStateSupported
mriPlatform_RtosSetThreadState
mriPlatform_SetProgramCounter
mriCore_GetBuffer
mriCmd_ReadUIntegerArgument
mriExceptionCode
mriBuffer_BytesLeft
mriBuffer_IsNextCharEqualTo
mriCore_PrepareStringResponse
