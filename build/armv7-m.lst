ARM GAS  /tmp/ccXppZcm.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"armv7-m.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "mri/architectures/armv7-m/armv7-m.c"
  20              		.section	.text.__NVIC_SystemReset,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	__NVIC_SystemReset:
  27              	.LFB120:
  28              		.file 2 "Drivers/CMSIS/Include/core_cm4.h"
   1:Drivers/CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:Drivers/CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm4.h ****  * @version  V5.0.8
   5:Drivers/CMSIS/Include/core_cm4.h ****  * @date     04. June 2018
   6:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm4.h **** /*
   8:Drivers/CMSIS/Include/core_cm4.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm4.h ****  *
  10:Drivers/CMSIS/Include/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm4.h ****  *
  12:Drivers/CMSIS/Include/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm4.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm4.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm4.h ****  *
  16:Drivers/CMSIS/Include/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm4.h ****  *
  18:Drivers/CMSIS/Include/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm4.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm4.h ****  */
  24:Drivers/CMSIS/Include/core_cm4.h **** 
  25:Drivers/CMSIS/Include/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm4.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm4.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm4.h **** #endif
  30:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 2


  31:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm4.h **** 
  34:Drivers/CMSIS/Include/core_cm4.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm4.h **** 
  36:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm4.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm4.h **** #endif
  39:Drivers/CMSIS/Include/core_cm4.h **** 
  40:Drivers/CMSIS/Include/core_cm4.h **** /**
  41:Drivers/CMSIS/Include/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm4.h **** 
  44:Drivers/CMSIS/Include/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm4.h **** 
  47:Drivers/CMSIS/Include/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm4.h **** 
  50:Drivers/CMSIS/Include/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm4.h ****  */
  53:Drivers/CMSIS/Include/core_cm4.h **** 
  54:Drivers/CMSIS/Include/core_cm4.h **** 
  55:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm4.h **** /**
  59:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup Cortex_M4
  60:Drivers/CMSIS/Include/core_cm4.h ****   @{
  61:Drivers/CMSIS/Include/core_cm4.h ****  */
  62:Drivers/CMSIS/Include/core_cm4.h **** 
  63:Drivers/CMSIS/Include/core_cm4.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm4.h **** 
  65:Drivers/CMSIS/Include/core_cm4.h **** /* CMSIS CM4 definitions */
  66:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm4.h **** 
  71:Drivers/CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm4.h **** 
  73:Drivers/CMSIS/Include/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:Drivers/CMSIS/Include/core_cm4.h **** */
  76:Drivers/CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
  77:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  80:Drivers/CMSIS/Include/core_cm4.h ****     #else
  81:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  83:Drivers/CMSIS/Include/core_cm4.h ****     #endif
  84:Drivers/CMSIS/Include/core_cm4.h ****   #else
  85:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  86:Drivers/CMSIS/Include/core_cm4.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 3


  88:Drivers/CMSIS/Include/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  92:Drivers/CMSIS/Include/core_cm4.h ****     #else
  93:Drivers/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  95:Drivers/CMSIS/Include/core_cm4.h ****     #endif
  96:Drivers/CMSIS/Include/core_cm4.h ****   #else
  97:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  98:Drivers/CMSIS/Include/core_cm4.h ****   #endif
  99:Drivers/CMSIS/Include/core_cm4.h **** 
 100:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 101:Drivers/CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 104:Drivers/CMSIS/Include/core_cm4.h ****     #else
 105:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 107:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 108:Drivers/CMSIS/Include/core_cm4.h ****   #else
 109:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 110:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 111:Drivers/CMSIS/Include/core_cm4.h **** 
 112:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 114:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 116:Drivers/CMSIS/Include/core_cm4.h ****     #else
 117:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 119:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 120:Drivers/CMSIS/Include/core_cm4.h ****   #else
 121:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 122:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 123:Drivers/CMSIS/Include/core_cm4.h **** 
 124:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 128:Drivers/CMSIS/Include/core_cm4.h ****     #else
 129:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 131:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 132:Drivers/CMSIS/Include/core_cm4.h ****   #else
 133:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 134:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm4.h **** 
 136:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 137:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __FPU_VFP__
 138:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 140:Drivers/CMSIS/Include/core_cm4.h ****     #else
 141:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 143:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 144:Drivers/CMSIS/Include/core_cm4.h ****   #else
ARM GAS  /tmp/ccXppZcm.s 			page 4


 145:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 146:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 147:Drivers/CMSIS/Include/core_cm4.h **** 
 148:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __CSMC__ )
 149:Drivers/CMSIS/Include/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 152:Drivers/CMSIS/Include/core_cm4.h ****     #else
 153:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 155:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 156:Drivers/CMSIS/Include/core_cm4.h ****   #else
 157:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 158:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm4.h **** 
 160:Drivers/CMSIS/Include/core_cm4.h **** #endif
 161:Drivers/CMSIS/Include/core_cm4.h **** 
 162:Drivers/CMSIS/Include/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:Drivers/CMSIS/Include/core_cm4.h **** 
 164:Drivers/CMSIS/Include/core_cm4.h **** 
 165:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 166:Drivers/CMSIS/Include/core_cm4.h **** }
 167:Drivers/CMSIS/Include/core_cm4.h **** #endif
 168:Drivers/CMSIS/Include/core_cm4.h **** 
 169:Drivers/CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:Drivers/CMSIS/Include/core_cm4.h **** 
 171:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:Drivers/CMSIS/Include/core_cm4.h **** 
 173:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:Drivers/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm4.h **** 
 176:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 177:Drivers/CMSIS/Include/core_cm4.h ****  extern "C" {
 178:Drivers/CMSIS/Include/core_cm4.h **** #endif
 179:Drivers/CMSIS/Include/core_cm4.h **** 
 180:Drivers/CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 181:Drivers/CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 183:Drivers/CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 186:Drivers/CMSIS/Include/core_cm4.h **** 
 187:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 191:Drivers/CMSIS/Include/core_cm4.h **** 
 192:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:Drivers/CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 196:Drivers/CMSIS/Include/core_cm4.h **** 
 197:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:Drivers/CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 201:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 5


 202:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:Drivers/CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 206:Drivers/CMSIS/Include/core_cm4.h **** #endif
 207:Drivers/CMSIS/Include/core_cm4.h **** 
 208:Drivers/CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:Drivers/CMSIS/Include/core_cm4.h **** /**
 210:Drivers/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:Drivers/CMSIS/Include/core_cm4.h **** 
 212:Drivers/CMSIS/Include/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:Drivers/CMSIS/Include/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:Drivers/CMSIS/Include/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:Drivers/CMSIS/Include/core_cm4.h **** */
 216:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 217:Drivers/CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:Drivers/CMSIS/Include/core_cm4.h **** #else
 219:Drivers/CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:Drivers/CMSIS/Include/core_cm4.h **** #endif
 221:Drivers/CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:Drivers/CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:Drivers/CMSIS/Include/core_cm4.h **** 
 224:Drivers/CMSIS/Include/core_cm4.h **** /* following defines should be used for structure members */
 225:Drivers/CMSIS/Include/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:Drivers/CMSIS/Include/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:Drivers/CMSIS/Include/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:Drivers/CMSIS/Include/core_cm4.h **** 
 229:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:Drivers/CMSIS/Include/core_cm4.h **** 
 231:Drivers/CMSIS/Include/core_cm4.h **** 
 232:Drivers/CMSIS/Include/core_cm4.h **** 
 233:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
 234:Drivers/CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 235:Drivers/CMSIS/Include/core_cm4.h ****   Core Register contain:
 236:Drivers/CMSIS/Include/core_cm4.h ****   - Core Register
 237:Drivers/CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 238:Drivers/CMSIS/Include/core_cm4.h ****   - Core SCB Register
 239:Drivers/CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 240:Drivers/CMSIS/Include/core_cm4.h ****   - Core Debug Register
 241:Drivers/CMSIS/Include/core_cm4.h ****   - Core MPU Register
 242:Drivers/CMSIS/Include/core_cm4.h ****   - Core FPU Register
 243:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 244:Drivers/CMSIS/Include/core_cm4.h **** /**
 245:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:Drivers/CMSIS/Include/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:Drivers/CMSIS/Include/core_cm4.h **** */
 248:Drivers/CMSIS/Include/core_cm4.h **** 
 249:Drivers/CMSIS/Include/core_cm4.h **** /**
 250:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Core Register type definitions.
 253:Drivers/CMSIS/Include/core_cm4.h ****   @{
 254:Drivers/CMSIS/Include/core_cm4.h ****  */
 255:Drivers/CMSIS/Include/core_cm4.h **** 
 256:Drivers/CMSIS/Include/core_cm4.h **** /**
 257:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:Drivers/CMSIS/Include/core_cm4.h ****  */
ARM GAS  /tmp/ccXppZcm.s 			page 6


 259:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 260:Drivers/CMSIS/Include/core_cm4.h **** {
 261:Drivers/CMSIS/Include/core_cm4.h ****   struct
 262:Drivers/CMSIS/Include/core_cm4.h ****   {
 263:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:Drivers/CMSIS/Include/core_cm4.h **** } APSR_Type;
 274:Drivers/CMSIS/Include/core_cm4.h **** 
 275:Drivers/CMSIS/Include/core_cm4.h **** /* APSR Register Definitions */
 276:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:Drivers/CMSIS/Include/core_cm4.h **** 
 279:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:Drivers/CMSIS/Include/core_cm4.h **** 
 282:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:Drivers/CMSIS/Include/core_cm4.h **** 
 285:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:Drivers/CMSIS/Include/core_cm4.h **** 
 288:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:Drivers/CMSIS/Include/core_cm4.h **** 
 291:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:Drivers/CMSIS/Include/core_cm4.h **** 
 294:Drivers/CMSIS/Include/core_cm4.h **** 
 295:Drivers/CMSIS/Include/core_cm4.h **** /**
 296:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:Drivers/CMSIS/Include/core_cm4.h ****  */
 298:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 299:Drivers/CMSIS/Include/core_cm4.h **** {
 300:Drivers/CMSIS/Include/core_cm4.h ****   struct
 301:Drivers/CMSIS/Include/core_cm4.h ****   {
 302:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm4.h **** } IPSR_Type;
 307:Drivers/CMSIS/Include/core_cm4.h **** 
 308:Drivers/CMSIS/Include/core_cm4.h **** /* IPSR Register Definitions */
 309:Drivers/CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:Drivers/CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:Drivers/CMSIS/Include/core_cm4.h **** 
 312:Drivers/CMSIS/Include/core_cm4.h **** 
 313:Drivers/CMSIS/Include/core_cm4.h **** /**
 314:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:Drivers/CMSIS/Include/core_cm4.h ****  */
ARM GAS  /tmp/ccXppZcm.s 			page 7


 316:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 317:Drivers/CMSIS/Include/core_cm4.h **** {
 318:Drivers/CMSIS/Include/core_cm4.h ****   struct
 319:Drivers/CMSIS/Include/core_cm4.h ****   {
 320:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:Drivers/CMSIS/Include/core_cm4.h **** } xPSR_Type;
 335:Drivers/CMSIS/Include/core_cm4.h **** 
 336:Drivers/CMSIS/Include/core_cm4.h **** /* xPSR Register Definitions */
 337:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:Drivers/CMSIS/Include/core_cm4.h **** 
 340:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:Drivers/CMSIS/Include/core_cm4.h **** 
 343:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:Drivers/CMSIS/Include/core_cm4.h **** 
 346:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:Drivers/CMSIS/Include/core_cm4.h **** 
 349:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:Drivers/CMSIS/Include/core_cm4.h **** 
 352:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:Drivers/CMSIS/Include/core_cm4.h **** 
 355:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:Drivers/CMSIS/Include/core_cm4.h **** 
 358:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:Drivers/CMSIS/Include/core_cm4.h **** 
 361:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:Drivers/CMSIS/Include/core_cm4.h **** 
 364:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:Drivers/CMSIS/Include/core_cm4.h **** 
 367:Drivers/CMSIS/Include/core_cm4.h **** 
 368:Drivers/CMSIS/Include/core_cm4.h **** /**
 369:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:Drivers/CMSIS/Include/core_cm4.h ****  */
 371:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 372:Drivers/CMSIS/Include/core_cm4.h **** {
ARM GAS  /tmp/ccXppZcm.s 			page 8


 373:Drivers/CMSIS/Include/core_cm4.h ****   struct
 374:Drivers/CMSIS/Include/core_cm4.h ****   {
 375:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:Drivers/CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 382:Drivers/CMSIS/Include/core_cm4.h **** 
 383:Drivers/CMSIS/Include/core_cm4.h **** /* CONTROL Register Definitions */
 384:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:Drivers/CMSIS/Include/core_cm4.h **** 
 387:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:Drivers/CMSIS/Include/core_cm4.h **** 
 390:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:Drivers/CMSIS/Include/core_cm4.h **** 
 393:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:Drivers/CMSIS/Include/core_cm4.h **** 
 395:Drivers/CMSIS/Include/core_cm4.h **** 
 396:Drivers/CMSIS/Include/core_cm4.h **** /**
 397:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:Drivers/CMSIS/Include/core_cm4.h ****   @{
 401:Drivers/CMSIS/Include/core_cm4.h ****  */
 402:Drivers/CMSIS/Include/core_cm4.h **** 
 403:Drivers/CMSIS/Include/core_cm4.h **** /**
 404:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:Drivers/CMSIS/Include/core_cm4.h ****  */
 406:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 407:Drivers/CMSIS/Include/core_cm4.h **** {
 408:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:Drivers/CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 422:Drivers/CMSIS/Include/core_cm4.h **** 
 423:Drivers/CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:Drivers/CMSIS/Include/core_cm4.h **** 
 427:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:Drivers/CMSIS/Include/core_cm4.h **** 
 429:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 9


 430:Drivers/CMSIS/Include/core_cm4.h **** /**
 431:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:Drivers/CMSIS/Include/core_cm4.h ****   @{
 435:Drivers/CMSIS/Include/core_cm4.h ****  */
 436:Drivers/CMSIS/Include/core_cm4.h **** 
 437:Drivers/CMSIS/Include/core_cm4.h **** /**
 438:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:Drivers/CMSIS/Include/core_cm4.h ****  */
 440:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 441:Drivers/CMSIS/Include/core_cm4.h **** {
 442:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:Drivers/CMSIS/Include/core_cm4.h **** } SCB_Type;
 464:Drivers/CMSIS/Include/core_cm4.h **** 
 465:Drivers/CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm4.h **** 
 469:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm4.h **** 
 472:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm4.h **** 
 475:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm4.h **** 
 478:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:Drivers/CMSIS/Include/core_cm4.h **** 
 481:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:Drivers/CMSIS/Include/core_cm4.h **** 
 485:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
ARM GAS  /tmp/ccXppZcm.s 			page 10


 487:Drivers/CMSIS/Include/core_cm4.h **** 
 488:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:Drivers/CMSIS/Include/core_cm4.h **** 
 491:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:Drivers/CMSIS/Include/core_cm4.h **** 
 494:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:Drivers/CMSIS/Include/core_cm4.h **** 
 497:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:Drivers/CMSIS/Include/core_cm4.h **** 
 500:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:Drivers/CMSIS/Include/core_cm4.h **** 
 503:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:Drivers/CMSIS/Include/core_cm4.h **** 
 506:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:Drivers/CMSIS/Include/core_cm4.h **** 
 509:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:Drivers/CMSIS/Include/core_cm4.h **** 
 512:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm4.h **** 
 516:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:Drivers/CMSIS/Include/core_cm4.h **** 
 520:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:Drivers/CMSIS/Include/core_cm4.h **** 
 523:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:Drivers/CMSIS/Include/core_cm4.h **** 
 526:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:Drivers/CMSIS/Include/core_cm4.h **** 
 529:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:Drivers/CMSIS/Include/core_cm4.h **** 
 532:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:Drivers/CMSIS/Include/core_cm4.h **** 
 535:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:Drivers/CMSIS/Include/core_cm4.h **** 
 538:Drivers/CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 539:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:Drivers/CMSIS/Include/core_cm4.h **** 
 542:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
ARM GAS  /tmp/ccXppZcm.s 			page 11


 544:Drivers/CMSIS/Include/core_cm4.h **** 
 545:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:Drivers/CMSIS/Include/core_cm4.h **** 
 548:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:Drivers/CMSIS/Include/core_cm4.h **** 
 552:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:Drivers/CMSIS/Include/core_cm4.h **** 
 555:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:Drivers/CMSIS/Include/core_cm4.h **** 
 558:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:Drivers/CMSIS/Include/core_cm4.h **** 
 561:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:Drivers/CMSIS/Include/core_cm4.h **** 
 564:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:Drivers/CMSIS/Include/core_cm4.h **** 
 567:Drivers/CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:Drivers/CMSIS/Include/core_cm4.h **** 
 571:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:Drivers/CMSIS/Include/core_cm4.h **** 
 574:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:Drivers/CMSIS/Include/core_cm4.h **** 
 577:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:Drivers/CMSIS/Include/core_cm4.h **** 
 580:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:Drivers/CMSIS/Include/core_cm4.h **** 
 583:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:Drivers/CMSIS/Include/core_cm4.h **** 
 586:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:Drivers/CMSIS/Include/core_cm4.h **** 
 589:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:Drivers/CMSIS/Include/core_cm4.h **** 
 592:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:Drivers/CMSIS/Include/core_cm4.h **** 
 595:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:Drivers/CMSIS/Include/core_cm4.h **** 
 598:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 12


 601:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:Drivers/CMSIS/Include/core_cm4.h **** 
 604:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:Drivers/CMSIS/Include/core_cm4.h **** 
 607:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:Drivers/CMSIS/Include/core_cm4.h **** 
 610:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:Drivers/CMSIS/Include/core_cm4.h **** 
 614:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:Drivers/CMSIS/Include/core_cm4.h **** 
 617:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:Drivers/CMSIS/Include/core_cm4.h **** 
 620:Drivers/CMSIS/Include/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:Drivers/CMSIS/Include/core_cm4.h **** 
 624:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:Drivers/CMSIS/Include/core_cm4.h **** 
 627:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm4.h **** 
 630:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:Drivers/CMSIS/Include/core_cm4.h **** 
 633:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:Drivers/CMSIS/Include/core_cm4.h **** 
 636:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:Drivers/CMSIS/Include/core_cm4.h **** 
 639:Drivers/CMSIS/Include/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:Drivers/CMSIS/Include/core_cm4.h **** 
 643:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:Drivers/CMSIS/Include/core_cm4.h **** 
 646:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:Drivers/CMSIS/Include/core_cm4.h **** 
 649:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:Drivers/CMSIS/Include/core_cm4.h **** 
 652:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:Drivers/CMSIS/Include/core_cm4.h **** 
 655:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 13


 658:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:Drivers/CMSIS/Include/core_cm4.h **** 
 661:Drivers/CMSIS/Include/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:Drivers/CMSIS/Include/core_cm4.h **** 
 665:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:Drivers/CMSIS/Include/core_cm4.h **** 
 668:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:Drivers/CMSIS/Include/core_cm4.h **** 
 671:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:Drivers/CMSIS/Include/core_cm4.h **** 
 674:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:Drivers/CMSIS/Include/core_cm4.h **** 
 677:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:Drivers/CMSIS/Include/core_cm4.h **** 
 680:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:Drivers/CMSIS/Include/core_cm4.h **** 
 684:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:Drivers/CMSIS/Include/core_cm4.h **** 
 687:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:Drivers/CMSIS/Include/core_cm4.h **** 
 690:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:Drivers/CMSIS/Include/core_cm4.h **** 
 694:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:Drivers/CMSIS/Include/core_cm4.h **** 
 697:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:Drivers/CMSIS/Include/core_cm4.h **** 
 700:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:Drivers/CMSIS/Include/core_cm4.h **** 
 703:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:Drivers/CMSIS/Include/core_cm4.h **** 
 706:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:Drivers/CMSIS/Include/core_cm4.h **** 
 708:Drivers/CMSIS/Include/core_cm4.h **** 
 709:Drivers/CMSIS/Include/core_cm4.h **** /**
 710:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:Drivers/CMSIS/Include/core_cm4.h ****   @{
 714:Drivers/CMSIS/Include/core_cm4.h ****  */
ARM GAS  /tmp/ccXppZcm.s 			page 14


 715:Drivers/CMSIS/Include/core_cm4.h **** 
 716:Drivers/CMSIS/Include/core_cm4.h **** /**
 717:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:Drivers/CMSIS/Include/core_cm4.h ****  */
 719:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 720:Drivers/CMSIS/Include/core_cm4.h **** {
 721:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:Drivers/CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 725:Drivers/CMSIS/Include/core_cm4.h **** 
 726:Drivers/CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:Drivers/CMSIS/Include/core_cm4.h **** 
 730:Drivers/CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:Drivers/CMSIS/Include/core_cm4.h **** 
 734:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:Drivers/CMSIS/Include/core_cm4.h **** 
 737:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:Drivers/CMSIS/Include/core_cm4.h **** 
 740:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:Drivers/CMSIS/Include/core_cm4.h **** 
 743:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:Drivers/CMSIS/Include/core_cm4.h **** 
 746:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:Drivers/CMSIS/Include/core_cm4.h **** 
 748:Drivers/CMSIS/Include/core_cm4.h **** 
 749:Drivers/CMSIS/Include/core_cm4.h **** /**
 750:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:Drivers/CMSIS/Include/core_cm4.h ****   @{
 754:Drivers/CMSIS/Include/core_cm4.h ****  */
 755:Drivers/CMSIS/Include/core_cm4.h **** 
 756:Drivers/CMSIS/Include/core_cm4.h **** /**
 757:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:Drivers/CMSIS/Include/core_cm4.h ****  */
 759:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 760:Drivers/CMSIS/Include/core_cm4.h **** {
 761:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:Drivers/CMSIS/Include/core_cm4.h **** } SysTick_Type;
 766:Drivers/CMSIS/Include/core_cm4.h **** 
 767:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:Drivers/CMSIS/Include/core_cm4.h **** 
 771:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
ARM GAS  /tmp/ccXppZcm.s 			page 15


 772:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:Drivers/CMSIS/Include/core_cm4.h **** 
 774:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:Drivers/CMSIS/Include/core_cm4.h **** 
 777:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:Drivers/CMSIS/Include/core_cm4.h **** 
 780:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:Drivers/CMSIS/Include/core_cm4.h **** 
 784:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 785:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:Drivers/CMSIS/Include/core_cm4.h **** 
 788:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:Drivers/CMSIS/Include/core_cm4.h **** 
 792:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:Drivers/CMSIS/Include/core_cm4.h **** 
 795:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:Drivers/CMSIS/Include/core_cm4.h **** 
 798:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:Drivers/CMSIS/Include/core_cm4.h **** 
 800:Drivers/CMSIS/Include/core_cm4.h **** 
 801:Drivers/CMSIS/Include/core_cm4.h **** /**
 802:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:Drivers/CMSIS/Include/core_cm4.h ****   @{
 806:Drivers/CMSIS/Include/core_cm4.h ****  */
 807:Drivers/CMSIS/Include/core_cm4.h **** 
 808:Drivers/CMSIS/Include/core_cm4.h **** /**
 809:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:Drivers/CMSIS/Include/core_cm4.h ****  */
 811:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 812:Drivers/CMSIS/Include/core_cm4.h **** {
 813:Drivers/CMSIS/Include/core_cm4.h ****   __OM  union
 814:Drivers/CMSIS/Include/core_cm4.h ****   {
 815:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:Drivers/CMSIS/Include/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
ARM GAS  /tmp/ccXppZcm.s 			page 16


 829:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:Drivers/CMSIS/Include/core_cm4.h **** } ITM_Type;
 846:Drivers/CMSIS/Include/core_cm4.h **** 
 847:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 850:Drivers/CMSIS/Include/core_cm4.h **** 
 851:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:Drivers/CMSIS/Include/core_cm4.h **** 
 855:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:Drivers/CMSIS/Include/core_cm4.h **** 
 858:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:Drivers/CMSIS/Include/core_cm4.h **** 
 861:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:Drivers/CMSIS/Include/core_cm4.h **** 
 864:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:Drivers/CMSIS/Include/core_cm4.h **** 
 867:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:Drivers/CMSIS/Include/core_cm4.h **** 
 870:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:Drivers/CMSIS/Include/core_cm4.h **** 
 873:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:Drivers/CMSIS/Include/core_cm4.h **** 
 876:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:Drivers/CMSIS/Include/core_cm4.h **** 
 879:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:Drivers/CMSIS/Include/core_cm4.h **** 
 883:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
ARM GAS  /tmp/ccXppZcm.s 			page 17


 886:Drivers/CMSIS/Include/core_cm4.h **** 
 887:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:Drivers/CMSIS/Include/core_cm4.h **** 
 891:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:Drivers/CMSIS/Include/core_cm4.h **** 
 895:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:Drivers/CMSIS/Include/core_cm4.h **** 
 898:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:Drivers/CMSIS/Include/core_cm4.h **** 
 901:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:Drivers/CMSIS/Include/core_cm4.h **** 
 903:Drivers/CMSIS/Include/core_cm4.h **** 
 904:Drivers/CMSIS/Include/core_cm4.h **** /**
 905:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:Drivers/CMSIS/Include/core_cm4.h ****   @{
 909:Drivers/CMSIS/Include/core_cm4.h ****  */
 910:Drivers/CMSIS/Include/core_cm4.h **** 
 911:Drivers/CMSIS/Include/core_cm4.h **** /**
 912:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:Drivers/CMSIS/Include/core_cm4.h ****  */
 914:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 915:Drivers/CMSIS/Include/core_cm4.h **** {
 916:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:Drivers/CMSIS/Include/core_cm4.h **** } DWT_Type;
 940:Drivers/CMSIS/Include/core_cm4.h **** 
 941:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Control Register Definitions */
 942:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
ARM GAS  /tmp/ccXppZcm.s 			page 18


 943:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:Drivers/CMSIS/Include/core_cm4.h **** 
 945:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:Drivers/CMSIS/Include/core_cm4.h **** 
 948:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:Drivers/CMSIS/Include/core_cm4.h **** 
 951:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:Drivers/CMSIS/Include/core_cm4.h **** 
 954:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:Drivers/CMSIS/Include/core_cm4.h **** 
 957:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:Drivers/CMSIS/Include/core_cm4.h **** 
 960:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:Drivers/CMSIS/Include/core_cm4.h **** 
 963:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:Drivers/CMSIS/Include/core_cm4.h **** 
 966:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:Drivers/CMSIS/Include/core_cm4.h **** 
 969:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:Drivers/CMSIS/Include/core_cm4.h **** 
 972:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:Drivers/CMSIS/Include/core_cm4.h **** 
 975:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:Drivers/CMSIS/Include/core_cm4.h **** 
 978:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:Drivers/CMSIS/Include/core_cm4.h **** 
 981:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:Drivers/CMSIS/Include/core_cm4.h **** 
 984:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:Drivers/CMSIS/Include/core_cm4.h **** 
 987:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:Drivers/CMSIS/Include/core_cm4.h **** 
 990:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:Drivers/CMSIS/Include/core_cm4.h **** 
 993:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:Drivers/CMSIS/Include/core_cm4.h **** 
 996:Drivers/CMSIS/Include/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 19


1000:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:Drivers/CMSIS/Include/core_cm4.h **** 
1004:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:Drivers/CMSIS/Include/core_cm4.h **** 
1008:Drivers/CMSIS/Include/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:Drivers/CMSIS/Include/core_cm4.h **** 
1012:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:Drivers/CMSIS/Include/core_cm4.h **** 
1016:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:Drivers/CMSIS/Include/core_cm4.h **** 
1020:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:Drivers/CMSIS/Include/core_cm4.h **** 
1024:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:Drivers/CMSIS/Include/core_cm4.h **** 
1027:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:Drivers/CMSIS/Include/core_cm4.h **** 
1030:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:Drivers/CMSIS/Include/core_cm4.h **** 
1033:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:Drivers/CMSIS/Include/core_cm4.h **** 
1036:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:Drivers/CMSIS/Include/core_cm4.h **** 
1039:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:Drivers/CMSIS/Include/core_cm4.h **** 
1042:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:Drivers/CMSIS/Include/core_cm4.h **** 
1045:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:Drivers/CMSIS/Include/core_cm4.h **** 
1048:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:Drivers/CMSIS/Include/core_cm4.h **** 
1050:Drivers/CMSIS/Include/core_cm4.h **** 
1051:Drivers/CMSIS/Include/core_cm4.h **** /**
1052:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:Drivers/CMSIS/Include/core_cm4.h ****   @{
1056:Drivers/CMSIS/Include/core_cm4.h ****  */
ARM GAS  /tmp/ccXppZcm.s 			page 20


1057:Drivers/CMSIS/Include/core_cm4.h **** 
1058:Drivers/CMSIS/Include/core_cm4.h **** /**
1059:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:Drivers/CMSIS/Include/core_cm4.h ****  */
1061:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1062:Drivers/CMSIS/Include/core_cm4.h **** {
1063:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1075:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:Drivers/CMSIS/Include/core_cm4.h **** } TPI_Type;
1088:Drivers/CMSIS/Include/core_cm4.h **** 
1089:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:Drivers/CMSIS/Include/core_cm4.h **** 
1093:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:Drivers/CMSIS/Include/core_cm4.h **** 
1097:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:Drivers/CMSIS/Include/core_cm4.h **** 
1101:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:Drivers/CMSIS/Include/core_cm4.h **** 
1104:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:Drivers/CMSIS/Include/core_cm4.h **** 
1107:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:Drivers/CMSIS/Include/core_cm4.h **** 
1110:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 21


1114:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:Drivers/CMSIS/Include/core_cm4.h **** 
1117:Drivers/CMSIS/Include/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:Drivers/CMSIS/Include/core_cm4.h **** 
1121:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:Drivers/CMSIS/Include/core_cm4.h **** 
1125:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:Drivers/CMSIS/Include/core_cm4.h **** 
1128:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:Drivers/CMSIS/Include/core_cm4.h **** 
1131:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:Drivers/CMSIS/Include/core_cm4.h **** 
1134:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:Drivers/CMSIS/Include/core_cm4.h **** 
1137:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:Drivers/CMSIS/Include/core_cm4.h **** 
1140:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:Drivers/CMSIS/Include/core_cm4.h **** 
1143:Drivers/CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1145:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1146:Drivers/CMSIS/Include/core_cm4.h **** 
1147:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1148:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1149:Drivers/CMSIS/Include/core_cm4.h **** 
1150:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1151:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1152:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1153:Drivers/CMSIS/Include/core_cm4.h **** 
1154:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1155:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1156:Drivers/CMSIS/Include/core_cm4.h **** 
1157:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1158:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1159:Drivers/CMSIS/Include/core_cm4.h **** 
1160:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1161:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1162:Drivers/CMSIS/Include/core_cm4.h **** 
1163:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1164:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1165:Drivers/CMSIS/Include/core_cm4.h **** 
1166:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1167:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1168:Drivers/CMSIS/Include/core_cm4.h **** 
1169:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1170:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
ARM GAS  /tmp/ccXppZcm.s 			page 22


1171:Drivers/CMSIS/Include/core_cm4.h **** 
1172:Drivers/CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1173:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1174:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1175:Drivers/CMSIS/Include/core_cm4.h **** 
1176:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1177:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1178:Drivers/CMSIS/Include/core_cm4.h **** 
1179:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1180:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1181:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1182:Drivers/CMSIS/Include/core_cm4.h **** 
1183:Drivers/CMSIS/Include/core_cm4.h **** /* TPI DEVID Register Definitions */
1184:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1185:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1186:Drivers/CMSIS/Include/core_cm4.h **** 
1187:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1188:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1189:Drivers/CMSIS/Include/core_cm4.h **** 
1190:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1191:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1192:Drivers/CMSIS/Include/core_cm4.h **** 
1193:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1194:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1195:Drivers/CMSIS/Include/core_cm4.h **** 
1196:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1197:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1198:Drivers/CMSIS/Include/core_cm4.h **** 
1199:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1200:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1201:Drivers/CMSIS/Include/core_cm4.h **** 
1202:Drivers/CMSIS/Include/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1203:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1204:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1205:Drivers/CMSIS/Include/core_cm4.h **** 
1206:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1207:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1208:Drivers/CMSIS/Include/core_cm4.h **** 
1209:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1210:Drivers/CMSIS/Include/core_cm4.h **** 
1211:Drivers/CMSIS/Include/core_cm4.h **** 
1212:Drivers/CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1213:Drivers/CMSIS/Include/core_cm4.h **** /**
1214:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1215:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1216:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1217:Drivers/CMSIS/Include/core_cm4.h ****   @{
1218:Drivers/CMSIS/Include/core_cm4.h ****  */
1219:Drivers/CMSIS/Include/core_cm4.h **** 
1220:Drivers/CMSIS/Include/core_cm4.h **** /**
1221:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1222:Drivers/CMSIS/Include/core_cm4.h ****  */
1223:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1224:Drivers/CMSIS/Include/core_cm4.h **** {
1225:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1226:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1227:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
ARM GAS  /tmp/ccXppZcm.s 			page 23


1228:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1229:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1230:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1231:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1232:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1233:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1234:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1235:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1236:Drivers/CMSIS/Include/core_cm4.h **** } MPU_Type;
1237:Drivers/CMSIS/Include/core_cm4.h **** 
1238:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_RALIASES                  4U
1239:Drivers/CMSIS/Include/core_cm4.h **** 
1240:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Type Register Definitions */
1241:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1242:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1243:Drivers/CMSIS/Include/core_cm4.h **** 
1244:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1245:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1246:Drivers/CMSIS/Include/core_cm4.h **** 
1247:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1248:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1249:Drivers/CMSIS/Include/core_cm4.h **** 
1250:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Control Register Definitions */
1251:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1252:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1253:Drivers/CMSIS/Include/core_cm4.h **** 
1254:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1255:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1256:Drivers/CMSIS/Include/core_cm4.h **** 
1257:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1258:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1259:Drivers/CMSIS/Include/core_cm4.h **** 
1260:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Number Register Definitions */
1261:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1262:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1263:Drivers/CMSIS/Include/core_cm4.h **** 
1264:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1265:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1266:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1267:Drivers/CMSIS/Include/core_cm4.h **** 
1268:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1269:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1270:Drivers/CMSIS/Include/core_cm4.h **** 
1271:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1272:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1273:Drivers/CMSIS/Include/core_cm4.h **** 
1274:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1275:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1276:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1277:Drivers/CMSIS/Include/core_cm4.h **** 
1278:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1279:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1280:Drivers/CMSIS/Include/core_cm4.h **** 
1281:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1282:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1283:Drivers/CMSIS/Include/core_cm4.h **** 
1284:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
ARM GAS  /tmp/ccXppZcm.s 			page 24


1285:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1286:Drivers/CMSIS/Include/core_cm4.h **** 
1287:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1288:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1289:Drivers/CMSIS/Include/core_cm4.h **** 
1290:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1291:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1292:Drivers/CMSIS/Include/core_cm4.h **** 
1293:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1294:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1295:Drivers/CMSIS/Include/core_cm4.h **** 
1296:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1297:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1298:Drivers/CMSIS/Include/core_cm4.h **** 
1299:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1300:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1301:Drivers/CMSIS/Include/core_cm4.h **** 
1302:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1303:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1304:Drivers/CMSIS/Include/core_cm4.h **** 
1305:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
1306:Drivers/CMSIS/Include/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1307:Drivers/CMSIS/Include/core_cm4.h **** 
1308:Drivers/CMSIS/Include/core_cm4.h **** 
1309:Drivers/CMSIS/Include/core_cm4.h **** /**
1310:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1311:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1312:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1313:Drivers/CMSIS/Include/core_cm4.h ****   @{
1314:Drivers/CMSIS/Include/core_cm4.h ****  */
1315:Drivers/CMSIS/Include/core_cm4.h **** 
1316:Drivers/CMSIS/Include/core_cm4.h **** /**
1317:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1318:Drivers/CMSIS/Include/core_cm4.h ****  */
1319:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1320:Drivers/CMSIS/Include/core_cm4.h **** {
1321:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
1322:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1323:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1324:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1325:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1326:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1327:Drivers/CMSIS/Include/core_cm4.h **** } FPU_Type;
1328:Drivers/CMSIS/Include/core_cm4.h **** 
1329:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1330:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1331:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1332:Drivers/CMSIS/Include/core_cm4.h **** 
1333:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1334:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1335:Drivers/CMSIS/Include/core_cm4.h **** 
1336:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1337:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1338:Drivers/CMSIS/Include/core_cm4.h **** 
1339:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1340:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1341:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 25


1342:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1343:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1344:Drivers/CMSIS/Include/core_cm4.h **** 
1345:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1346:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1347:Drivers/CMSIS/Include/core_cm4.h **** 
1348:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1349:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1350:Drivers/CMSIS/Include/core_cm4.h **** 
1351:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1352:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1353:Drivers/CMSIS/Include/core_cm4.h **** 
1354:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1355:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1356:Drivers/CMSIS/Include/core_cm4.h **** 
1357:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1358:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1359:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1360:Drivers/CMSIS/Include/core_cm4.h **** 
1361:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1362:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1363:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1364:Drivers/CMSIS/Include/core_cm4.h **** 
1365:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1366:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1367:Drivers/CMSIS/Include/core_cm4.h **** 
1368:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1369:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1370:Drivers/CMSIS/Include/core_cm4.h **** 
1371:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1372:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1373:Drivers/CMSIS/Include/core_cm4.h **** 
1374:Drivers/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1375:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1376:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1377:Drivers/CMSIS/Include/core_cm4.h **** 
1378:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1379:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1380:Drivers/CMSIS/Include/core_cm4.h **** 
1381:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1382:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1383:Drivers/CMSIS/Include/core_cm4.h **** 
1384:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1385:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1386:Drivers/CMSIS/Include/core_cm4.h **** 
1387:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1388:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1389:Drivers/CMSIS/Include/core_cm4.h **** 
1390:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1391:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1392:Drivers/CMSIS/Include/core_cm4.h **** 
1393:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1394:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1395:Drivers/CMSIS/Include/core_cm4.h **** 
1396:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1397:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1398:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 26


1399:Drivers/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1400:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1401:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1402:Drivers/CMSIS/Include/core_cm4.h **** 
1403:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1404:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1405:Drivers/CMSIS/Include/core_cm4.h **** 
1406:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1407:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1408:Drivers/CMSIS/Include/core_cm4.h **** 
1409:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1410:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1411:Drivers/CMSIS/Include/core_cm4.h **** 
1412:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
1413:Drivers/CMSIS/Include/core_cm4.h **** 
1414:Drivers/CMSIS/Include/core_cm4.h **** 
1415:Drivers/CMSIS/Include/core_cm4.h **** /**
1416:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1417:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1418:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1419:Drivers/CMSIS/Include/core_cm4.h ****   @{
1420:Drivers/CMSIS/Include/core_cm4.h ****  */
1421:Drivers/CMSIS/Include/core_cm4.h **** 
1422:Drivers/CMSIS/Include/core_cm4.h **** /**
1423:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1424:Drivers/CMSIS/Include/core_cm4.h ****  */
1425:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1426:Drivers/CMSIS/Include/core_cm4.h **** {
1427:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1428:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1429:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1430:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1431:Drivers/CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
1432:Drivers/CMSIS/Include/core_cm4.h **** 
1433:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1434:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1435:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1436:Drivers/CMSIS/Include/core_cm4.h **** 
1437:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1438:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1439:Drivers/CMSIS/Include/core_cm4.h **** 
1440:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1441:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1442:Drivers/CMSIS/Include/core_cm4.h **** 
1443:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1444:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1445:Drivers/CMSIS/Include/core_cm4.h **** 
1446:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1447:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1448:Drivers/CMSIS/Include/core_cm4.h **** 
1449:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1450:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1451:Drivers/CMSIS/Include/core_cm4.h **** 
1452:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1453:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1454:Drivers/CMSIS/Include/core_cm4.h **** 
1455:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
ARM GAS  /tmp/ccXppZcm.s 			page 27


1456:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1457:Drivers/CMSIS/Include/core_cm4.h **** 
1458:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1459:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1460:Drivers/CMSIS/Include/core_cm4.h **** 
1461:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1462:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1463:Drivers/CMSIS/Include/core_cm4.h **** 
1464:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1465:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1466:Drivers/CMSIS/Include/core_cm4.h **** 
1467:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1468:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1469:Drivers/CMSIS/Include/core_cm4.h **** 
1470:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1471:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1472:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1473:Drivers/CMSIS/Include/core_cm4.h **** 
1474:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1475:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1476:Drivers/CMSIS/Include/core_cm4.h **** 
1477:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1478:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1479:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1480:Drivers/CMSIS/Include/core_cm4.h **** 
1481:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1482:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1483:Drivers/CMSIS/Include/core_cm4.h **** 
1484:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1485:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1486:Drivers/CMSIS/Include/core_cm4.h **** 
1487:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1488:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1489:Drivers/CMSIS/Include/core_cm4.h **** 
1490:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1491:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1492:Drivers/CMSIS/Include/core_cm4.h **** 
1493:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1494:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1495:Drivers/CMSIS/Include/core_cm4.h **** 
1496:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1497:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1498:Drivers/CMSIS/Include/core_cm4.h **** 
1499:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1500:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1501:Drivers/CMSIS/Include/core_cm4.h **** 
1502:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1503:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1504:Drivers/CMSIS/Include/core_cm4.h **** 
1505:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1506:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1507:Drivers/CMSIS/Include/core_cm4.h **** 
1508:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1509:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1510:Drivers/CMSIS/Include/core_cm4.h **** 
1511:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1512:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
ARM GAS  /tmp/ccXppZcm.s 			page 28


1513:Drivers/CMSIS/Include/core_cm4.h **** 
1514:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1515:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1516:Drivers/CMSIS/Include/core_cm4.h **** 
1517:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1518:Drivers/CMSIS/Include/core_cm4.h **** 
1519:Drivers/CMSIS/Include/core_cm4.h **** 
1520:Drivers/CMSIS/Include/core_cm4.h **** /**
1521:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1522:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1523:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1524:Drivers/CMSIS/Include/core_cm4.h ****   @{
1525:Drivers/CMSIS/Include/core_cm4.h ****  */
1526:Drivers/CMSIS/Include/core_cm4.h **** 
1527:Drivers/CMSIS/Include/core_cm4.h **** /**
1528:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1529:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1531:Drivers/CMSIS/Include/core_cm4.h ****   \return           Masked and shifted value.
1532:Drivers/CMSIS/Include/core_cm4.h **** */
1533:Drivers/CMSIS/Include/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1534:Drivers/CMSIS/Include/core_cm4.h **** 
1535:Drivers/CMSIS/Include/core_cm4.h **** /**
1536:Drivers/CMSIS/Include/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1537:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1538:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1539:Drivers/CMSIS/Include/core_cm4.h ****   \return           Masked and shifted bit field value.
1540:Drivers/CMSIS/Include/core_cm4.h **** */
1541:Drivers/CMSIS/Include/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1542:Drivers/CMSIS/Include/core_cm4.h **** 
1543:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1544:Drivers/CMSIS/Include/core_cm4.h **** 
1545:Drivers/CMSIS/Include/core_cm4.h **** 
1546:Drivers/CMSIS/Include/core_cm4.h **** /**
1547:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1548:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1549:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1550:Drivers/CMSIS/Include/core_cm4.h ****   @{
1551:Drivers/CMSIS/Include/core_cm4.h ****  */
1552:Drivers/CMSIS/Include/core_cm4.h **** 
1553:Drivers/CMSIS/Include/core_cm4.h **** /* Memory mapping of Core Hardware */
1554:Drivers/CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1555:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1556:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1557:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1558:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1559:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1560:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1561:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1562:Drivers/CMSIS/Include/core_cm4.h **** 
1563:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1564:Drivers/CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1565:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1566:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1567:Drivers/CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1568:Drivers/CMSIS/Include/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1569:Drivers/CMSIS/Include/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
ARM GAS  /tmp/ccXppZcm.s 			page 29


1570:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1571:Drivers/CMSIS/Include/core_cm4.h **** 
1572:Drivers/CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1573:Drivers/CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1574:Drivers/CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1575:Drivers/CMSIS/Include/core_cm4.h **** #endif
1576:Drivers/CMSIS/Include/core_cm4.h **** 
1577:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1578:Drivers/CMSIS/Include/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1579:Drivers/CMSIS/Include/core_cm4.h **** 
1580:Drivers/CMSIS/Include/core_cm4.h **** /*@} */
1581:Drivers/CMSIS/Include/core_cm4.h **** 
1582:Drivers/CMSIS/Include/core_cm4.h **** 
1583:Drivers/CMSIS/Include/core_cm4.h **** 
1584:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
1585:Drivers/CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1586:Drivers/CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1587:Drivers/CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1588:Drivers/CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1589:Drivers/CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1590:Drivers/CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1591:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1592:Drivers/CMSIS/Include/core_cm4.h **** /**
1593:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1594:Drivers/CMSIS/Include/core_cm4.h **** */
1595:Drivers/CMSIS/Include/core_cm4.h **** 
1596:Drivers/CMSIS/Include/core_cm4.h **** 
1597:Drivers/CMSIS/Include/core_cm4.h **** 
1598:Drivers/CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1599:Drivers/CMSIS/Include/core_cm4.h **** /**
1600:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1601:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1602:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1603:Drivers/CMSIS/Include/core_cm4.h ****   @{
1604:Drivers/CMSIS/Include/core_cm4.h ****  */
1605:Drivers/CMSIS/Include/core_cm4.h **** 
1606:Drivers/CMSIS/Include/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1607:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1608:Drivers/CMSIS/Include/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1609:Drivers/CMSIS/Include/core_cm4.h ****   #endif
1610:Drivers/CMSIS/Include/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1611:Drivers/CMSIS/Include/core_cm4.h **** #else
1612:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1613:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1614:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1615:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1616:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1617:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1618:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1619:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1620:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1621:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1622:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1623:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1624:Drivers/CMSIS/Include/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1625:Drivers/CMSIS/Include/core_cm4.h **** 
1626:Drivers/CMSIS/Include/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
ARM GAS  /tmp/ccXppZcm.s 			page 30


1627:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1628:Drivers/CMSIS/Include/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1629:Drivers/CMSIS/Include/core_cm4.h ****   #endif
1630:Drivers/CMSIS/Include/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1631:Drivers/CMSIS/Include/core_cm4.h **** #else
1632:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1633:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1634:Drivers/CMSIS/Include/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1635:Drivers/CMSIS/Include/core_cm4.h **** 
1636:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1637:Drivers/CMSIS/Include/core_cm4.h **** 
1638:Drivers/CMSIS/Include/core_cm4.h **** 
1639:Drivers/CMSIS/Include/core_cm4.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1640:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1641:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1642:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1643:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1644:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1645:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1646:Drivers/CMSIS/Include/core_cm4.h **** 
1647:Drivers/CMSIS/Include/core_cm4.h **** 
1648:Drivers/CMSIS/Include/core_cm4.h **** /**
1649:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Priority Grouping
1650:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1651:Drivers/CMSIS/Include/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1652:Drivers/CMSIS/Include/core_cm4.h ****            Only values from 0..7 are used.
1653:Drivers/CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1654:Drivers/CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1655:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1656:Drivers/CMSIS/Include/core_cm4.h ****  */
1657:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1658:Drivers/CMSIS/Include/core_cm4.h **** {
1659:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1660:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1661:Drivers/CMSIS/Include/core_cm4.h **** 
1662:Drivers/CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1663:Drivers/CMSIS/Include/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1664:Drivers/CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                   |
1665:Drivers/CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1666:Drivers/CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1667:Drivers/CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1668:Drivers/CMSIS/Include/core_cm4.h **** }
1669:Drivers/CMSIS/Include/core_cm4.h **** 
1670:Drivers/CMSIS/Include/core_cm4.h **** 
1671:Drivers/CMSIS/Include/core_cm4.h **** /**
1672:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Priority Grouping
1673:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1674:Drivers/CMSIS/Include/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1675:Drivers/CMSIS/Include/core_cm4.h ****  */
1676:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1677:Drivers/CMSIS/Include/core_cm4.h **** {
1678:Drivers/CMSIS/Include/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1679:Drivers/CMSIS/Include/core_cm4.h **** }
1680:Drivers/CMSIS/Include/core_cm4.h **** 
1681:Drivers/CMSIS/Include/core_cm4.h **** 
1682:Drivers/CMSIS/Include/core_cm4.h **** /**
1683:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Enable Interrupt
ARM GAS  /tmp/ccXppZcm.s 			page 31


1684:Drivers/CMSIS/Include/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1685:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1686:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1687:Drivers/CMSIS/Include/core_cm4.h ****  */
1688:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1689:Drivers/CMSIS/Include/core_cm4.h **** {
1690:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1691:Drivers/CMSIS/Include/core_cm4.h ****   {
1692:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1693:Drivers/CMSIS/Include/core_cm4.h ****   }
1694:Drivers/CMSIS/Include/core_cm4.h **** }
1695:Drivers/CMSIS/Include/core_cm4.h **** 
1696:Drivers/CMSIS/Include/core_cm4.h **** 
1697:Drivers/CMSIS/Include/core_cm4.h **** /**
1698:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Enable status
1699:Drivers/CMSIS/Include/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1700:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1701:Drivers/CMSIS/Include/core_cm4.h ****   \return             0  Interrupt is not enabled.
1702:Drivers/CMSIS/Include/core_cm4.h ****   \return             1  Interrupt is enabled.
1703:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1704:Drivers/CMSIS/Include/core_cm4.h ****  */
1705:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1706:Drivers/CMSIS/Include/core_cm4.h **** {
1707:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1708:Drivers/CMSIS/Include/core_cm4.h ****   {
1709:Drivers/CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1710:Drivers/CMSIS/Include/core_cm4.h ****   }
1711:Drivers/CMSIS/Include/core_cm4.h ****   else
1712:Drivers/CMSIS/Include/core_cm4.h ****   {
1713:Drivers/CMSIS/Include/core_cm4.h ****     return(0U);
1714:Drivers/CMSIS/Include/core_cm4.h ****   }
1715:Drivers/CMSIS/Include/core_cm4.h **** }
1716:Drivers/CMSIS/Include/core_cm4.h **** 
1717:Drivers/CMSIS/Include/core_cm4.h **** 
1718:Drivers/CMSIS/Include/core_cm4.h **** /**
1719:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Disable Interrupt
1720:Drivers/CMSIS/Include/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1721:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1722:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1723:Drivers/CMSIS/Include/core_cm4.h ****  */
1724:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1725:Drivers/CMSIS/Include/core_cm4.h **** {
1726:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1727:Drivers/CMSIS/Include/core_cm4.h ****   {
1728:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1729:Drivers/CMSIS/Include/core_cm4.h ****     __DSB();
1730:Drivers/CMSIS/Include/core_cm4.h ****     __ISB();
1731:Drivers/CMSIS/Include/core_cm4.h ****   }
1732:Drivers/CMSIS/Include/core_cm4.h **** }
1733:Drivers/CMSIS/Include/core_cm4.h **** 
1734:Drivers/CMSIS/Include/core_cm4.h **** 
1735:Drivers/CMSIS/Include/core_cm4.h **** /**
1736:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Pending Interrupt
1737:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1738:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1739:Drivers/CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not pending.
1740:Drivers/CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is pending.
ARM GAS  /tmp/ccXppZcm.s 			page 32


1741:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1742:Drivers/CMSIS/Include/core_cm4.h ****  */
1743:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1744:Drivers/CMSIS/Include/core_cm4.h **** {
1745:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1746:Drivers/CMSIS/Include/core_cm4.h ****   {
1747:Drivers/CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1748:Drivers/CMSIS/Include/core_cm4.h ****   }
1749:Drivers/CMSIS/Include/core_cm4.h ****   else
1750:Drivers/CMSIS/Include/core_cm4.h ****   {
1751:Drivers/CMSIS/Include/core_cm4.h ****     return(0U);
1752:Drivers/CMSIS/Include/core_cm4.h ****   }
1753:Drivers/CMSIS/Include/core_cm4.h **** }
1754:Drivers/CMSIS/Include/core_cm4.h **** 
1755:Drivers/CMSIS/Include/core_cm4.h **** 
1756:Drivers/CMSIS/Include/core_cm4.h **** /**
1757:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Pending Interrupt
1758:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1759:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1760:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1761:Drivers/CMSIS/Include/core_cm4.h ****  */
1762:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1763:Drivers/CMSIS/Include/core_cm4.h **** {
1764:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1765:Drivers/CMSIS/Include/core_cm4.h ****   {
1766:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1767:Drivers/CMSIS/Include/core_cm4.h ****   }
1768:Drivers/CMSIS/Include/core_cm4.h **** }
1769:Drivers/CMSIS/Include/core_cm4.h **** 
1770:Drivers/CMSIS/Include/core_cm4.h **** 
1771:Drivers/CMSIS/Include/core_cm4.h **** /**
1772:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Clear Pending Interrupt
1773:Drivers/CMSIS/Include/core_cm4.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1774:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1775:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1776:Drivers/CMSIS/Include/core_cm4.h ****  */
1777:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1778:Drivers/CMSIS/Include/core_cm4.h **** {
1779:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1780:Drivers/CMSIS/Include/core_cm4.h ****   {
1781:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1782:Drivers/CMSIS/Include/core_cm4.h ****   }
1783:Drivers/CMSIS/Include/core_cm4.h **** }
1784:Drivers/CMSIS/Include/core_cm4.h **** 
1785:Drivers/CMSIS/Include/core_cm4.h **** 
1786:Drivers/CMSIS/Include/core_cm4.h **** /**
1787:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Active Interrupt
1788:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1789:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1790:Drivers/CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not active.
1791:Drivers/CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is active.
1792:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1793:Drivers/CMSIS/Include/core_cm4.h ****  */
1794:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1795:Drivers/CMSIS/Include/core_cm4.h **** {
1796:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1797:Drivers/CMSIS/Include/core_cm4.h ****   {
ARM GAS  /tmp/ccXppZcm.s 			page 33


1798:Drivers/CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1799:Drivers/CMSIS/Include/core_cm4.h ****   }
1800:Drivers/CMSIS/Include/core_cm4.h ****   else
1801:Drivers/CMSIS/Include/core_cm4.h ****   {
1802:Drivers/CMSIS/Include/core_cm4.h ****     return(0U);
1803:Drivers/CMSIS/Include/core_cm4.h ****   }
1804:Drivers/CMSIS/Include/core_cm4.h **** }
1805:Drivers/CMSIS/Include/core_cm4.h **** 
1806:Drivers/CMSIS/Include/core_cm4.h **** 
1807:Drivers/CMSIS/Include/core_cm4.h **** /**
1808:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Interrupt Priority
1809:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1810:Drivers/CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1811:Drivers/CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1812:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1813:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]  priority  Priority to set.
1814:Drivers/CMSIS/Include/core_cm4.h ****   \note    The priority cannot be set for every processor exception.
1815:Drivers/CMSIS/Include/core_cm4.h ****  */
1816:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1817:Drivers/CMSIS/Include/core_cm4.h **** {
1818:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1819:Drivers/CMSIS/Include/core_cm4.h ****   {
1820:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1821:Drivers/CMSIS/Include/core_cm4.h ****   }
1822:Drivers/CMSIS/Include/core_cm4.h ****   else
1823:Drivers/CMSIS/Include/core_cm4.h ****   {
1824:Drivers/CMSIS/Include/core_cm4.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1825:Drivers/CMSIS/Include/core_cm4.h ****   }
1826:Drivers/CMSIS/Include/core_cm4.h **** }
1827:Drivers/CMSIS/Include/core_cm4.h **** 
1828:Drivers/CMSIS/Include/core_cm4.h **** 
1829:Drivers/CMSIS/Include/core_cm4.h **** /**
1830:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Priority
1831:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1832:Drivers/CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1833:Drivers/CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1834:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1835:Drivers/CMSIS/Include/core_cm4.h ****   \return             Interrupt Priority.
1836:Drivers/CMSIS/Include/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1837:Drivers/CMSIS/Include/core_cm4.h ****  */
1838:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1839:Drivers/CMSIS/Include/core_cm4.h **** {
1840:Drivers/CMSIS/Include/core_cm4.h **** 
1841:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1842:Drivers/CMSIS/Include/core_cm4.h ****   {
1843:Drivers/CMSIS/Include/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1844:Drivers/CMSIS/Include/core_cm4.h ****   }
1845:Drivers/CMSIS/Include/core_cm4.h ****   else
1846:Drivers/CMSIS/Include/core_cm4.h ****   {
1847:Drivers/CMSIS/Include/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1848:Drivers/CMSIS/Include/core_cm4.h ****   }
1849:Drivers/CMSIS/Include/core_cm4.h **** }
1850:Drivers/CMSIS/Include/core_cm4.h **** 
1851:Drivers/CMSIS/Include/core_cm4.h **** 
1852:Drivers/CMSIS/Include/core_cm4.h **** /**
1853:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Encode Priority
1854:Drivers/CMSIS/Include/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
ARM GAS  /tmp/ccXppZcm.s 			page 34


1855:Drivers/CMSIS/Include/core_cm4.h ****            preemptive priority value, and subpriority value.
1856:Drivers/CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1857:Drivers/CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1858:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1859:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1860:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1861:Drivers/CMSIS/Include/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1862:Drivers/CMSIS/Include/core_cm4.h ****  */
1863:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1864:Drivers/CMSIS/Include/core_cm4.h **** {
1865:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1866:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1867:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1868:Drivers/CMSIS/Include/core_cm4.h **** 
1869:Drivers/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1870:Drivers/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1871:Drivers/CMSIS/Include/core_cm4.h **** 
1872:Drivers/CMSIS/Include/core_cm4.h ****   return (
1873:Drivers/CMSIS/Include/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1874:Drivers/CMSIS/Include/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1875:Drivers/CMSIS/Include/core_cm4.h ****          );
1876:Drivers/CMSIS/Include/core_cm4.h **** }
1877:Drivers/CMSIS/Include/core_cm4.h **** 
1878:Drivers/CMSIS/Include/core_cm4.h **** 
1879:Drivers/CMSIS/Include/core_cm4.h **** /**
1880:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Decode Priority
1881:Drivers/CMSIS/Include/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1882:Drivers/CMSIS/Include/core_cm4.h ****            preemptive priority value and subpriority value.
1883:Drivers/CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1884:Drivers/CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1885:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1886:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1887:Drivers/CMSIS/Include/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1888:Drivers/CMSIS/Include/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1889:Drivers/CMSIS/Include/core_cm4.h ****  */
1890:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1891:Drivers/CMSIS/Include/core_cm4.h **** {
1892:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1893:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1894:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1895:Drivers/CMSIS/Include/core_cm4.h **** 
1896:Drivers/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1897:Drivers/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1898:Drivers/CMSIS/Include/core_cm4.h **** 
1899:Drivers/CMSIS/Include/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1900:Drivers/CMSIS/Include/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1901:Drivers/CMSIS/Include/core_cm4.h **** }
1902:Drivers/CMSIS/Include/core_cm4.h **** 
1903:Drivers/CMSIS/Include/core_cm4.h **** 
1904:Drivers/CMSIS/Include/core_cm4.h **** /**
1905:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Interrupt Vector
1906:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1907:Drivers/CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1908:Drivers/CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1909:Drivers/CMSIS/Include/core_cm4.h ****            VTOR must been relocated to SRAM before.
1910:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]   IRQn      Interrupt number
1911:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]   vector    Address of interrupt handler function
ARM GAS  /tmp/ccXppZcm.s 			page 35


1912:Drivers/CMSIS/Include/core_cm4.h ****  */
1913:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1914:Drivers/CMSIS/Include/core_cm4.h **** {
1915:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1916:Drivers/CMSIS/Include/core_cm4.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1917:Drivers/CMSIS/Include/core_cm4.h **** }
1918:Drivers/CMSIS/Include/core_cm4.h **** 
1919:Drivers/CMSIS/Include/core_cm4.h **** 
1920:Drivers/CMSIS/Include/core_cm4.h **** /**
1921:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Vector
1922:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads an interrupt vector from interrupt vector table.
1923:Drivers/CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1924:Drivers/CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1925:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]   IRQn      Interrupt number.
1926:Drivers/CMSIS/Include/core_cm4.h ****   \return                 Address of interrupt handler function
1927:Drivers/CMSIS/Include/core_cm4.h ****  */
1928:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1929:Drivers/CMSIS/Include/core_cm4.h **** {
1930:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1931:Drivers/CMSIS/Include/core_cm4.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1932:Drivers/CMSIS/Include/core_cm4.h **** }
1933:Drivers/CMSIS/Include/core_cm4.h **** 
1934:Drivers/CMSIS/Include/core_cm4.h **** 
1935:Drivers/CMSIS/Include/core_cm4.h **** /**
1936:Drivers/CMSIS/Include/core_cm4.h ****   \brief   System Reset
1937:Drivers/CMSIS/Include/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
1938:Drivers/CMSIS/Include/core_cm4.h ****  */
1939:Drivers/CMSIS/Include/core_cm4.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1940:Drivers/CMSIS/Include/core_cm4.h **** {
  29              		.loc 2 1940 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
1941:Drivers/CMSIS/Include/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
  35              		.loc 2 1941 3 view .LVU1
  36              	.LBB209:
  37              	.LBI209:
  38              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccXppZcm.s 			page 36


  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  /tmp/ccXppZcm.s 			page 37


  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccXppZcm.s 			page 38


 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccXppZcm.s 			page 39


 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
ARM GAS  /tmp/ccXppZcm.s 			page 40


 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccXppZcm.s 			page 41


 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 42


 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 43


 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
ARM GAS  /tmp/ccXppZcm.s 			page 44


 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 45


 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/ccXppZcm.s 			page 46


 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
ARM GAS  /tmp/ccXppZcm.s 			page 47


 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccXppZcm.s 			page 48


 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
ARM GAS  /tmp/ccXppZcm.s 			page 49


 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  /tmp/ccXppZcm.s 			page 50


 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccXppZcm.s 			page 51


 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  39              		.loc 3 877 27 view .LVU2
  40              	.LBB210:
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  41              		.loc 3 879 3 view .LVU3
  42              		.syntax unified
  43              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  44 0000 BFF34F8F 		dsb 0xF
  45              	@ 0 "" 2
  46              		.thumb
  47              		.syntax unified
  48              	.LBE210:
  49              	.LBE209:
1942:Drivers/CMSIS/Include/core_cm4.h ****                                                                        buffered write are completed
1943:Drivers/CMSIS/Include/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
  50              		.loc 2 1943 3 view .LVU4
1944:Drivers/CMSIS/Include/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  51              		.loc 2 1944 32 is_stmt 0 view .LVU5
  52 0004 0549     		ldr	r1, .L3
  53 0006 CA68     		ldr	r2, [r1, #12]
  54              		.loc 2 1944 40 view .LVU6
  55 0008 02F4E062 		and	r2, r2, #1792
1943:Drivers/CMSIS/Include/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  56              		.loc 2 1943 17 view .LVU7
  57 000c 044B     		ldr	r3, .L3+4
  58 000e 1343     		orrs	r3, r3, r2
1943:Drivers/CMSIS/Include/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  59              		.loc 2 1943 15 view .LVU8
  60 0010 CB60     		str	r3, [r1, #12]
1945:Drivers/CMSIS/Include/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1946:Drivers/CMSIS/Include/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
  61              		.loc 2 1946 3 is_stmt 1 view .LVU9
  62              	.LBB211:
  63              	.LBI211:
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  64              		.loc 3 877 27 view .LVU10
  65              	.LBB212:
  66              		.loc 3 879 3 view .LVU11
  67              		.syntax unified
  68              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  69 0012 BFF34F8F 		dsb 0xF
  70              	@ 0 "" 2
  71              		.thumb
  72              		.syntax unified
  73              	.L2:
  74              	.LBE212:
  75              	.LBE211:
1947:Drivers/CMSIS/Include/core_cm4.h **** 
1948:Drivers/CMSIS/Include/core_cm4.h ****   for(;;)                                                           /* wait until reset */
  76              		.loc 2 1948 3 discriminator 1 view .LVU12
1949:Drivers/CMSIS/Include/core_cm4.h ****   {
1950:Drivers/CMSIS/Include/core_cm4.h ****     __NOP();
ARM GAS  /tmp/ccXppZcm.s 			page 52


  77              		.loc 2 1950 5 discriminator 1 view .LVU13
  78              		.syntax unified
  79              	@ 1950 "Drivers/CMSIS/Include/core_cm4.h" 1
  80 0016 00BF     		nop
  81              	@ 0 "" 2
1948:Drivers/CMSIS/Include/core_cm4.h ****   {
  82              		.loc 2 1948 3 discriminator 1 view .LVU14
  83              		.thumb
  84              		.syntax unified
  85 0018 FDE7     		b	.L2
  86              	.L4:
  87 001a 00BF     		.align	2
  88              	.L3:
  89 001c 00ED00E0 		.word	-536810240
  90 0020 0400FA05 		.word	100270084
  91              		.cfi_endproc
  92              	.LFE120:
  94              		.section	.text.clearDWTComparators,"ax",%progbits
  95              		.align	1
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
 100              	clearDWTComparators:
 101              	.LFB148:
 102              		.file 4 "mri/architectures/armv7-m/debug_cm3.h"
   1:mri/architectures/armv7-m/debug_cm3.h **** /* Copyright 2020 Adam Green (https://github.com/adamgreen/)
   2:mri/architectures/armv7-m/debug_cm3.h **** 
   3:mri/architectures/armv7-m/debug_cm3.h ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/architectures/armv7-m/debug_cm3.h ****    you may not use this file except in compliance with the License.
   5:mri/architectures/armv7-m/debug_cm3.h ****    You may obtain a copy of the License at
   6:mri/architectures/armv7-m/debug_cm3.h **** 
   7:mri/architectures/armv7-m/debug_cm3.h ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/architectures/armv7-m/debug_cm3.h **** 
   9:mri/architectures/armv7-m/debug_cm3.h ****    Unless required by applicable law or agreed to in writing, software
  10:mri/architectures/armv7-m/debug_cm3.h ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/architectures/armv7-m/debug_cm3.h ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/architectures/armv7-m/debug_cm3.h ****    See the License for the specific language governing permissions and
  13:mri/architectures/armv7-m/debug_cm3.h ****    limitations under the License.
  14:mri/architectures/armv7-m/debug_cm3.h **** */
  15:mri/architectures/armv7-m/debug_cm3.h **** /* Declares registers, bit fields, and inline routines to utilize the debug hardware on the Cortex-
  16:mri/architectures/armv7-m/debug_cm3.h **** #ifndef DEBUG_CM3_H_
  17:mri/architectures/armv7-m/debug_cm3.h **** #define DEBUG_CM3_H_
  18:mri/architectures/armv7-m/debug_cm3.h **** 
  19:mri/architectures/armv7-m/debug_cm3.h **** #include <cmsis.h>
  20:mri/architectures/armv7-m/debug_cm3.h **** #include <stdio.h>
  21:mri/architectures/armv7-m/debug_cm3.h **** #include <core/try_catch.h>
  22:mri/architectures/armv7-m/debug_cm3.h **** 
  23:mri/architectures/armv7-m/debug_cm3.h **** /* Data Watchpoint and Trace Registers */
  24:mri/architectures/armv7-m/debug_cm3.h **** typedef struct
  25:mri/architectures/armv7-m/debug_cm3.h **** {
  26:mri/architectures/armv7-m/debug_cm3.h ****     /* Comparator register. */
  27:mri/architectures/armv7-m/debug_cm3.h ****     __IO uint32_t   COMP;
  28:mri/architectures/armv7-m/debug_cm3.h ****     /* Comparator Mask register. */
  29:mri/architectures/armv7-m/debug_cm3.h ****     __IO uint32_t   MASK;
  30:mri/architectures/armv7-m/debug_cm3.h ****     /* Comparator Function register. */
  31:mri/architectures/armv7-m/debug_cm3.h ****     __IO uint32_t   FUNCTION;
  32:mri/architectures/armv7-m/debug_cm3.h ****     /* Reserved 4 bytes to pad struct size out to 16 bytes. */
ARM GAS  /tmp/ccXppZcm.s 			page 53


  33:mri/architectures/armv7-m/debug_cm3.h ****     __I  uint32_t   Reserved;
  34:mri/architectures/armv7-m/debug_cm3.h **** } DWT_COMP_Type;
  35:mri/architectures/armv7-m/debug_cm3.h **** 
  36:mri/architectures/armv7-m/debug_cm3.h **** /* Flash Patch and Breakpoint Registers */
  37:mri/architectures/armv7-m/debug_cm3.h **** typedef struct
  38:mri/architectures/armv7-m/debug_cm3.h **** {
  39:mri/architectures/armv7-m/debug_cm3.h ****     /* FlashPatch Control Register. */
  40:mri/architectures/armv7-m/debug_cm3.h ****     __IO uint32_t   CTRL;
  41:mri/architectures/armv7-m/debug_cm3.h ****     /* FlashPatch Remap Register. */
  42:mri/architectures/armv7-m/debug_cm3.h ****     __IO uint32_t   REMAP;
  43:mri/architectures/armv7-m/debug_cm3.h **** } FPB_Type;
  44:mri/architectures/armv7-m/debug_cm3.h **** 
  45:mri/architectures/armv7-m/debug_cm3.h **** /* Memory mapping of Cortex-M3 Debug Hardware */
  46:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_BASE   (0xE0001020)
  47:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_ARRAY  ((DWT_COMP_Type*) DWT_COMP_BASE)
  48:mri/architectures/armv7-m/debug_cm3.h **** #define FPB_BASE        (0xE0002000)
  49:mri/architectures/armv7-m/debug_cm3.h **** #define FPB_COMP_BASE   (0xE0002008)
  50:mri/architectures/armv7-m/debug_cm3.h **** #define FPB             ((FPB_Type*) FPB_BASE)
  51:mri/architectures/armv7-m/debug_cm3.h **** #define FPB_COMP_ARRAY  ((uint32_t*) FPB_COMP_BASE)
  52:mri/architectures/armv7-m/debug_cm3.h **** 
  53:mri/architectures/armv7-m/debug_cm3.h **** /* Debug Halting Control and Status Register Bits */
  54:mri/architectures/armv7-m/debug_cm3.h **** /*  Enable halt mode debug.  If set to 1 then JTAG debugging is being used. */
  55:mri/architectures/armv7-m/debug_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN   (1 << 0)
  56:mri/architectures/armv7-m/debug_cm3.h **** 
  57:mri/architectures/armv7-m/debug_cm3.h **** /* Debug Exception and Monitor Control Registers Bits */
  58:mri/architectures/armv7-m/debug_cm3.h **** /*  Global enable for all DWT and ITM features. */
  59:mri/architectures/armv7-m/debug_cm3.h **** #define CoreDebug_DEMCR_TRCENA      (1 << 24)
  60:mri/architectures/armv7-m/debug_cm3.h **** /*  Monitor Single Step.  Set to 1 to single step instruction when exiting monitor. */
  61:mri/architectures/armv7-m/debug_cm3.h **** #define CoreDebug_DEMCR_MON_STEP    (1 << 18)
  62:mri/architectures/armv7-m/debug_cm3.h **** /* Monitor Pending.  Set to 1 to pend a monitor exception. */
  63:mri/architectures/armv7-m/debug_cm3.h **** #define CoreDebug_DEMCR_MON_PEND    (1 << 17)
  64:mri/architectures/armv7-m/debug_cm3.h **** /* Monitor Enable.  Set to 1 to enable the debug monitor exception. */
  65:mri/architectures/armv7-m/debug_cm3.h **** #define CoreDebug_DEMCR_MON_EN      (1 << 16)
  66:mri/architectures/armv7-m/debug_cm3.h **** 
  67:mri/architectures/armv7-m/debug_cm3.h **** /* Debug Fault Status Register Bits.  Clear a bit by writing a 1 to it. */
  68:mri/architectures/armv7-m/debug_cm3.h **** /* Indicates that EDBGRQ was asserted. */
  69:mri/architectures/armv7-m/debug_cm3.h **** #define SCB_DFSR_EXTERNAL     (1 << 4)
  70:mri/architectures/armv7-m/debug_cm3.h **** /* Indicates that a vector catch was triggered. */
  71:mri/architectures/armv7-m/debug_cm3.h **** #define SCB_DFSR_VCATCH       (1 << 3)
  72:mri/architectures/armv7-m/debug_cm3.h **** /* Indicates that a DWT debug event was triggered. */
  73:mri/architectures/armv7-m/debug_cm3.h **** #define SCB_DFSR_DWTTRAP      (1 << 2)
  74:mri/architectures/armv7-m/debug_cm3.h **** /* Indicates a BKPT instruction or FPB match was encountered. */
  75:mri/architectures/armv7-m/debug_cm3.h **** #define SCB_DFSR_BKPT         (1 << 1)
  76:mri/architectures/armv7-m/debug_cm3.h **** /* Indicates that a single step has occurred. */
  77:mri/architectures/armv7-m/debug_cm3.h **** #define SCB_DFSR_HALTED       1
  78:mri/architectures/armv7-m/debug_cm3.h **** 
  79:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isDebuggerAttached(void)
  80:mri/architectures/armv7-m/debug_cm3.h **** {
  81:mri/architectures/armv7-m/debug_cm3.h ****     return (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN);
  82:mri/architectures/armv7-m/debug_cm3.h **** }
  83:mri/architectures/armv7-m/debug_cm3.h **** 
  84:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void waitForDebuggerToDetach(uint32_t timeOut)
  85:mri/architectures/armv7-m/debug_cm3.h **** {
  86:mri/architectures/armv7-m/debug_cm3.h ****     while (timeOut-- > 0 && isDebuggerAttached())
  87:mri/architectures/armv7-m/debug_cm3.h ****     {
  88:mri/architectures/armv7-m/debug_cm3.h ****     }
  89:mri/architectures/armv7-m/debug_cm3.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 54


  90:mri/architectures/armv7-m/debug_cm3.h ****     if (isDebuggerAttached())
  91:mri/architectures/armv7-m/debug_cm3.h ****         __throw(timeoutException);
  92:mri/architectures/armv7-m/debug_cm3.h **** }
  93:mri/architectures/armv7-m/debug_cm3.h **** 
  94:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void enableDebugMonitor()
  95:mri/architectures/armv7-m/debug_cm3.h **** {
  96:mri/architectures/armv7-m/debug_cm3.h ****     CoreDebug->DEMCR |=  CoreDebug_DEMCR_MON_EN;
  97:mri/architectures/armv7-m/debug_cm3.h **** }
  98:mri/architectures/armv7-m/debug_cm3.h **** 
  99:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void enableDWTandITM(void)
 100:mri/architectures/armv7-m/debug_cm3.h **** {
 101:mri/architectures/armv7-m/debug_cm3.h ****     CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA;
 102:mri/architectures/armv7-m/debug_cm3.h **** }
 103:mri/architectures/armv7-m/debug_cm3.h **** 
 104:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void disableDWTandITM(void)
 105:mri/architectures/armv7-m/debug_cm3.h **** {
 106:mri/architectures/armv7-m/debug_cm3.h ****     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA;
 107:mri/architectures/armv7-m/debug_cm3.h **** }
 108:mri/architectures/armv7-m/debug_cm3.h **** 
 109:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void disableSingleStep(void)
 110:mri/architectures/armv7-m/debug_cm3.h **** {
 111:mri/architectures/armv7-m/debug_cm3.h ****     CoreDebug->DEMCR &=  ~CoreDebug_DEMCR_MON_STEP;
 112:mri/architectures/armv7-m/debug_cm3.h **** }
 113:mri/architectures/armv7-m/debug_cm3.h **** 
 114:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void enableSingleStep(void)
 115:mri/architectures/armv7-m/debug_cm3.h **** {
 116:mri/architectures/armv7-m/debug_cm3.h ****     CoreDebug->DEMCR |=  CoreDebug_DEMCR_MON_STEP;
 117:mri/architectures/armv7-m/debug_cm3.h **** }
 118:mri/architectures/armv7-m/debug_cm3.h **** 
 119:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void clearMonitorPending(void)
 120:mri/architectures/armv7-m/debug_cm3.h **** {
 121:mri/architectures/armv7-m/debug_cm3.h ****     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_MON_PEND;
 122:mri/architectures/armv7-m/debug_cm3.h **** }
 123:mri/architectures/armv7-m/debug_cm3.h **** 
 124:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void setMonitorPending(void)
 125:mri/architectures/armv7-m/debug_cm3.h **** {
 126:mri/architectures/armv7-m/debug_cm3.h ****     CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_PEND;
 127:mri/architectures/armv7-m/debug_cm3.h **** }
 128:mri/architectures/armv7-m/debug_cm3.h **** 
 129:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t isMonitorPending(void)
 130:mri/architectures/armv7-m/debug_cm3.h **** {
 131:mri/architectures/armv7-m/debug_cm3.h ****     return CoreDebug->DEMCR & CoreDebug_DEMCR_MON_PEND;
 132:mri/architectures/armv7-m/debug_cm3.h **** }
 133:mri/architectures/armv7-m/debug_cm3.h **** 
 134:mri/architectures/armv7-m/debug_cm3.h **** /* Data Watchpoint and Trace Comparator Function Bits. */
 135:mri/architectures/armv7-m/debug_cm3.h **** /*  Matched.  Read-only.  Set to 1 to indicate that this comparator has been matched.  Cleared on r
 136:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_MATCHED               (1 << 24)
 137:mri/architectures/armv7-m/debug_cm3.h **** /*  Data Address Linked Index 1. */
 138:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_DATAVADDR1            (0xF << 16)
 139:mri/architectures/armv7-m/debug_cm3.h **** /*  Data Address Linked Index 0. */
 140:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_DATAVADDR0            (0xF << 12)
 141:mri/architectures/armv7-m/debug_cm3.h **** /*  Selects size for data value matches. */
 142:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_DATAVSIZE_MASK        (3 << 10)
 143:mri/architectures/armv7-m/debug_cm3.h **** /*      Byte */
 144:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_DATAVSIZE_BYTE        (0 << 10)
 145:mri/architectures/armv7-m/debug_cm3.h **** /*      Halfword */
 146:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_DATAVSIZE_HALFWORD    (1 << 10)
ARM GAS  /tmp/ccXppZcm.s 			page 55


 147:mri/architectures/armv7-m/debug_cm3.h **** /*      Word */
 148:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_DATAVSIZE_WORD        (2 << 10)
 149:mri/architectures/armv7-m/debug_cm3.h **** /*  Data Value Match.  Set to 0 for address compare and 1 for data value compare. */
 150:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_DATAVMATCH            (1 << 8)
 151:mri/architectures/armv7-m/debug_cm3.h **** /*  Cycle Count Match.  Set to 1 for enabling cycle count match and 0 otherwise.  Only valid on com
 152:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_CYCMATCH              (1 << 7)
 153:mri/architectures/armv7-m/debug_cm3.h **** /*  Enable Data Trace Address offset packets.  0 to disable. */
 154:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_EMITRANGE             (1 << 5)
 155:mri/architectures/armv7-m/debug_cm3.h **** /*  Selects action to be taken on match. */
 156:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_FUNCTION_MASK             0xF
 157:mri/architectures/armv7-m/debug_cm3.h **** /*      Disabled */
 158:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_FUNCTION_DISABLED         0x0
 159:mri/architectures/armv7-m/debug_cm3.h **** /*      Instruction Watchpoint */
 160:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_FUNCTION_INSTRUCTION      0x4
 161:mri/architectures/armv7-m/debug_cm3.h **** /*      Data Read Watchpoint */
 162:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_FUNCTION_DATA_READ        0x5
 163:mri/architectures/armv7-m/debug_cm3.h **** /*      Data Write Watchpoint */
 164:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_FUNCTION_DATA_WRITE       0x6
 165:mri/architectures/armv7-m/debug_cm3.h **** /*      Data Read/Write Watchpoint */
 166:mri/architectures/armv7-m/debug_cm3.h **** #define DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE   0x7
 167:mri/architectures/armv7-m/debug_cm3.h **** 
 168:mri/architectures/armv7-m/debug_cm3.h **** /* DWT - Data Watchpoint Trace Routines */
 169:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getDWTComparatorCount(void)
 170:mri/architectures/armv7-m/debug_cm3.h **** {
 171:mri/architectures/armv7-m/debug_cm3.h ****     return (DWT->CTRL >> 28);
 172:mri/architectures/armv7-m/debug_cm3.h **** }
 173:mri/architectures/armv7-m/debug_cm3.h **** 
 174:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void clearDWTComparator(DWT_COMP_Type* pComparatorStruct)
 175:mri/architectures/armv7-m/debug_cm3.h **** {
 176:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->COMP = 0;
 177:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->MASK = 0;
 178:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->FUNCTION &= ~(DWT_COMP_FUNCTION_DATAVMATCH |
 179:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 180:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_EMITRANGE |
 181:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_FUNCTION_MASK);
 182:mri/architectures/armv7-m/debug_cm3.h **** }
 183:mri/architectures/armv7-m/debug_cm3.h **** 
 184:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void clearDWTComparators(void)
 185:mri/architectures/armv7-m/debug_cm3.h **** {
 103              		.loc 4 185 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 186:mri/architectures/armv7-m/debug_cm3.h ****     DWT_COMP_Type*  pComparatorStruct = DWT_COMP_ARRAY;
 108              		.loc 4 186 5 view .LVU16
 109              	.LVL0:
 187:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t        comparatorCount;
 110              		.loc 4 187 5 view .LVU17
 188:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t        i;
 111              		.loc 4 188 5 view .LVU18
 189:mri/architectures/armv7-m/debug_cm3.h **** 
 190:mri/architectures/armv7-m/debug_cm3.h ****     comparatorCount = getDWTComparatorCount();
 112              		.loc 4 190 5 view .LVU19
 113              	.LBB213:
 114              	.LBI213:
 169:mri/architectures/armv7-m/debug_cm3.h **** {
ARM GAS  /tmp/ccXppZcm.s 			page 56


 115              		.loc 4 169 26 view .LVU20
 116              	.LBB214:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 117              		.loc 4 171 5 view .LVU21
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 118              		.loc 4 171 16 is_stmt 0 view .LVU22
 119 0000 094B     		ldr	r3, .L8
 120 0002 1868     		ldr	r0, [r3]
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 121              		.loc 4 171 23 view .LVU23
 122 0004 000F     		lsrs	r0, r0, #28
 123              	.LVL1:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 124              		.loc 4 171 23 view .LVU24
 125              	.LBE214:
 126              	.LBE213:
 191:mri/architectures/armv7-m/debug_cm3.h ****     for (i = 0 ; i < comparatorCount ; i++)
 127              		.loc 4 191 5 is_stmt 1 view .LVU25
 128              		.loc 4 191 12 is_stmt 0 view .LVU26
 129 0006 0021     		movs	r1, #0
 186:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t        comparatorCount;
 130              		.loc 4 186 21 view .LVU27
 131 0008 2033     		adds	r3, r3, #32
 132              		.loc 4 191 5 view .LVU28
 133 000a 0AE0     		b	.L6
 134              	.LVL2:
 135              	.L7:
 192:mri/architectures/armv7-m/debug_cm3.h ****     {
 193:mri/architectures/armv7-m/debug_cm3.h ****         clearDWTComparator(pComparatorStruct);
 136              		.loc 4 193 9 is_stmt 1 view .LVU29
 137              	.LBB215:
 138              	.LBI215:
 174:mri/architectures/armv7-m/debug_cm3.h **** {
 139              		.loc 4 174 22 view .LVU30
 140              	.LBB216:
 176:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->MASK = 0;
 141              		.loc 4 176 5 view .LVU31
 176:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->MASK = 0;
 142              		.loc 4 176 29 is_stmt 0 view .LVU32
 143 000c 0022     		movs	r2, #0
 144 000e 1A60     		str	r2, [r3]
 177:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->FUNCTION &= ~(DWT_COMP_FUNCTION_DATAVMATCH |
 145              		.loc 4 177 5 is_stmt 1 view .LVU33
 177:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->FUNCTION &= ~(DWT_COMP_FUNCTION_DATAVMATCH |
 146              		.loc 4 177 29 is_stmt 0 view .LVU34
 147 0010 5A60     		str	r2, [r3, #4]
 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 148              		.loc 4 178 5 is_stmt 1 view .LVU35
 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 149              		.loc 4 178 22 is_stmt 0 view .LVU36
 150 0012 9A68     		ldr	r2, [r3, #8]
 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 151              		.loc 4 178 33 view .LVU37
 152 0014 22F4D772 		bic	r2, r2, #430
 153 0018 22F00102 		bic	r2, r2, #1
 154 001c 9A60     		str	r2, [r3, #8]
 155              	.LVL3:
ARM GAS  /tmp/ccXppZcm.s 			page 57


 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 156              		.loc 4 178 33 view .LVU38
 157              	.LBE216:
 158              	.LBE215:
 194:mri/architectures/armv7-m/debug_cm3.h ****         pComparatorStruct++;
 159              		.loc 4 194 9 is_stmt 1 view .LVU39
 160              		.loc 4 194 26 is_stmt 0 view .LVU40
 161 001e 1033     		adds	r3, r3, #16
 162              	.LVL4:
 191:mri/architectures/armv7-m/debug_cm3.h ****     {
 163              		.loc 4 191 41 is_stmt 1 view .LVU41
 164 0020 0131     		adds	r1, r1, #1
 165              	.LVL5:
 166              	.L6:
 191:mri/architectures/armv7-m/debug_cm3.h ****     {
 167              		.loc 4 191 20 discriminator 1 view .LVU42
 168 0022 8142     		cmp	r1, r0
 169 0024 F2D3     		bcc	.L7
 195:mri/architectures/armv7-m/debug_cm3.h ****     }
 196:mri/architectures/armv7-m/debug_cm3.h **** }
 170              		.loc 4 196 1 is_stmt 0 view .LVU43
 171 0026 7047     		bx	lr
 172              	.L9:
 173              		.align	2
 174              	.L8:
 175 0028 001000E0 		.word	-536866816
 176              		.cfi_endproc
 177              	.LFE148:
 179              		.section	.text.doesDWTComparatorMatch,"ax",%progbits
 180              		.align	1
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	doesDWTComparatorMatch:
 186              	.LVL6:
 187              	.LFB155:
 197:mri/architectures/armv7-m/debug_cm3.h **** 
 198:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void initDWT(void)
 199:mri/architectures/armv7-m/debug_cm3.h **** {
 200:mri/architectures/armv7-m/debug_cm3.h ****     clearDWTComparators();
 201:mri/architectures/armv7-m/debug_cm3.h **** }
 202:mri/architectures/armv7-m/debug_cm3.h **** 
 203:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t maskOffDWTFunctionBits(uint32_t functionValue)
 204:mri/architectures/armv7-m/debug_cm3.h **** {
 205:mri/architectures/armv7-m/debug_cm3.h ****     return functionValue & (DWT_COMP_FUNCTION_DATAVADDR1 |
 206:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_DATAVADDR0 |
 207:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_DATAVSIZE_MASK |
 208:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_DATAVMATCH |
 209:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_CYCMATCH |
 210:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_EMITRANGE |
 211:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_FUNCTION_MASK);
 212:mri/architectures/armv7-m/debug_cm3.h **** 
 213:mri/architectures/armv7-m/debug_cm3.h **** }
 214:mri/architectures/armv7-m/debug_cm3.h **** 
 215:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int doesDWTComparatorAddressMatch(DWT_COMP_Type* pComparator, uint32_t address)
 216:mri/architectures/armv7-m/debug_cm3.h **** {
 217:mri/architectures/armv7-m/debug_cm3.h ****     return pComparator->COMP == address;
ARM GAS  /tmp/ccXppZcm.s 			page 58


 218:mri/architectures/armv7-m/debug_cm3.h **** }
 219:mri/architectures/armv7-m/debug_cm3.h **** 
 220:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t calculateLog2(uint32_t value)
 221:mri/architectures/armv7-m/debug_cm3.h **** {
 222:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t log2 = 0;
 223:mri/architectures/armv7-m/debug_cm3.h **** 
 224:mri/architectures/armv7-m/debug_cm3.h ****     while (value > 1)
 225:mri/architectures/armv7-m/debug_cm3.h ****     {
 226:mri/architectures/armv7-m/debug_cm3.h ****         value >>= 1;
 227:mri/architectures/armv7-m/debug_cm3.h ****         log2++;
 228:mri/architectures/armv7-m/debug_cm3.h ****     }
 229:mri/architectures/armv7-m/debug_cm3.h **** 
 230:mri/architectures/armv7-m/debug_cm3.h ****     return log2;
 231:mri/architectures/armv7-m/debug_cm3.h **** }
 232:mri/architectures/armv7-m/debug_cm3.h **** 
 233:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int doesDWTComparatorMaskMatch(DWT_COMP_Type* pComparator, uint32_t size)
 234:mri/architectures/armv7-m/debug_cm3.h **** {
 235:mri/architectures/armv7-m/debug_cm3.h ****     return pComparator->MASK == calculateLog2(size);
 236:mri/architectures/armv7-m/debug_cm3.h **** }
 237:mri/architectures/armv7-m/debug_cm3.h **** 
 238:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int doesDWTComparatorFunctionMatch(DWT_COMP_Type* pComparator, uint32_t function)
 239:mri/architectures/armv7-m/debug_cm3.h **** {
 240:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t importantFunctionBits = maskOffDWTFunctionBits(pComparator->FUNCTION);
 241:mri/architectures/armv7-m/debug_cm3.h **** 
 242:mri/architectures/armv7-m/debug_cm3.h ****     return importantFunctionBits == function;
 243:mri/architectures/armv7-m/debug_cm3.h **** }
 244:mri/architectures/armv7-m/debug_cm3.h **** 
 245:mri/architectures/armv7-m/debug_cm3.h **** 
 246:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int doesDWTComparatorMatch(DWT_COMP_Type* pComparator,
 247:mri/architectures/armv7-m/debug_cm3.h ****                                            uint32_t       address,
 248:mri/architectures/armv7-m/debug_cm3.h ****                                            uint32_t       size,
 249:mri/architectures/armv7-m/debug_cm3.h ****                                            uint32_t       function)
 250:mri/architectures/armv7-m/debug_cm3.h **** {
 188              		.loc 4 250 1 is_stmt 1 view -0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193              		.loc 4 250 1 is_stmt 0 view .LVU45
 194 0000 30B4     		push	{r4, r5}
 195              	.LCFI0:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 4, -8
 198              		.cfi_offset 5, -4
 251:mri/architectures/armv7-m/debug_cm3.h ****     return doesDWTComparatorFunctionMatch(pComparator, function) &&
 199              		.loc 4 251 5 is_stmt 1 view .LVU46
 200              	.LVL7:
 201              	.LBB217:
 202              	.LBI217:
 238:mri/architectures/armv7-m/debug_cm3.h **** {
 203              		.loc 4 238 21 view .LVU47
 204              	.LBB218:
 240:mri/architectures/armv7-m/debug_cm3.h **** 
 205              		.loc 4 240 5 view .LVU48
 240:mri/architectures/armv7-m/debug_cm3.h **** 
 206              		.loc 4 240 72 is_stmt 0 view .LVU49
 207 0002 8568     		ldr	r5, [r0, #8]
ARM GAS  /tmp/ccXppZcm.s 			page 59


 208              	.LVL8:
 209              	.LBB219:
 210              	.LBI219:
 203:mri/architectures/armv7-m/debug_cm3.h **** {
 211              		.loc 4 203 26 is_stmt 1 view .LVU50
 212              	.LBB220:
 205:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_DATAVADDR0 |
 213              		.loc 4 205 5 view .LVU51
 205:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_DATAVADDR0 |
 214              		.loc 4 205 26 is_stmt 0 view .LVU52
 215 0004 0C4C     		ldr	r4, .L21
 216 0006 2C40     		ands	r4, r4, r5
 217              	.LVL9:
 205:mri/architectures/armv7-m/debug_cm3.h ****                             DWT_COMP_FUNCTION_DATAVADDR0 |
 218              		.loc 4 205 26 view .LVU53
 219              	.LBE220:
 220              	.LBE219:
 242:mri/architectures/armv7-m/debug_cm3.h **** }
 221              		.loc 4 242 5 is_stmt 1 view .LVU54
 242:mri/architectures/armv7-m/debug_cm3.h **** }
 222              		.loc 4 242 5 is_stmt 0 view .LVU55
 223              	.LBE218:
 224              	.LBE217:
 252:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorAddressMatch(pComparator, address) &&
 225              		.loc 4 252 64 view .LVU56
 226 0008 A342     		cmp	r3, r4
 227 000a 02D0     		beq	.L18
 228 000c 0020     		movs	r0, #0
 229              	.LVL10:
 230              	.L10:
 253:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorMaskMatch(pComparator, size);
 254:mri/architectures/armv7-m/debug_cm3.h **** }
 231              		.loc 4 254 1 view .LVU57
 232 000e 30BC     		pop	{r4, r5}
 233              	.LCFI1:
 234              		.cfi_remember_state
 235              		.cfi_restore 5
 236              		.cfi_restore 4
 237              		.cfi_def_cfa_offset 0
 238              	.LVL11:
 239              		.loc 4 254 1 view .LVU58
 240 0010 7047     		bx	lr
 241              	.LVL12:
 242              	.L18:
 243              	.LCFI2:
 244              		.cfi_restore_state
 245              	.LBB221:
 246              	.LBI221:
 215:mri/architectures/armv7-m/debug_cm3.h **** {
 247              		.loc 4 215 21 is_stmt 1 view .LVU59
 248              	.LBB222:
 217:mri/architectures/armv7-m/debug_cm3.h **** }
 249              		.loc 4 217 5 view .LVU60
 217:mri/architectures/armv7-m/debug_cm3.h **** }
 250              		.loc 4 217 23 is_stmt 0 view .LVU61
 251 0012 0368     		ldr	r3, [r0]
 252              	.LVL13:
ARM GAS  /tmp/ccXppZcm.s 			page 60


 217:mri/architectures/armv7-m/debug_cm3.h **** }
 253              		.loc 4 217 23 view .LVU62
 254              	.LBE222:
 255              	.LBE221:
 251:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorAddressMatch(pComparator, address) &&
 256              		.loc 4 251 66 view .LVU63
 257 0014 9942     		cmp	r1, r3
 258 0016 01D0     		beq	.L19
 252:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorMaskMatch(pComparator, size);
 259              		.loc 4 252 64 view .LVU64
 260 0018 0020     		movs	r0, #0
 261              	.LVL14:
 252:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorMaskMatch(pComparator, size);
 262              		.loc 4 252 64 view .LVU65
 263 001a F8E7     		b	.L10
 264              	.LVL15:
 265              	.L19:
 266              	.LBB223:
 267              	.LBI223:
 233:mri/architectures/armv7-m/debug_cm3.h **** {
 268              		.loc 4 233 21 is_stmt 1 view .LVU66
 269              	.LBB224:
 235:mri/architectures/armv7-m/debug_cm3.h **** }
 270              		.loc 4 235 5 view .LVU67
 235:mri/architectures/armv7-m/debug_cm3.h **** }
 271              		.loc 4 235 23 is_stmt 0 view .LVU68
 272 001c 4168     		ldr	r1, [r0, #4]
 273              	.LVL16:
 274              	.LBB225:
 275              	.LBI225:
 220:mri/architectures/armv7-m/debug_cm3.h **** {
 276              		.loc 4 220 26 is_stmt 1 view .LVU69
 277              	.LBB226:
 222:mri/architectures/armv7-m/debug_cm3.h **** 
 278              		.loc 4 222 5 view .LVU70
 224:mri/architectures/armv7-m/debug_cm3.h ****     {
 279              		.loc 4 224 5 view .LVU71
 222:mri/architectures/armv7-m/debug_cm3.h **** 
 280              		.loc 4 222 14 is_stmt 0 view .LVU72
 281 001e 0023     		movs	r3, #0
 224:mri/architectures/armv7-m/debug_cm3.h ****     {
 282              		.loc 4 224 11 view .LVU73
 283 0020 01E0     		b	.L12
 284              	.LVL17:
 285              	.L13:
 226:mri/architectures/armv7-m/debug_cm3.h ****         log2++;
 286              		.loc 4 226 9 is_stmt 1 view .LVU74
 226:mri/architectures/armv7-m/debug_cm3.h ****         log2++;
 287              		.loc 4 226 15 is_stmt 0 view .LVU75
 288 0022 5208     		lsrs	r2, r2, #1
 289              	.LVL18:
 227:mri/architectures/armv7-m/debug_cm3.h ****     }
 290              		.loc 4 227 9 is_stmt 1 view .LVU76
 227:mri/architectures/armv7-m/debug_cm3.h ****     }
 291              		.loc 4 227 13 is_stmt 0 view .LVU77
 292 0024 0133     		adds	r3, r3, #1
 293              	.LVL19:
ARM GAS  /tmp/ccXppZcm.s 			page 61


 294              	.L12:
 224:mri/architectures/armv7-m/debug_cm3.h ****     {
 295              		.loc 4 224 18 is_stmt 1 view .LVU78
 296 0026 012A     		cmp	r2, #1
 297 0028 FBD8     		bhi	.L13
 230:mri/architectures/armv7-m/debug_cm3.h **** }
 298              		.loc 4 230 5 view .LVU79
 299              	.LVL20:
 230:mri/architectures/armv7-m/debug_cm3.h **** }
 300              		.loc 4 230 5 is_stmt 0 view .LVU80
 301              	.LBE226:
 302              	.LBE225:
 303              	.LBE224:
 304              	.LBE223:
 252:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorMaskMatch(pComparator, size);
 305              		.loc 4 252 64 view .LVU81
 306 002a 9942     		cmp	r1, r3
 307 002c 01D0     		beq	.L20
 308 002e 0020     		movs	r0, #0
 309              	.LVL21:
 252:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorMaskMatch(pComparator, size);
 310              		.loc 4 252 64 view .LVU82
 311 0030 EDE7     		b	.L10
 312              	.LVL22:
 313              	.L20:
 252:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorMaskMatch(pComparator, size);
 314              		.loc 4 252 64 view .LVU83
 315 0032 0120     		movs	r0, #1
 316              	.LVL23:
 252:mri/architectures/armv7-m/debug_cm3.h ****            doesDWTComparatorMaskMatch(pComparator, size);
 317              		.loc 4 252 64 view .LVU84
 318 0034 EBE7     		b	.L10
 319              	.L22:
 320 0036 00BF     		.align	2
 321              	.L21:
 322 0038 AFFD0F00 		.word	1047983
 323              		.cfi_endproc
 324              	.LFE155:
 326              		.section	.text.findDWTComparator,"ax",%progbits
 327              		.align	1
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 332              	findDWTComparator:
 333              	.LVL24:
 334              	.LFB156:
 255:mri/architectures/armv7-m/debug_cm3.h **** 
 256:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE DWT_COMP_Type* findDWTComparator(uint32_t watchpointAddress,
 257:mri/architectures/armv7-m/debug_cm3.h ****                                                  uint32_t watchpointSize,
 258:mri/architectures/armv7-m/debug_cm3.h ****                                                  uint32_t watchpointType)
 259:mri/architectures/armv7-m/debug_cm3.h **** {
 335              		.loc 4 259 1 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		.loc 4 259 1 is_stmt 0 view .LVU86
 340 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/ccXppZcm.s 			page 62


 341              	.LCFI3:
 342              		.cfi_def_cfa_offset 32
 343              		.cfi_offset 3, -32
 344              		.cfi_offset 4, -28
 345              		.cfi_offset 5, -24
 346              		.cfi_offset 6, -20
 347              		.cfi_offset 7, -16
 348              		.cfi_offset 8, -12
 349              		.cfi_offset 9, -8
 350              		.cfi_offset 14, -4
 351 0004 8146     		mov	r9, r0
 352 0006 8846     		mov	r8, r1
 353 0008 1746     		mov	r7, r2
 260:mri/architectures/armv7-m/debug_cm3.h ****     DWT_COMP_Type* pCurrentComparator = DWT_COMP_ARRAY;
 354              		.loc 4 260 5 is_stmt 1 view .LVU87
 355              	.LVL25:
 261:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t       comparatorCount;
 356              		.loc 4 261 5 view .LVU88
 262:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t       i;
 357              		.loc 4 262 5 view .LVU89
 263:mri/architectures/armv7-m/debug_cm3.h **** 
 264:mri/architectures/armv7-m/debug_cm3.h ****     comparatorCount = getDWTComparatorCount();
 358              		.loc 4 264 5 view .LVU90
 359              	.LBB227:
 360              	.LBI227:
 169:mri/architectures/armv7-m/debug_cm3.h **** {
 361              		.loc 4 169 26 view .LVU91
 362              	.LBB228:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 363              		.loc 4 171 5 view .LVU92
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 364              		.loc 4 171 16 is_stmt 0 view .LVU93
 365 000a 0B4B     		ldr	r3, .L30
 366 000c 1E68     		ldr	r6, [r3]
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 367              		.loc 4 171 23 view .LVU94
 368 000e 360F     		lsrs	r6, r6, #28
 369              	.LVL26:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 370              		.loc 4 171 23 view .LVU95
 371              	.LBE228:
 372              	.LBE227:
 265:mri/architectures/armv7-m/debug_cm3.h ****     for (i = 0 ; i < comparatorCount ; i++)
 373              		.loc 4 265 5 is_stmt 1 view .LVU96
 374              		.loc 4 265 12 is_stmt 0 view .LVU97
 375 0010 0025     		movs	r5, #0
 260:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t       comparatorCount;
 376              		.loc 4 260 20 view .LVU98
 377 0012 0A4C     		ldr	r4, .L30+4
 378              		.loc 4 265 5 view .LVU99
 379 0014 01E0     		b	.L24
 380              	.LVL27:
 381              	.L29:
 266:mri/architectures/armv7-m/debug_cm3.h ****     {
 267:mri/architectures/armv7-m/debug_cm3.h ****         if (doesDWTComparatorMatch(pCurrentComparator, watchpointAddress, watchpointSize, watchpoin
 268:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 269:mri/architectures/armv7-m/debug_cm3.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 63


 270:mri/architectures/armv7-m/debug_cm3.h ****         pCurrentComparator++;
 382              		.loc 4 270 9 is_stmt 1 discriminator 2 view .LVU100
 383              		.loc 4 270 27 is_stmt 0 discriminator 2 view .LVU101
 384 0016 1034     		adds	r4, r4, #16
 385              	.LVL28:
 265:mri/architectures/armv7-m/debug_cm3.h ****     {
 386              		.loc 4 265 41 is_stmt 1 discriminator 2 view .LVU102
 387 0018 0135     		adds	r5, r5, #1
 388              	.LVL29:
 389              	.L24:
 265:mri/architectures/armv7-m/debug_cm3.h ****     {
 390              		.loc 4 265 20 discriminator 1 view .LVU103
 391 001a B542     		cmp	r5, r6
 392 001c 08D2     		bcs	.L28
 267:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 393              		.loc 4 267 9 view .LVU104
 267:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 394              		.loc 4 267 13 is_stmt 0 view .LVU105
 395 001e 3B46     		mov	r3, r7
 396 0020 4246     		mov	r2, r8
 397 0022 4946     		mov	r1, r9
 398 0024 2046     		mov	r0, r4
 399 0026 FFF7FEFF 		bl	doesDWTComparatorMatch
 400              	.LVL30:
 267:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 401              		.loc 4 267 12 view .LVU106
 402 002a 0028     		cmp	r0, #0
 403 002c F3D0     		beq	.L29
 404 002e 00E0     		b	.L23
 405              	.L28:
 271:mri/architectures/armv7-m/debug_cm3.h ****     }
 272:mri/architectures/armv7-m/debug_cm3.h **** 
 273:mri/architectures/armv7-m/debug_cm3.h ****     /* Return NULL if no DWT comparator is already enabled for this watchpoint. */
 274:mri/architectures/armv7-m/debug_cm3.h ****     return NULL;
 406              		.loc 4 274 12 view .LVU107
 407 0030 0024     		movs	r4, #0
 408              	.LVL31:
 409              	.L23:
 275:mri/architectures/armv7-m/debug_cm3.h **** }
 410              		.loc 4 275 1 view .LVU108
 411 0032 2046     		mov	r0, r4
 412 0034 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 413              	.LVL32:
 414              	.L31:
 415              		.loc 4 275 1 view .LVU109
 416              		.align	2
 417              	.L30:
 418 0038 001000E0 		.word	-536866816
 419 003c 201000E0 		.word	-536866784
 420              		.cfi_endproc
 421              	.LFE156:
 423              		.section	.text.findFreeDWTComparator,"ax",%progbits
 424              		.align	1
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 429              	findFreeDWTComparator:
ARM GAS  /tmp/ccXppZcm.s 			page 64


 430              	.LFB158:
 276:mri/architectures/armv7-m/debug_cm3.h **** 
 277:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isDWTComparatorFree(DWT_COMP_Type* pComparator)
 278:mri/architectures/armv7-m/debug_cm3.h **** {
 279:mri/architectures/armv7-m/debug_cm3.h ****     return (pComparator->FUNCTION & DWT_COMP_FUNCTION_FUNCTION_MASK) == DWT_COMP_FUNCTION_FUNCTION_
 280:mri/architectures/armv7-m/debug_cm3.h **** }
 281:mri/architectures/armv7-m/debug_cm3.h **** 
 282:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE DWT_COMP_Type* findFreeDWTComparator(void)
 283:mri/architectures/armv7-m/debug_cm3.h **** {
 431              		.loc 4 283 1 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 284:mri/architectures/armv7-m/debug_cm3.h ****     DWT_COMP_Type* pCurrentComparator = DWT_COMP_ARRAY;
 436              		.loc 4 284 5 view .LVU111
 437              	.LVL33:
 285:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t       comparatorCount;
 438              		.loc 4 285 5 view .LVU112
 286:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t       i;
 439              		.loc 4 286 5 view .LVU113
 287:mri/architectures/armv7-m/debug_cm3.h **** 
 288:mri/architectures/armv7-m/debug_cm3.h ****     comparatorCount = getDWTComparatorCount();
 440              		.loc 4 288 5 view .LVU114
 441              	.LBB229:
 442              	.LBI229:
 169:mri/architectures/armv7-m/debug_cm3.h **** {
 443              		.loc 4 169 26 view .LVU115
 444              	.LBB230:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 445              		.loc 4 171 5 view .LVU116
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 446              		.loc 4 171 16 is_stmt 0 view .LVU117
 447 0000 084B     		ldr	r3, .L38
 448 0002 1968     		ldr	r1, [r3]
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 449              		.loc 4 171 23 view .LVU118
 450 0004 090F     		lsrs	r1, r1, #28
 451              	.LVL34:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 452              		.loc 4 171 23 view .LVU119
 453              	.LBE230:
 454              	.LBE229:
 289:mri/architectures/armv7-m/debug_cm3.h ****     for (i = 0 ; i < comparatorCount ; i++)
 455              		.loc 4 289 5 is_stmt 1 view .LVU120
 456              		.loc 4 289 12 is_stmt 0 view .LVU121
 457 0006 0023     		movs	r3, #0
 284:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t       comparatorCount;
 458              		.loc 4 284 20 view .LVU122
 459 0008 0748     		ldr	r0, .L38+4
 460              		.loc 4 289 5 view .LVU123
 461 000a 01E0     		b	.L33
 462              	.LVL35:
 463              	.L37:
 290:mri/architectures/armv7-m/debug_cm3.h ****     {
 291:mri/architectures/armv7-m/debug_cm3.h ****         if (isDWTComparatorFree(pCurrentComparator))
 292:mri/architectures/armv7-m/debug_cm3.h ****         {
ARM GAS  /tmp/ccXppZcm.s 			page 65


 293:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 294:mri/architectures/armv7-m/debug_cm3.h ****         }
 295:mri/architectures/armv7-m/debug_cm3.h ****         pCurrentComparator++;
 464              		.loc 4 295 9 is_stmt 1 discriminator 2 view .LVU124
 465              		.loc 4 295 27 is_stmt 0 discriminator 2 view .LVU125
 466 000c 1030     		adds	r0, r0, #16
 467              	.LVL36:
 289:mri/architectures/armv7-m/debug_cm3.h ****     {
 468              		.loc 4 289 41 is_stmt 1 discriminator 2 view .LVU126
 469 000e 0133     		adds	r3, r3, #1
 470              	.LVL37:
 471              	.L33:
 289:mri/architectures/armv7-m/debug_cm3.h ****     {
 472              		.loc 4 289 20 discriminator 1 view .LVU127
 473 0010 8B42     		cmp	r3, r1
 474 0012 04D2     		bcs	.L36
 291:mri/architectures/armv7-m/debug_cm3.h ****         {
 475              		.loc 4 291 9 view .LVU128
 476              	.LVL38:
 477              	.LBB231:
 478              	.LBI231:
 277:mri/architectures/armv7-m/debug_cm3.h **** {
 479              		.loc 4 277 21 view .LVU129
 480              	.LBB232:
 279:mri/architectures/armv7-m/debug_cm3.h **** }
 481              		.loc 4 279 5 view .LVU130
 279:mri/architectures/armv7-m/debug_cm3.h **** }
 482              		.loc 4 279 24 is_stmt 0 view .LVU131
 483 0014 8268     		ldr	r2, [r0, #8]
 484              	.LVL39:
 279:mri/architectures/armv7-m/debug_cm3.h **** }
 485              		.loc 4 279 24 view .LVU132
 486              	.LBE232:
 487              	.LBE231:
 291:mri/architectures/armv7-m/debug_cm3.h ****         {
 488              		.loc 4 291 12 view .LVU133
 489 0016 12F00F0F 		tst	r2, #15
 490 001a F7D1     		bne	.L37
 491 001c 00E0     		b	.L32
 492              	.L36:
 296:mri/architectures/armv7-m/debug_cm3.h ****     }
 297:mri/architectures/armv7-m/debug_cm3.h **** 
 298:mri/architectures/armv7-m/debug_cm3.h ****     /* Return NULL if there are no free DWT comparators. */
 299:mri/architectures/armv7-m/debug_cm3.h ****     return NULL;
 493              		.loc 4 299 12 view .LVU134
 494 001e 0020     		movs	r0, #0
 495              	.LVL40:
 496              	.L32:
 300:mri/architectures/armv7-m/debug_cm3.h **** }
 497              		.loc 4 300 1 view .LVU135
 498 0020 7047     		bx	lr
 499              	.L39:
 500 0022 00BF     		.align	2
 501              	.L38:
 502 0024 001000E0 		.word	-536866816
 503 0028 201000E0 		.word	-536866784
 504              		.cfi_endproc
ARM GAS  /tmp/ccXppZcm.s 			page 66


 505              	.LFE158:
 507              		.section	.text.enableDWTWatchpoint,"ax",%progbits
 508              		.align	1
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 513              	enableDWTWatchpoint:
 514              	.LVL41:
 515              	.LFB167:
 301:mri/architectures/armv7-m/debug_cm3.h **** 
 302:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isPowerOf2(uint32_t value)
 303:mri/architectures/armv7-m/debug_cm3.h **** {
 304:mri/architectures/armv7-m/debug_cm3.h ****     return (value & (value - 1)) == 0;
 305:mri/architectures/armv7-m/debug_cm3.h **** }
 306:mri/architectures/armv7-m/debug_cm3.h **** 
 307:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isAddressAlignedToSize(uint32_t address, uint32_t size)
 308:mri/architectures/armv7-m/debug_cm3.h **** {
 309:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t addressMask = ~(size - 1);
 310:mri/architectures/armv7-m/debug_cm3.h ****     return address == (address & addressMask);
 311:mri/architectures/armv7-m/debug_cm3.h **** }
 312:mri/architectures/armv7-m/debug_cm3.h **** 
 313:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isValidDWTComparatorSize(uint32_t watchpointSize)
 314:mri/architectures/armv7-m/debug_cm3.h **** {
 315:mri/architectures/armv7-m/debug_cm3.h ****     return isPowerOf2(watchpointSize);
 316:mri/architectures/armv7-m/debug_cm3.h **** }
 317:mri/architectures/armv7-m/debug_cm3.h **** 
 318:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isValidDWTComparatorAddress(uint32_t watchpointAddress, uint32_t watchpointSize
 319:mri/architectures/armv7-m/debug_cm3.h **** {
 320:mri/architectures/armv7-m/debug_cm3.h ****     return isAddressAlignedToSize(watchpointAddress, watchpointSize);
 321:mri/architectures/armv7-m/debug_cm3.h **** }
 322:mri/architectures/armv7-m/debug_cm3.h **** 
 323:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isValidDWTComparatorType(uint32_t watchpointType)
 324:mri/architectures/armv7-m/debug_cm3.h **** {
 325:mri/architectures/armv7-m/debug_cm3.h ****     return (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_READ) ||
 326:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_WRITE) ||
 327:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE);
 328:mri/architectures/armv7-m/debug_cm3.h **** }
 329:mri/architectures/armv7-m/debug_cm3.h **** 
 330:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isValidDWTComparatorSetting(uint32_t watchpointAddress,
 331:mri/architectures/armv7-m/debug_cm3.h ****                                                 uint32_t watchpointSize,
 332:mri/architectures/armv7-m/debug_cm3.h ****                                                 uint32_t watchpointType)
 333:mri/architectures/armv7-m/debug_cm3.h **** {
 334:mri/architectures/armv7-m/debug_cm3.h ****     return isValidDWTComparatorSize(watchpointSize) &&
 335:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorAddress(watchpointAddress, watchpointSize) &&
 336:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorType(watchpointType);
 337:mri/architectures/armv7-m/debug_cm3.h **** }
 338:mri/architectures/armv7-m/debug_cm3.h **** 
 339:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int attemptToSetDWTComparatorMask(DWT_COMP_Type* pComparator, uint32_t watchpointSi
 340:mri/architectures/armv7-m/debug_cm3.h **** {
 341:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t maskBitCount;
 342:mri/architectures/armv7-m/debug_cm3.h **** 
 343:mri/architectures/armv7-m/debug_cm3.h ****     maskBitCount = calculateLog2(watchpointSize);
 344:mri/architectures/armv7-m/debug_cm3.h ****     pComparator->MASK = maskBitCount;
 345:mri/architectures/armv7-m/debug_cm3.h **** 
 346:mri/architectures/armv7-m/debug_cm3.h ****     /* Processor may limit number of bits to be masked off so check. */
 347:mri/architectures/armv7-m/debug_cm3.h ****     return pComparator->MASK == maskBitCount;
 348:mri/architectures/armv7-m/debug_cm3.h **** }
ARM GAS  /tmp/ccXppZcm.s 			page 67


 349:mri/architectures/armv7-m/debug_cm3.h **** 
 350:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int attemptToSetDWTComparator(DWT_COMP_Type* pComparator,
 351:mri/architectures/armv7-m/debug_cm3.h ****                                               uint32_t       watchpointAddress,
 352:mri/architectures/armv7-m/debug_cm3.h ****                                               uint32_t       watchpointSize,
 353:mri/architectures/armv7-m/debug_cm3.h ****                                               uint32_t       watchpointType)
 354:mri/architectures/armv7-m/debug_cm3.h **** {
 355:mri/architectures/armv7-m/debug_cm3.h ****     if (!attemptToSetDWTComparatorMask(pComparator, watchpointSize))
 356:mri/architectures/armv7-m/debug_cm3.h ****         return 0;
 357:mri/architectures/armv7-m/debug_cm3.h **** 
 358:mri/architectures/armv7-m/debug_cm3.h ****     pComparator->COMP = watchpointAddress;
 359:mri/architectures/armv7-m/debug_cm3.h ****     pComparator->FUNCTION = watchpointType;
 360:mri/architectures/armv7-m/debug_cm3.h ****     return 1;
 361:mri/architectures/armv7-m/debug_cm3.h **** }
 362:mri/architectures/armv7-m/debug_cm3.h **** 
 363:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE DWT_COMP_Type* enableDWTWatchpoint(uint32_t watchpointAddress,
 364:mri/architectures/armv7-m/debug_cm3.h ****                                                    uint32_t watchpointSize,
 365:mri/architectures/armv7-m/debug_cm3.h ****                                                    uint32_t watchpointType)
 366:mri/architectures/armv7-m/debug_cm3.h **** {
 516              		.loc 4 366 1 is_stmt 1 view -0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 0
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 520              		.loc 4 366 1 is_stmt 0 view .LVU137
 521 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 522              	.LCFI4:
 523              		.cfi_def_cfa_offset 24
 524              		.cfi_offset 3, -24
 525              		.cfi_offset 4, -20
 526              		.cfi_offset 5, -16
 527              		.cfi_offset 6, -12
 528              		.cfi_offset 7, -8
 529              		.cfi_offset 14, -4
 530 0002 0746     		mov	r7, r0
 531 0004 0C46     		mov	r4, r1
 532 0006 1646     		mov	r6, r2
 367:mri/architectures/armv7-m/debug_cm3.h ****     DWT_COMP_Type* pComparator = NULL;
 533              		.loc 4 367 5 is_stmt 1 view .LVU138
 534              	.LVL42:
 368:mri/architectures/armv7-m/debug_cm3.h **** 
 369:mri/architectures/armv7-m/debug_cm3.h ****     pComparator = findDWTComparator(watchpointAddress, watchpointSize, watchpointType);
 535              		.loc 4 369 5 view .LVU139
 536              		.loc 4 369 19 is_stmt 0 view .LVU140
 537 0008 FFF7FEFF 		bl	findDWTComparator
 538              	.LVL43:
 370:mri/architectures/armv7-m/debug_cm3.h ****     if (pComparator)
 539              		.loc 4 370 5 is_stmt 1 view .LVU141
 540              		.loc 4 370 8 is_stmt 0 view .LVU142
 541 000c 0546     		mov	r5, r0
 542 000e 08B1     		cbz	r0, .L46
 543              	.LVL44:
 544              	.L40:
 371:mri/architectures/armv7-m/debug_cm3.h ****     {
 372:mri/architectures/armv7-m/debug_cm3.h ****         /* This watchpoint has already been set so return a pointer to it. */
 373:mri/architectures/armv7-m/debug_cm3.h ****         return pComparator;
 374:mri/architectures/armv7-m/debug_cm3.h ****     }
 375:mri/architectures/armv7-m/debug_cm3.h **** 
 376:mri/architectures/armv7-m/debug_cm3.h ****     pComparator = findFreeDWTComparator();
ARM GAS  /tmp/ccXppZcm.s 			page 68


 377:mri/architectures/armv7-m/debug_cm3.h ****     if (!pComparator)
 378:mri/architectures/armv7-m/debug_cm3.h ****     {
 379:mri/architectures/armv7-m/debug_cm3.h ****         /* There are no free comparators left. */
 380:mri/architectures/armv7-m/debug_cm3.h ****         return NULL;
 381:mri/architectures/armv7-m/debug_cm3.h ****     }
 382:mri/architectures/armv7-m/debug_cm3.h **** 
 383:mri/architectures/armv7-m/debug_cm3.h ****     if (!attemptToSetDWTComparator(pComparator, watchpointAddress, watchpointSize, watchpointType))
 384:mri/architectures/armv7-m/debug_cm3.h ****     {
 385:mri/architectures/armv7-m/debug_cm3.h ****         /* Failed set due to the size being larger than supported by CPU. */
 386:mri/architectures/armv7-m/debug_cm3.h ****         return NULL;
 387:mri/architectures/armv7-m/debug_cm3.h ****     }
 388:mri/architectures/armv7-m/debug_cm3.h **** 
 389:mri/architectures/armv7-m/debug_cm3.h ****     /* Successfully configured a free comparator for this watchpoint. */
 390:mri/architectures/armv7-m/debug_cm3.h ****     return pComparator;
 391:mri/architectures/armv7-m/debug_cm3.h **** }
 545              		.loc 4 391 1 view .LVU143
 546 0010 2846     		mov	r0, r5
 547              	.LVL45:
 548              		.loc 4 391 1 view .LVU144
 549 0012 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 550              	.LVL46:
 551              	.L46:
 376:mri/architectures/armv7-m/debug_cm3.h ****     if (!pComparator)
 552              		.loc 4 376 5 is_stmt 1 view .LVU145
 376:mri/architectures/armv7-m/debug_cm3.h ****     if (!pComparator)
 553              		.loc 4 376 19 is_stmt 0 view .LVU146
 554 0014 FFF7FEFF 		bl	findFreeDWTComparator
 555              	.LVL47:
 377:mri/architectures/armv7-m/debug_cm3.h ****     {
 556              		.loc 4 377 5 is_stmt 1 view .LVU147
 377:mri/architectures/armv7-m/debug_cm3.h ****     {
 557              		.loc 4 377 8 is_stmt 0 view .LVU148
 558 0018 0246     		mov	r2, r0
 559 001a 68B1     		cbz	r0, .L44
 560              	.LBB233:
 561              	.LBB234:
 562              	.LBB235:
 563              	.LBB236:
 564              	.LBB237:
 565              	.LBB238:
 222:mri/architectures/armv7-m/debug_cm3.h **** 
 566              		.loc 4 222 14 view .LVU149
 567 001c 0023     		movs	r3, #0
 568 001e 01E0     		b	.L42
 569              	.LVL48:
 570              	.L43:
 226:mri/architectures/armv7-m/debug_cm3.h ****         log2++;
 571              		.loc 4 226 9 is_stmt 1 view .LVU150
 226:mri/architectures/armv7-m/debug_cm3.h ****         log2++;
 572              		.loc 4 226 15 is_stmt 0 view .LVU151
 573 0020 6408     		lsrs	r4, r4, #1
 574              	.LVL49:
 227:mri/architectures/armv7-m/debug_cm3.h ****     }
 575              		.loc 4 227 9 is_stmt 1 view .LVU152
 227:mri/architectures/armv7-m/debug_cm3.h ****     }
 576              		.loc 4 227 13 is_stmt 0 view .LVU153
 577 0022 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccXppZcm.s 			page 69


 578              	.LVL50:
 579              	.L42:
 224:mri/architectures/armv7-m/debug_cm3.h ****     {
 580              		.loc 4 224 18 is_stmt 1 view .LVU154
 581 0024 012C     		cmp	r4, #1
 582 0026 FBD8     		bhi	.L43
 230:mri/architectures/armv7-m/debug_cm3.h **** }
 583              		.loc 4 230 5 view .LVU155
 584              	.LVL51:
 230:mri/architectures/armv7-m/debug_cm3.h **** }
 585              		.loc 4 230 5 is_stmt 0 view .LVU156
 586              	.LBE238:
 587              	.LBE237:
 344:mri/architectures/armv7-m/debug_cm3.h **** 
 588              		.loc 4 344 5 is_stmt 1 view .LVU157
 344:mri/architectures/armv7-m/debug_cm3.h **** 
 589              		.loc 4 344 23 is_stmt 0 view .LVU158
 590 0028 5360     		str	r3, [r2, #4]
 347:mri/architectures/armv7-m/debug_cm3.h **** }
 591              		.loc 4 347 5 is_stmt 1 view .LVU159
 347:mri/architectures/armv7-m/debug_cm3.h **** }
 592              		.loc 4 347 23 is_stmt 0 view .LVU160
 593 002a 5168     		ldr	r1, [r2, #4]
 594              	.LBE236:
 595              	.LBE235:
 355:mri/architectures/armv7-m/debug_cm3.h ****         return 0;
 596              		.loc 4 355 8 view .LVU161
 597 002c 8B42     		cmp	r3, r1
 598 002e EFD1     		bne	.L40
 358:mri/architectures/armv7-m/debug_cm3.h ****     pComparator->FUNCTION = watchpointType;
 599              		.loc 4 358 5 is_stmt 1 view .LVU162
 358:mri/architectures/armv7-m/debug_cm3.h ****     pComparator->FUNCTION = watchpointType;
 600              		.loc 4 358 23 is_stmt 0 view .LVU163
 601 0030 1760     		str	r7, [r2]
 359:mri/architectures/armv7-m/debug_cm3.h ****     return 1;
 602              		.loc 4 359 5 is_stmt 1 view .LVU164
 359:mri/architectures/armv7-m/debug_cm3.h ****     return 1;
 603              		.loc 4 359 27 is_stmt 0 view .LVU165
 604 0032 9660     		str	r6, [r2, #8]
 360:mri/architectures/armv7-m/debug_cm3.h **** }
 605              		.loc 4 360 5 is_stmt 1 view .LVU166
 606              	.LBE234:
 607              	.LBE233:
 390:mri/architectures/armv7-m/debug_cm3.h **** }
 608              		.loc 4 390 12 is_stmt 0 view .LVU167
 609 0034 1546     		mov	r5, r2
 610 0036 EBE7     		b	.L40
 611              	.LVL52:
 612              	.L44:
 380:mri/architectures/armv7-m/debug_cm3.h ****     }
 613              		.loc 4 380 16 view .LVU168
 614 0038 0546     		mov	r5, r0
 615 003a E9E7     		b	.L40
 616              		.cfi_endproc
 617              	.LFE167:
 619              		.section	.text.disableDWTWatchpoint,"ax",%progbits
 620              		.align	1
ARM GAS  /tmp/ccXppZcm.s 			page 70


 621              		.syntax unified
 622              		.thumb
 623              		.thumb_func
 625              	disableDWTWatchpoint:
 626              	.LVL53:
 627              	.LFB168:
 392:mri/architectures/armv7-m/debug_cm3.h **** 
 393:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE DWT_COMP_Type* disableDWTWatchpoint(uint32_t watchpointAddress,
 394:mri/architectures/armv7-m/debug_cm3.h ****                                                     uint32_t watchpointSize,
 395:mri/architectures/armv7-m/debug_cm3.h ****                                                     uint32_t watchpointType)
 396:mri/architectures/armv7-m/debug_cm3.h **** {
 628              		.loc 4 396 1 is_stmt 1 view -0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		.loc 4 396 1 is_stmt 0 view .LVU170
 633 0000 08B5     		push	{r3, lr}
 634              	.LCFI5:
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 3, -8
 637              		.cfi_offset 14, -4
 397:mri/architectures/armv7-m/debug_cm3.h ****     DWT_COMP_Type* pComparator = NULL;
 638              		.loc 4 397 5 is_stmt 1 view .LVU171
 639              	.LVL54:
 398:mri/architectures/armv7-m/debug_cm3.h **** 
 399:mri/architectures/armv7-m/debug_cm3.h ****     pComparator = findDWTComparator(watchpointAddress, watchpointSize, watchpointType);
 640              		.loc 4 399 5 view .LVU172
 641              		.loc 4 399 19 is_stmt 0 view .LVU173
 642 0002 FFF7FEFF 		bl	findDWTComparator
 643              	.LVL55:
 400:mri/architectures/armv7-m/debug_cm3.h ****     if (!pComparator)
 644              		.loc 4 400 5 is_stmt 1 view .LVU174
 645              		.loc 4 400 8 is_stmt 0 view .LVU175
 646 0006 0346     		mov	r3, r0
 647 0008 40B1     		cbz	r0, .L47
 401:mri/architectures/armv7-m/debug_cm3.h ****     {
 402:mri/architectures/armv7-m/debug_cm3.h ****         /* This watchpoint not set so return NULL. */
 403:mri/architectures/armv7-m/debug_cm3.h ****         return NULL;
 404:mri/architectures/armv7-m/debug_cm3.h ****     }
 405:mri/architectures/armv7-m/debug_cm3.h **** 
 406:mri/architectures/armv7-m/debug_cm3.h ****     clearDWTComparator(pComparator);
 648              		.loc 4 406 5 is_stmt 1 view .LVU176
 649              	.LVL56:
 650              	.LBB239:
 651              	.LBI239:
 174:mri/architectures/armv7-m/debug_cm3.h **** {
 652              		.loc 4 174 22 view .LVU177
 653              	.LBB240:
 176:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->MASK = 0;
 654              		.loc 4 176 5 view .LVU178
 176:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->MASK = 0;
 655              		.loc 4 176 29 is_stmt 0 view .LVU179
 656 000a 0022     		movs	r2, #0
 657 000c 0260     		str	r2, [r0]
 177:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->FUNCTION &= ~(DWT_COMP_FUNCTION_DATAVMATCH |
 658              		.loc 4 177 5 is_stmt 1 view .LVU180
 177:mri/architectures/armv7-m/debug_cm3.h ****     pComparatorStruct->FUNCTION &= ~(DWT_COMP_FUNCTION_DATAVMATCH |
ARM GAS  /tmp/ccXppZcm.s 			page 71


 659              		.loc 4 177 29 is_stmt 0 view .LVU181
 660 000e 4260     		str	r2, [r0, #4]
 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 661              		.loc 4 178 5 is_stmt 1 view .LVU182
 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 662              		.loc 4 178 22 is_stmt 0 view .LVU183
 663 0010 8268     		ldr	r2, [r0, #8]
 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 664              		.loc 4 178 33 view .LVU184
 665 0012 22F4D772 		bic	r2, r2, #430
 666 0016 22F00102 		bic	r2, r2, #1
 667 001a 8260     		str	r2, [r0, #8]
 668              	.LVL57:
 178:mri/architectures/armv7-m/debug_cm3.h ****                                      DWT_COMP_FUNCTION_CYCMATCH |
 669              		.loc 4 178 33 view .LVU185
 670              	.LBE240:
 671              	.LBE239:
 407:mri/architectures/armv7-m/debug_cm3.h ****     return pComparator;
 672              		.loc 4 407 5 is_stmt 1 view .LVU186
 673              	.L47:
 408:mri/architectures/armv7-m/debug_cm3.h **** }
 674              		.loc 4 408 1 is_stmt 0 view .LVU187
 675 001c 1846     		mov	r0, r3
 676              	.LVL58:
 677              		.loc 4 408 1 view .LVU188
 678 001e 08BD     		pop	{r3, pc}
 679              		.loc 4 408 1 view .LVU189
 680              		.cfi_endproc
 681              	.LFE168:
 683              		.section	.text.isBreakpointAddressInvalid,"ax",%progbits
 684              		.align	1
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 689              	isBreakpointAddressInvalid:
 690              	.LVL59:
 691              	.LFB175:
 409:mri/architectures/armv7-m/debug_cm3.h **** 
 410:mri/architectures/armv7-m/debug_cm3.h **** 
 411:mri/architectures/armv7-m/debug_cm3.h **** /* FlashPatch Control Register Bits. */
 412:mri/architectures/armv7-m/debug_cm3.h **** /* Flash Patch breakpoint architecture revision. 0 for revision 1 and 1 for revision 2. */
 413:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_REV_SHIFT           28
 414:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_REV_MASK            (0xF << FP_CTRL_REV_SHIFT)
 415:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_REVISION2           0x1
 416:mri/architectures/armv7-m/debug_cm3.h **** /*  Most significant bits of number of instruction address comparators.  Read-only */
 417:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_NUM_CODE_MSB_SHIFT  12
 418:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_NUM_CODE_MSB_MASK   (0x7 << FP_CTRL_NUM_CODE_MSB_SHIFT)
 419:mri/architectures/armv7-m/debug_cm3.h **** /*  Least significant bits of number of instruction address comparators.  Read-only */
 420:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_NUM_CODE_LSB_SHIFT  4
 421:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_NUM_CODE_LSB_MASK   (0xF << FP_CTRL_NUM_CODE_LSB_SHIFT)
 422:mri/architectures/armv7-m/debug_cm3.h **** /*  Number of instruction literal address comparators.  Read only */
 423:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_NUM_LIT_SHIFT       8
 424:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_NUM_LIT_MASK        (0xF << FP_CTRL_NUM_LIT_SHIFT)
 425:mri/architectures/armv7-m/debug_cm3.h **** /*  This Key field must be set to 1 when writing or the write will be ignored. */
 426:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_KEY                 (1 << 1)
 427:mri/architectures/armv7-m/debug_cm3.h **** /*  Enable bit for the FPB.  Set to 1 to enable FPB. */
 428:mri/architectures/armv7-m/debug_cm3.h **** #define FP_CTRL_ENABLE              1
ARM GAS  /tmp/ccXppZcm.s 			page 72


 429:mri/architectures/armv7-m/debug_cm3.h **** 
 430:mri/architectures/armv7-m/debug_cm3.h **** /* FlashPatch Comparator Register Bits for revision 1. */
 431:mri/architectures/armv7-m/debug_cm3.h **** /*  Defines the behaviour for code address comparators. */
 432:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_REPLACE_SHIFT       30
 433:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_REPLACE_MASK        (0x3U << FP_COMP_REPLACE_SHIFT)
 434:mri/architectures/armv7-m/debug_cm3.h **** /*      Remap to specified address in SRAM. */
 435:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_REPLACE_REMAP       (0x0U << FP_COMP_REPLACE_SHIFT)
 436:mri/architectures/armv7-m/debug_cm3.h **** /*      Breakpoint on lower halfword. */
 437:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_REPLACE_BREAK_LOWER (0x1U << FP_COMP_REPLACE_SHIFT)
 438:mri/architectures/armv7-m/debug_cm3.h **** /*      Breakpoint on upper halfword. */
 439:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_REPLACE_BREAK_UPPER (0x2U << FP_COMP_REPLACE_SHIFT)
 440:mri/architectures/armv7-m/debug_cm3.h **** /*      Breakpoint on word. */
 441:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_REPLACE_BREAK       (0x3U << FP_COMP_REPLACE_SHIFT)
 442:mri/architectures/armv7-m/debug_cm3.h **** /*  Specified bits 28:2 of the address to be use for match on this comparator. */
 443:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_COMP_SHIFT          2
 444:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_COMP_MASK           (0x07FFFFFF << FP_COMP_COMP_SHIFT)
 445:mri/architectures/armv7-m/debug_cm3.h **** /*  Enables this comparator.  Set to 1 to enable. */
 446:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_ENABLE              1
 447:mri/architectures/armv7-m/debug_cm3.h **** 
 448:mri/architectures/armv7-m/debug_cm3.h **** /* FlashPatch Comparator Register Bits for revision 2. */
 449:mri/architectures/armv7-m/debug_cm3.h **** /*  Enables this comparator for flash patching when FP_COMP_BE is 0. Set to 1 to enable. */
 450:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_FE                  (1 << 31)
 451:mri/architectures/armv7-m/debug_cm3.h **** /*  Enables this comparator as a breakpoint.  Set to 1 to enable. */
 452:mri/architectures/armv7-m/debug_cm3.h **** #define FP_COMP_BE                  1
 453:mri/architectures/armv7-m/debug_cm3.h **** 
 454:mri/architectures/armv7-m/debug_cm3.h **** /* FPB - Flash Patch Breakpoint Routines. */
 455:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getFPBRevision(void)
 456:mri/architectures/armv7-m/debug_cm3.h **** {
 457:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t controlValue = FPB->CTRL;
 458:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 459:mri/architectures/armv7-m/debug_cm3.h **** }
 460:mri/architectures/armv7-m/debug_cm3.h **** 
 461:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getFPBCodeComparatorCount(void)
 462:mri/architectures/armv7-m/debug_cm3.h **** {
 463:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t    controlValue = FPB->CTRL;
 464:mri/architectures/armv7-m/debug_cm3.h ****     return (((controlValue & FP_CTRL_NUM_CODE_MSB_MASK) >> 8) |
 465:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 466:mri/architectures/armv7-m/debug_cm3.h **** }
 467:mri/architectures/armv7-m/debug_cm3.h **** 
 468:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getFPBLiteralComparatorCount(void)
 469:mri/architectures/armv7-m/debug_cm3.h **** {
 470:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t    controlValue = FPB->CTRL;
 471:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_NUM_LIT_MASK) >> FP_CTRL_NUM_LIT_SHIFT);
 472:mri/architectures/armv7-m/debug_cm3.h **** }
 473:mri/architectures/armv7-m/debug_cm3.h **** 
 474:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void clearFPBComparator(uint32_t* pComparator)
 475:mri/architectures/armv7-m/debug_cm3.h **** {
 476:mri/architectures/armv7-m/debug_cm3.h ****     *pComparator = 0;
 477:mri/architectures/armv7-m/debug_cm3.h **** }
 478:mri/architectures/armv7-m/debug_cm3.h **** 
 479:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isAddressAboveLowestHalfGig(uint32_t address)
 480:mri/architectures/armv7-m/debug_cm3.h **** {
 481:mri/architectures/armv7-m/debug_cm3.h ****     return (int)(address & 0xE0000000);
 482:mri/architectures/armv7-m/debug_cm3.h **** }
 483:mri/architectures/armv7-m/debug_cm3.h **** 
 484:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isAddressOdd(uint32_t address)
 485:mri/architectures/armv7-m/debug_cm3.h **** {
ARM GAS  /tmp/ccXppZcm.s 			page 73


 486:mri/architectures/armv7-m/debug_cm3.h ****     return (int)(address & 0x1);
 487:mri/architectures/armv7-m/debug_cm3.h **** }
 488:mri/architectures/armv7-m/debug_cm3.h **** 
 489:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isBreakpointAddressInvalid(uint32_t breakpointAddress)
 490:mri/architectures/armv7-m/debug_cm3.h **** {
 692              		.loc 4 490 1 is_stmt 1 view -0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696              		@ link register save eliminated.
 491:mri/architectures/armv7-m/debug_cm3.h ****     if (getFPBRevision() == FP_CTRL_REVISION2)
 697              		.loc 4 491 5 view .LVU191
 698              	.LBB241:
 699              	.LBI241:
 455:mri/architectures/armv7-m/debug_cm3.h **** {
 700              		.loc 4 455 26 view .LVU192
 701              	.LBB242:
 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 702              		.loc 4 457 5 view .LVU193
 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 703              		.loc 4 457 14 is_stmt 0 view .LVU194
 704 0000 094B     		ldr	r3, .L57
 705 0002 1B68     		ldr	r3, [r3]
 706              	.LVL60:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 707              		.loc 4 458 5 is_stmt 1 view .LVU195
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 708              		.loc 4 458 47 is_stmt 0 view .LVU196
 709 0004 1B0F     		lsrs	r3, r3, #28
 710              	.LVL61:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 711              		.loc 4 458 47 view .LVU197
 712              	.LBE242:
 713              	.LBE241:
 714              		.loc 4 491 8 view .LVU198
 715 0006 012B     		cmp	r3, #1
 716 0008 07D0     		beq	.L56
 492:mri/architectures/armv7-m/debug_cm3.h ****     {
 493:mri/architectures/armv7-m/debug_cm3.h ****         /* On revision 2, can set breakpoint at any address in the 4GB range, except for at an odd 
 494:mri/architectures/armv7-m/debug_cm3.h ****         return isAddressOdd(breakpointAddress);
 495:mri/architectures/armv7-m/debug_cm3.h ****     }
 496:mri/architectures/armv7-m/debug_cm3.h ****     else
 497:mri/architectures/armv7-m/debug_cm3.h ****     {
 498:mri/architectures/armv7-m/debug_cm3.h ****         /* On revision 1, can only set a breakpoint on addresses where the upper 3-bits are all 0 (
 499:mri/architectures/armv7-m/debug_cm3.h ****            limits) and the address is half-word aligned */
 500:mri/architectures/armv7-m/debug_cm3.h ****         return (isAddressAboveLowestHalfGig(breakpointAddress) || isAddressOdd(breakpointAddress));
 717              		.loc 4 500 9 is_stmt 1 view .LVU199
 718              		.loc 4 500 64 is_stmt 0 view .LVU200
 719 000a B0F1005F 		cmp	r0, #536870912
 720 000e 07D2     		bcs	.L54
 721 0010 10F0010F 		tst	r0, #1
 722 0014 06D1     		bne	.L55
 723 0016 0020     		movs	r0, #0
 724              	.LVL62:
 725              		.loc 4 500 64 view .LVU201
 726 0018 7047     		bx	lr
 727              	.LVL63:
ARM GAS  /tmp/ccXppZcm.s 			page 74


 728              	.L56:
 494:mri/architectures/armv7-m/debug_cm3.h ****     }
 729              		.loc 4 494 9 is_stmt 1 view .LVU202
 730              	.LBB243:
 731              	.LBI243:
 484:mri/architectures/armv7-m/debug_cm3.h **** {
 732              		.loc 4 484 21 view .LVU203
 733              	.LBB244:
 486:mri/architectures/armv7-m/debug_cm3.h **** }
 734              		.loc 4 486 5 view .LVU204
 486:mri/architectures/armv7-m/debug_cm3.h **** }
 735              		.loc 4 486 12 is_stmt 0 view .LVU205
 736 001a 00F00100 		and	r0, r0, #1
 737              	.LVL64:
 486:mri/architectures/armv7-m/debug_cm3.h **** }
 738              		.loc 4 486 12 view .LVU206
 739              	.LBE244:
 740              	.LBE243:
 494:mri/architectures/armv7-m/debug_cm3.h ****     }
 741              		.loc 4 494 16 view .LVU207
 742 001e 7047     		bx	lr
 743              	.LVL65:
 744              	.L54:
 745              		.loc 4 500 64 view .LVU208
 746 0020 0120     		movs	r0, #1
 747              	.LVL66:
 748              		.loc 4 500 64 view .LVU209
 749 0022 7047     		bx	lr
 750              	.LVL67:
 751              	.L55:
 752              		.loc 4 500 64 view .LVU210
 753 0024 0120     		movs	r0, #1
 754              	.LVL68:
 501:mri/architectures/armv7-m/debug_cm3.h ****     }
 502:mri/architectures/armv7-m/debug_cm3.h **** }
 755              		.loc 4 502 1 view .LVU211
 756 0026 7047     		bx	lr
 757              	.L58:
 758              		.align	2
 759              	.L57:
 760 0028 002000E0 		.word	-536862720
 761              		.cfi_endproc
 762              	.LFE175:
 764              		.section	.text.calculateFPBComparatorValue,"ax",%progbits
 765              		.align	1
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 770              	calculateFPBComparatorValue:
 771              	.LVL69:
 772              	.LFB180:
 503:mri/architectures/armv7-m/debug_cm3.h **** 
 504:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isAddressInUpperHalfword(uint32_t address)
 505:mri/architectures/armv7-m/debug_cm3.h **** {
 506:mri/architectures/armv7-m/debug_cm3.h ****     return (int)(address & 0x2);
 507:mri/architectures/armv7-m/debug_cm3.h **** }
 508:mri/architectures/armv7-m/debug_cm3.h **** 
ARM GAS  /tmp/ccXppZcm.s 			page 75


 509:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t calculateFPBComparatorReplaceValue(uint32_t breakpointAddress, int32_t is3
 510:mri/architectures/armv7-m/debug_cm3.h **** {
 511:mri/architectures/armv7-m/debug_cm3.h ****     if (is32BitInstruction)
 512:mri/architectures/armv7-m/debug_cm3.h ****         return FP_COMP_REPLACE_BREAK;
 513:mri/architectures/armv7-m/debug_cm3.h ****     else if (isAddressInUpperHalfword(breakpointAddress))
 514:mri/architectures/armv7-m/debug_cm3.h ****         return FP_COMP_REPLACE_BREAK_UPPER;
 515:mri/architectures/armv7-m/debug_cm3.h ****     else
 516:mri/architectures/armv7-m/debug_cm3.h ****         return FP_COMP_REPLACE_BREAK_LOWER;
 517:mri/architectures/armv7-m/debug_cm3.h **** }
 518:mri/architectures/armv7-m/debug_cm3.h **** 
 519:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t calculateFPBComparatorValueRevision1(uint32_t breakpointAddress, int32_t i
 520:mri/architectures/armv7-m/debug_cm3.h **** {
 521:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t    comparatorValue;
 522:mri/architectures/armv7-m/debug_cm3.h **** 
 523:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValue = (breakpointAddress & FP_COMP_COMP_MASK);
 524:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValue |= FP_COMP_ENABLE;
 525:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValue |= calculateFPBComparatorReplaceValue(breakpointAddress, is32BitInstruction);
 526:mri/architectures/armv7-m/debug_cm3.h **** 
 527:mri/architectures/armv7-m/debug_cm3.h ****     return comparatorValue;
 528:mri/architectures/armv7-m/debug_cm3.h **** }
 529:mri/architectures/armv7-m/debug_cm3.h **** 
 530:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t calculateFPBComparatorValueRevision2(uint32_t breakpointAddress)
 531:mri/architectures/armv7-m/debug_cm3.h **** {
 532:mri/architectures/armv7-m/debug_cm3.h ****     return breakpointAddress | FP_COMP_BE;
 533:mri/architectures/armv7-m/debug_cm3.h **** }
 534:mri/architectures/armv7-m/debug_cm3.h **** 
 535:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t calculateFPBComparatorValue(uint32_t breakpointAddress, int32_t is32BitIns
 536:mri/architectures/armv7-m/debug_cm3.h **** {
 773              		.loc 4 536 1 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		.loc 4 536 1 is_stmt 0 view .LVU213
 778 0000 38B5     		push	{r3, r4, r5, lr}
 779              	.LCFI6:
 780              		.cfi_def_cfa_offset 16
 781              		.cfi_offset 3, -16
 782              		.cfi_offset 4, -12
 783              		.cfi_offset 5, -8
 784              		.cfi_offset 14, -4
 785 0002 0446     		mov	r4, r0
 786 0004 0D46     		mov	r5, r1
 537:mri/architectures/armv7-m/debug_cm3.h ****     if (isBreakpointAddressInvalid(breakpointAddress))
 787              		.loc 4 537 5 is_stmt 1 view .LVU214
 788              		.loc 4 537 9 is_stmt 0 view .LVU215
 789 0006 FFF7FEFF 		bl	isBreakpointAddressInvalid
 790              	.LVL70:
 791              		.loc 4 537 8 view .LVU216
 792 000a E0B9     		cbnz	r0, .L63
 538:mri/architectures/armv7-m/debug_cm3.h ****         return (uint32_t)~0U;
 539:mri/architectures/armv7-m/debug_cm3.h ****     if (getFPBRevision() == FP_CTRL_REVISION2)
 793              		.loc 4 539 5 is_stmt 1 view .LVU217
 794              	.LBB245:
 795              	.LBI245:
 455:mri/architectures/armv7-m/debug_cm3.h **** {
 796              		.loc 4 455 26 view .LVU218
 797              	.LBB246:
ARM GAS  /tmp/ccXppZcm.s 			page 76


 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 798              		.loc 4 457 5 view .LVU219
 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 799              		.loc 4 457 14 is_stmt 0 view .LVU220
 800 000c 0F4B     		ldr	r3, .L68
 801 000e 1B68     		ldr	r3, [r3]
 802              	.LVL71:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 803              		.loc 4 458 5 is_stmt 1 view .LVU221
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 804              		.loc 4 458 47 is_stmt 0 view .LVU222
 805 0010 1B0F     		lsrs	r3, r3, #28
 806              	.LVL72:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 807              		.loc 4 458 47 view .LVU223
 808              	.LBE246:
 809              	.LBE245:
 810              		.loc 4 539 8 view .LVU224
 811 0012 012B     		cmp	r3, #1
 812 0014 0CD0     		beq	.L67
 540:mri/architectures/armv7-m/debug_cm3.h ****         return calculateFPBComparatorValueRevision2(breakpointAddress);
 541:mri/architectures/armv7-m/debug_cm3.h ****     else
 542:mri/architectures/armv7-m/debug_cm3.h ****         return calculateFPBComparatorValueRevision1(breakpointAddress, is32BitInstruction);
 813              		.loc 4 542 9 is_stmt 1 view .LVU225
 814              	.LVL73:
 815              	.LBB247:
 816              	.LBI247:
 519:mri/architectures/armv7-m/debug_cm3.h **** {
 817              		.loc 4 519 26 view .LVU226
 818              	.LBB248:
 521:mri/architectures/armv7-m/debug_cm3.h **** 
 819              		.loc 4 521 5 view .LVU227
 523:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValue |= FP_COMP_ENABLE;
 820              		.loc 4 523 5 view .LVU228
 523:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValue |= FP_COMP_ENABLE;
 821              		.loc 4 523 21 is_stmt 0 view .LVU229
 822 0016 24F06043 		bic	r3, r4, #-536870912
 823 001a 23F00303 		bic	r3, r3, #3
 824              	.LVL74:
 524:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValue |= calculateFPBComparatorReplaceValue(breakpointAddress, is32BitInstruction);
 825              		.loc 4 524 5 is_stmt 1 view .LVU230
 524:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValue |= calculateFPBComparatorReplaceValue(breakpointAddress, is32BitInstruction);
 826              		.loc 4 524 21 is_stmt 0 view .LVU231
 827 001e 43F00103 		orr	r3, r3, #1
 828              	.LVL75:
 525:mri/architectures/armv7-m/debug_cm3.h **** 
 829              		.loc 4 525 5 is_stmt 1 view .LVU232
 830              	.LBB249:
 831              	.LBI249:
 509:mri/architectures/armv7-m/debug_cm3.h **** {
 832              		.loc 4 509 26 view .LVU233
 833              	.LBB250:
 511:mri/architectures/armv7-m/debug_cm3.h ****         return FP_COMP_REPLACE_BREAK;
 834              		.loc 4 511 5 view .LVU234
 511:mri/architectures/armv7-m/debug_cm3.h ****         return FP_COMP_REPLACE_BREAK;
 835              		.loc 4 511 8 is_stmt 0 view .LVU235
 836 0022 45B9     		cbnz	r5, .L64
ARM GAS  /tmp/ccXppZcm.s 			page 77


 513:mri/architectures/armv7-m/debug_cm3.h ****         return FP_COMP_REPLACE_BREAK_UPPER;
 837              		.loc 4 513 10 is_stmt 1 view .LVU236
 513:mri/architectures/armv7-m/debug_cm3.h ****         return FP_COMP_REPLACE_BREAK_UPPER;
 838              		.loc 4 513 13 is_stmt 0 view .LVU237
 839 0024 14F0020F 		tst	r4, #2
 840 0028 0AD0     		beq	.L65
 514:mri/architectures/armv7-m/debug_cm3.h ****     else
 841              		.loc 4 514 16 view .LVU238
 842 002a 4FF00042 		mov	r2, #-2147483648
 843 002e 04E0     		b	.L62
 844              	.LVL76:
 845              	.L67:
 514:mri/architectures/armv7-m/debug_cm3.h ****     else
 846              		.loc 4 514 16 view .LVU239
 847              	.LBE250:
 848              	.LBE249:
 849              	.LBE248:
 850              	.LBE247:
 540:mri/architectures/armv7-m/debug_cm3.h ****     else
 851              		.loc 4 540 9 is_stmt 1 view .LVU240
 852              	.LBB257:
 853              	.LBI257:
 530:mri/architectures/armv7-m/debug_cm3.h **** {
 854              		.loc 4 530 26 view .LVU241
 855              	.LBB258:
 532:mri/architectures/armv7-m/debug_cm3.h **** }
 856              		.loc 4 532 5 view .LVU242
 532:mri/architectures/armv7-m/debug_cm3.h **** }
 857              		.loc 4 532 30 is_stmt 0 view .LVU243
 858 0030 44F00100 		orr	r0, r4, #1
 859              	.LVL77:
 532:mri/architectures/armv7-m/debug_cm3.h **** }
 860              		.loc 4 532 30 view .LVU244
 861              	.LBE258:
 862              	.LBE257:
 540:mri/architectures/armv7-m/debug_cm3.h ****     else
 863              		.loc 4 540 16 view .LVU245
 864 0034 03E0     		b	.L59
 865              	.LVL78:
 866              	.L64:
 867              	.LBB259:
 868              	.LBB255:
 869              	.LBB253:
 870              	.LBB251:
 512:mri/architectures/armv7-m/debug_cm3.h ****     else if (isAddressInUpperHalfword(breakpointAddress))
 871              		.loc 4 512 16 view .LVU246
 872 0036 4FF04042 		mov	r2, #-1073741824
 873              	.L62:
 874              	.LVL79:
 512:mri/architectures/armv7-m/debug_cm3.h ****     else if (isAddressInUpperHalfword(breakpointAddress))
 875              		.loc 4 512 16 view .LVU247
 876              	.LBE251:
 877              	.LBE253:
 525:mri/architectures/armv7-m/debug_cm3.h **** 
 878              		.loc 4 525 21 view .LVU248
 879 003a 43EA0200 		orr	r0, r3, r2
 880              	.LVL80:
ARM GAS  /tmp/ccXppZcm.s 			page 78


 527:mri/architectures/armv7-m/debug_cm3.h **** }
 881              		.loc 4 527 5 is_stmt 1 view .LVU249
 882              	.L59:
 527:mri/architectures/armv7-m/debug_cm3.h **** }
 883              		.loc 4 527 5 is_stmt 0 view .LVU250
 884              	.LBE255:
 885              	.LBE259:
 543:mri/architectures/armv7-m/debug_cm3.h **** }
 886              		.loc 4 543 1 view .LVU251
 887 003e 38BD     		pop	{r3, r4, r5, pc}
 888              	.LVL81:
 889              	.L65:
 890              	.LBB260:
 891              	.LBB256:
 892              	.LBB254:
 893              	.LBB252:
 516:mri/architectures/armv7-m/debug_cm3.h **** }
 894              		.loc 4 516 16 view .LVU252
 895 0040 4FF08042 		mov	r2, #1073741824
 896 0044 F9E7     		b	.L62
 897              	.LVL82:
 898              	.L63:
 516:mri/architectures/armv7-m/debug_cm3.h **** }
 899              		.loc 4 516 16 view .LVU253
 900              	.LBE252:
 901              	.LBE254:
 902              	.LBE256:
 903              	.LBE260:
 538:mri/architectures/armv7-m/debug_cm3.h ****     if (getFPBRevision() == FP_CTRL_REVISION2)
 904              		.loc 4 538 16 view .LVU254
 905 0046 4FF0FF30 		mov	r0, #-1
 906 004a F8E7     		b	.L59
 907              	.L69:
 908              		.align	2
 909              	.L68:
 910 004c 002000E0 		.word	-536862720
 911              		.cfi_endproc
 912              	.LFE180:
 914              		.section	.text.isFPBComparatorEnabled,"ax",%progbits
 915              		.align	1
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 920              	isFPBComparatorEnabled:
 921              	.LVL83:
 922              	.LFB184:
 544:mri/architectures/armv7-m/debug_cm3.h **** 
 545:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t maskOffFPBComparatorReservedBits(uint32_t comparatorValue)
 546:mri/architectures/armv7-m/debug_cm3.h **** {
 547:mri/architectures/armv7-m/debug_cm3.h ****     if (getFPBRevision() == FP_CTRL_REVISION2)
 548:mri/architectures/armv7-m/debug_cm3.h ****         return comparatorValue;
 549:mri/architectures/armv7-m/debug_cm3.h ****     else
 550:mri/architectures/armv7-m/debug_cm3.h ****         return (comparatorValue & (FP_COMP_REPLACE_MASK | FP_COMP_COMP_MASK | FP_COMP_ENABLE));
 551:mri/architectures/armv7-m/debug_cm3.h **** }
 552:mri/architectures/armv7-m/debug_cm3.h **** 
 553:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isFPBComparatorEnabledRevision1(uint32_t comparator)
 554:mri/architectures/armv7-m/debug_cm3.h **** {
ARM GAS  /tmp/ccXppZcm.s 			page 79


 555:mri/architectures/armv7-m/debug_cm3.h ****     return (int)(comparator & FP_COMP_ENABLE);
 556:mri/architectures/armv7-m/debug_cm3.h **** }
 557:mri/architectures/armv7-m/debug_cm3.h **** 
 558:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isFPBComparatorEnabledRevision2(uint32_t comparator)
 559:mri/architectures/armv7-m/debug_cm3.h **** {
 560:mri/architectures/armv7-m/debug_cm3.h ****     return (int)((comparator & FP_COMP_BE) || (comparator & FP_COMP_FE));
 561:mri/architectures/armv7-m/debug_cm3.h **** }
 562:mri/architectures/armv7-m/debug_cm3.h **** 
 563:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isFPBComparatorEnabled(uint32_t comparator)
 564:mri/architectures/armv7-m/debug_cm3.h **** {
 923              		.loc 4 564 1 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 565:mri/architectures/armv7-m/debug_cm3.h ****     if (getFPBRevision() == FP_CTRL_REVISION2)
 928              		.loc 4 565 5 view .LVU256
 929              	.LBB261:
 930              	.LBI261:
 455:mri/architectures/armv7-m/debug_cm3.h **** {
 931              		.loc 4 455 26 view .LVU257
 932              	.LBB262:
 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 933              		.loc 4 457 5 view .LVU258
 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 934              		.loc 4 457 14 is_stmt 0 view .LVU259
 935 0000 094B     		ldr	r3, .L78
 936 0002 1B68     		ldr	r3, [r3]
 937              	.LVL84:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 938              		.loc 4 458 5 is_stmt 1 view .LVU260
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 939              		.loc 4 458 47 is_stmt 0 view .LVU261
 940 0004 1B0F     		lsrs	r3, r3, #28
 941              	.LVL85:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 942              		.loc 4 458 47 view .LVU262
 943              	.LBE262:
 944              	.LBE261:
 945              		.loc 4 565 8 view .LVU263
 946 0006 012B     		cmp	r3, #1
 947 0008 02D0     		beq	.L76
 566:mri/architectures/armv7-m/debug_cm3.h ****         return isFPBComparatorEnabledRevision2(comparator);
 567:mri/architectures/armv7-m/debug_cm3.h ****     else
 568:mri/architectures/armv7-m/debug_cm3.h ****         return isFPBComparatorEnabledRevision1(comparator);
 948              		.loc 4 568 9 is_stmt 1 view .LVU264
 949              	.LVL86:
 950              	.LBB263:
 951              	.LBI263:
 553:mri/architectures/armv7-m/debug_cm3.h **** {
 952              		.loc 4 553 21 view .LVU265
 953              	.LBB264:
 555:mri/architectures/armv7-m/debug_cm3.h **** }
 954              		.loc 4 555 5 view .LVU266
 555:mri/architectures/armv7-m/debug_cm3.h **** }
 955              		.loc 4 555 12 is_stmt 0 view .LVU267
 956 000a 00F00100 		and	r0, r0, #1
ARM GAS  /tmp/ccXppZcm.s 			page 80


 957              	.LVL87:
 555:mri/architectures/armv7-m/debug_cm3.h **** }
 958              		.loc 4 555 12 view .LVU268
 959              	.LBE264:
 960              	.LBE263:
 569:mri/architectures/armv7-m/debug_cm3.h **** }
 961              		.loc 4 569 1 view .LVU269
 962 000e 7047     		bx	lr
 963              	.LVL88:
 964              	.L76:
 566:mri/architectures/armv7-m/debug_cm3.h ****     else
 965              		.loc 4 566 9 is_stmt 1 view .LVU270
 966              	.LBB265:
 967              	.LBI265:
 558:mri/architectures/armv7-m/debug_cm3.h **** {
 968              		.loc 4 558 21 view .LVU271
 969              	.LBB266:
 560:mri/architectures/armv7-m/debug_cm3.h **** }
 970              		.loc 4 560 5 view .LVU272
 560:mri/architectures/armv7-m/debug_cm3.h **** }
 971              		.loc 4 560 12 is_stmt 0 view .LVU273
 972 0010 10F0010F 		tst	r0, #1
 973 0014 05D1     		bne	.L74
 974 0016 0028     		cmp	r0, #0
 975 0018 01DB     		blt	.L77
 976 001a 0020     		movs	r0, #0
 977              	.LVL89:
 560:mri/architectures/armv7-m/debug_cm3.h **** }
 978              		.loc 4 560 12 view .LVU274
 979              	.LBE266:
 980              	.LBE265:
 566:mri/architectures/armv7-m/debug_cm3.h ****     else
 981              		.loc 4 566 16 view .LVU275
 982 001c 7047     		bx	lr
 983              	.LVL90:
 984              	.L77:
 985              	.LBB268:
 986              	.LBB267:
 560:mri/architectures/armv7-m/debug_cm3.h **** }
 987              		.loc 4 560 12 view .LVU276
 988 001e 0120     		movs	r0, #1
 989              	.LVL91:
 560:mri/architectures/armv7-m/debug_cm3.h **** }
 990              		.loc 4 560 12 view .LVU277
 991 0020 7047     		bx	lr
 992              	.LVL92:
 993              	.L74:
 560:mri/architectures/armv7-m/debug_cm3.h **** }
 994              		.loc 4 560 12 view .LVU278
 995 0022 0120     		movs	r0, #1
 996              	.LVL93:
 560:mri/architectures/armv7-m/debug_cm3.h **** }
 997              		.loc 4 560 12 view .LVU279
 998 0024 7047     		bx	lr
 999              	.L79:
 1000 0026 00BF     		.align	2
 1001              	.L78:
ARM GAS  /tmp/ccXppZcm.s 			page 81


 1002 0028 002000E0 		.word	-536862720
 1003              	.LBE267:
 1004              	.LBE268:
 1005              		.cfi_endproc
 1006              	.LFE184:
 1008              		.section	.text.findFPBBreakpointComparator,"ax",%progbits
 1009              		.align	1
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1014              	findFPBBreakpointComparator:
 1015              	.LVL94:
 1016              	.LFB185:
 570:mri/architectures/armv7-m/debug_cm3.h **** 
 571:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t* findFPBBreakpointComparator(uint32_t breakpointAddress, int32_t is32BitIn
 572:mri/architectures/armv7-m/debug_cm3.h **** {
 1017              		.loc 4 572 1 is_stmt 1 view -0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		.loc 4 572 1 is_stmt 0 view .LVU281
 1022 0000 08B5     		push	{r3, lr}
 1023              	.LCFI7:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 3, -8
 1026              		.cfi_offset 14, -4
 573:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t*    pCurrentComparator = FPB_COMP_ARRAY;
 1027              		.loc 4 573 5 is_stmt 1 view .LVU282
 1028              	.LVL95:
 574:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t     comparatorValueForThisBreakpoint;
 1029              		.loc 4 574 5 view .LVU283
 575:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t     codeComparatorCount;
 1030              		.loc 4 575 5 view .LVU284
 576:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t     i;
 1031              		.loc 4 576 5 view .LVU285
 577:mri/architectures/armv7-m/debug_cm3.h **** 
 578:mri/architectures/armv7-m/debug_cm3.h ****     comparatorValueForThisBreakpoint = calculateFPBComparatorValue(breakpointAddress, is32BitInstru
 1032              		.loc 4 578 5 view .LVU286
 1033              		.loc 4 578 40 is_stmt 0 view .LVU287
 1034 0002 FFF7FEFF 		bl	calculateFPBComparatorValue
 1035              	.LVL96:
 1036              		.loc 4 578 40 view .LVU288
 1037 0006 8646     		mov	lr, r0
 1038              	.LVL97:
 579:mri/architectures/armv7-m/debug_cm3.h ****     codeComparatorCount = getFPBCodeComparatorCount();
 1039              		.loc 4 579 5 is_stmt 1 view .LVU289
 1040              	.LBB269:
 1041              	.LBI269:
 461:mri/architectures/armv7-m/debug_cm3.h **** {
 1042              		.loc 4 461 26 view .LVU290
 1043              	.LBB270:
 463:mri/architectures/armv7-m/debug_cm3.h ****     return (((controlValue & FP_CTRL_NUM_CODE_MSB_MASK) >> 8) |
 1044              		.loc 4 463 5 view .LVU291
 463:mri/architectures/armv7-m/debug_cm3.h ****     return (((controlValue & FP_CTRL_NUM_CODE_MSB_MASK) >> 8) |
 1045              		.loc 4 463 17 is_stmt 0 view .LVU292
 1046 0008 0F4B     		ldr	r3, .L87
 1047 000a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccXppZcm.s 			page 82


 1048              	.LVL98:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1049              		.loc 4 464 5 is_stmt 1 view .LVU293
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1050              		.loc 4 464 57 is_stmt 0 view .LVU294
 1051 000c 4FEA132C 		lsr	ip, r3, #8
 1052 0010 0CF0700C 		and	ip, ip, #112
 465:mri/architectures/armv7-m/debug_cm3.h **** }
 1053              		.loc 4 465 57 view .LVU295
 1054 0014 C3F30313 		ubfx	r3, r3, #4, #4
 1055              	.LVL99:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1056              		.loc 4 464 63 view .LVU296
 1057 0018 4CEA030C 		orr	ip, ip, r3
 1058              	.LVL100:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1059              		.loc 4 464 63 view .LVU297
 1060              	.LBE270:
 1061              	.LBE269:
 580:mri/architectures/armv7-m/debug_cm3.h **** 
 581:mri/architectures/armv7-m/debug_cm3.h ****     for (i = 0 ; i < codeComparatorCount ; i++)
 1062              		.loc 4 581 5 is_stmt 1 view .LVU298
 1063              		.loc 4 581 12 is_stmt 0 view .LVU299
 1064 001c 0021     		movs	r1, #0
 573:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t     comparatorValueForThisBreakpoint;
 1065              		.loc 4 573 18 view .LVU300
 1066 001e 0B48     		ldr	r0, .L87+4
 1067              	.LVL101:
 1068              		.loc 4 581 5 view .LVU301
 1069 0020 03E0     		b	.L81
 1070              	.LVL102:
 1071              	.L82:
 1072              	.LBB271:
 582:mri/architectures/armv7-m/debug_cm3.h ****     {
 583:mri/architectures/armv7-m/debug_cm3.h ****         uint32_t maskOffReservedBits;
 584:mri/architectures/armv7-m/debug_cm3.h **** 
 585:mri/architectures/armv7-m/debug_cm3.h ****         maskOffReservedBits = maskOffFPBComparatorReservedBits(*pCurrentComparator);
 586:mri/architectures/armv7-m/debug_cm3.h ****         if (comparatorValueForThisBreakpoint == maskOffReservedBits)
 1073              		.loc 4 586 9 is_stmt 1 view .LVU302
 1074              		.loc 4 586 12 is_stmt 0 view .LVU303
 1075 0022 9E45     		cmp	lr, r3
 1076 0024 0FD0     		beq	.L80
 587:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 588:mri/architectures/armv7-m/debug_cm3.h **** 
 589:mri/architectures/armv7-m/debug_cm3.h ****         pCurrentComparator++;
 1077              		.loc 4 589 9 is_stmt 1 discriminator 2 view .LVU304
 1078              		.loc 4 589 27 is_stmt 0 discriminator 2 view .LVU305
 1079 0026 0430     		adds	r0, r0, #4
 1080              	.LVL103:
 1081              		.loc 4 589 27 discriminator 2 view .LVU306
 1082              	.LBE271:
 581:mri/architectures/armv7-m/debug_cm3.h ****     {
 1083              		.loc 4 581 45 is_stmt 1 discriminator 2 view .LVU307
 1084 0028 0131     		adds	r1, r1, #1
 1085              	.LVL104:
 1086              	.L81:
 581:mri/architectures/armv7-m/debug_cm3.h ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 83


 1087              		.loc 4 581 20 discriminator 1 view .LVU308
 1088 002a 6145     		cmp	r1, ip
 1089 002c 0AD2     		bcs	.L86
 1090              	.LBB276:
 583:mri/architectures/armv7-m/debug_cm3.h **** 
 1091              		.loc 4 583 9 view .LVU309
 585:mri/architectures/armv7-m/debug_cm3.h ****         if (comparatorValueForThisBreakpoint == maskOffReservedBits)
 1092              		.loc 4 585 9 view .LVU310
 585:mri/architectures/armv7-m/debug_cm3.h ****         if (comparatorValueForThisBreakpoint == maskOffReservedBits)
 1093              		.loc 4 585 31 is_stmt 0 view .LVU311
 1094 002e 0368     		ldr	r3, [r0]
 1095              	.LVL105:
 1096              	.LBB272:
 1097              	.LBI272:
 545:mri/architectures/armv7-m/debug_cm3.h **** {
 1098              		.loc 4 545 26 is_stmt 1 view .LVU312
 1099              	.LBB273:
 547:mri/architectures/armv7-m/debug_cm3.h ****         return comparatorValue;
 1100              		.loc 4 547 5 view .LVU313
 1101              	.LBB274:
 1102              	.LBI274:
 455:mri/architectures/armv7-m/debug_cm3.h **** {
 1103              		.loc 4 455 26 view .LVU314
 1104              	.LBB275:
 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 1105              		.loc 4 457 5 view .LVU315
 457:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_REV_MASK) >> FP_CTRL_REV_SHIFT);
 1106              		.loc 4 457 14 is_stmt 0 view .LVU316
 1107 0030 054A     		ldr	r2, .L87
 1108 0032 1268     		ldr	r2, [r2]
 1109              	.LVL106:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 1110              		.loc 4 458 5 is_stmt 1 view .LVU317
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 1111              		.loc 4 458 47 is_stmt 0 view .LVU318
 1112 0034 120F     		lsrs	r2, r2, #28
 1113              	.LVL107:
 458:mri/architectures/armv7-m/debug_cm3.h **** }
 1114              		.loc 4 458 47 view .LVU319
 1115              	.LBE275:
 1116              	.LBE274:
 547:mri/architectures/armv7-m/debug_cm3.h ****         return comparatorValue;
 1117              		.loc 4 547 8 view .LVU320
 1118 0036 012A     		cmp	r2, #1
 1119 0038 F3D0     		beq	.L82
 550:mri/architectures/armv7-m/debug_cm3.h **** }
 1120              		.loc 4 550 9 is_stmt 1 view .LVU321
 550:mri/architectures/armv7-m/debug_cm3.h **** }
 1121              		.loc 4 550 33 is_stmt 0 view .LVU322
 1122 003a 23F00053 		bic	r3, r3, #536870912
 1123              	.LVL108:
 550:mri/architectures/armv7-m/debug_cm3.h **** }
 1124              		.loc 4 550 33 view .LVU323
 1125 003e 23F00203 		bic	r3, r3, #2
 1126 0042 EEE7     		b	.L82
 1127              	.LVL109:
 1128              	.L86:
ARM GAS  /tmp/ccXppZcm.s 			page 84


 550:mri/architectures/armv7-m/debug_cm3.h **** }
 1129              		.loc 4 550 33 view .LVU324
 1130              	.LBE273:
 1131              	.LBE272:
 1132              	.LBE276:
 590:mri/architectures/armv7-m/debug_cm3.h ****     }
 591:mri/architectures/armv7-m/debug_cm3.h **** 
 592:mri/architectures/armv7-m/debug_cm3.h ****     /* Return NULL if no FPB comparator is already enabled for this breakpoint. */
 593:mri/architectures/armv7-m/debug_cm3.h ****     return NULL;
 1133              		.loc 4 593 12 view .LVU325
 1134 0044 0020     		movs	r0, #0
 1135              	.LVL110:
 1136              	.L80:
 594:mri/architectures/armv7-m/debug_cm3.h **** }
 1137              		.loc 4 594 1 view .LVU326
 1138 0046 08BD     		pop	{r3, pc}
 1139              	.L88:
 1140              		.align	2
 1141              	.L87:
 1142 0048 002000E0 		.word	-536862720
 1143 004c 082000E0 		.word	-536862712
 1144              		.cfi_endproc
 1145              	.LFE185:
 1147              		.section	.text.findFreeFPBBreakpointComparator,"ax",%progbits
 1148              		.align	1
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1153              	findFreeFPBBreakpointComparator:
 1154              	.LFB186:
 595:mri/architectures/armv7-m/debug_cm3.h **** 
 596:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t* findFreeFPBBreakpointComparator(void)
 597:mri/architectures/armv7-m/debug_cm3.h **** {
 1155              		.loc 4 597 1 is_stmt 1 view -0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159 0000 70B5     		push	{r4, r5, r6, lr}
 1160              	.LCFI8:
 1161              		.cfi_def_cfa_offset 16
 1162              		.cfi_offset 4, -16
 1163              		.cfi_offset 5, -12
 1164              		.cfi_offset 6, -8
 1165              		.cfi_offset 14, -4
 598:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t* pCurrentComparator = FPB_COMP_ARRAY;
 1166              		.loc 4 598 5 view .LVU328
 1167              	.LVL111:
 599:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  codeComparatorCount;
 1168              		.loc 4 599 5 view .LVU329
 600:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  i;
 1169              		.loc 4 600 5 view .LVU330
 601:mri/architectures/armv7-m/debug_cm3.h **** 
 602:mri/architectures/armv7-m/debug_cm3.h ****     codeComparatorCount = getFPBCodeComparatorCount();
 1170              		.loc 4 602 5 view .LVU331
 1171              	.LBB277:
 1172              	.LBI277:
 461:mri/architectures/armv7-m/debug_cm3.h **** {
ARM GAS  /tmp/ccXppZcm.s 			page 85


 1173              		.loc 4 461 26 view .LVU332
 1174              	.LBB278:
 463:mri/architectures/armv7-m/debug_cm3.h ****     return (((controlValue & FP_CTRL_NUM_CODE_MSB_MASK) >> 8) |
 1175              		.loc 4 463 5 view .LVU333
 463:mri/architectures/armv7-m/debug_cm3.h ****     return (((controlValue & FP_CTRL_NUM_CODE_MSB_MASK) >> 8) |
 1176              		.loc 4 463 17 is_stmt 0 view .LVU334
 1177 0002 0C4B     		ldr	r3, .L96
 1178 0004 1B68     		ldr	r3, [r3]
 1179              	.LVL112:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1180              		.loc 4 464 5 is_stmt 1 view .LVU335
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1181              		.loc 4 464 57 is_stmt 0 view .LVU336
 1182 0006 1E0A     		lsrs	r6, r3, #8
 1183 0008 06F07006 		and	r6, r6, #112
 465:mri/architectures/armv7-m/debug_cm3.h **** }
 1184              		.loc 4 465 57 view .LVU337
 1185 000c C3F30313 		ubfx	r3, r3, #4, #4
 1186              	.LVL113:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1187              		.loc 4 464 63 view .LVU338
 1188 0010 1E43     		orrs	r6, r6, r3
 1189              	.LVL114:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1190              		.loc 4 464 63 view .LVU339
 1191              	.LBE278:
 1192              	.LBE277:
 603:mri/architectures/armv7-m/debug_cm3.h ****     for (i = 0 ; i < codeComparatorCount ; i++)
 1193              		.loc 4 603 5 is_stmt 1 view .LVU340
 1194              		.loc 4 603 12 is_stmt 0 view .LVU341
 1195 0012 0025     		movs	r5, #0
 598:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  codeComparatorCount;
 1196              		.loc 4 598 15 view .LVU342
 1197 0014 084C     		ldr	r4, .L96+4
 1198              		.loc 4 603 5 view .LVU343
 1199 0016 01E0     		b	.L90
 1200              	.LVL115:
 1201              	.L95:
 604:mri/architectures/armv7-m/debug_cm3.h ****     {
 605:mri/architectures/armv7-m/debug_cm3.h ****         if (!isFPBComparatorEnabled(*pCurrentComparator))
 606:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 607:mri/architectures/armv7-m/debug_cm3.h **** 
 608:mri/architectures/armv7-m/debug_cm3.h ****         pCurrentComparator++;
 1202              		.loc 4 608 9 is_stmt 1 discriminator 2 view .LVU344
 1203              		.loc 4 608 27 is_stmt 0 discriminator 2 view .LVU345
 1204 0018 0434     		adds	r4, r4, #4
 1205              	.LVL116:
 603:mri/architectures/armv7-m/debug_cm3.h ****     {
 1206              		.loc 4 603 45 is_stmt 1 discriminator 2 view .LVU346
 1207 001a 0135     		adds	r5, r5, #1
 1208              	.LVL117:
 1209              	.L90:
 603:mri/architectures/armv7-m/debug_cm3.h ****     {
 1210              		.loc 4 603 20 discriminator 1 view .LVU347
 1211 001c B542     		cmp	r5, r6
 1212 001e 05D2     		bcs	.L94
 605:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
ARM GAS  /tmp/ccXppZcm.s 			page 86


 1213              		.loc 4 605 9 view .LVU348
 605:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 1214              		.loc 4 605 14 is_stmt 0 view .LVU349
 1215 0020 2068     		ldr	r0, [r4]
 1216 0022 FFF7FEFF 		bl	isFPBComparatorEnabled
 1217              	.LVL118:
 605:mri/architectures/armv7-m/debug_cm3.h ****             return pCurrentComparator;
 1218              		.loc 4 605 12 view .LVU350
 1219 0026 0028     		cmp	r0, #0
 1220 0028 F6D1     		bne	.L95
 1221 002a 00E0     		b	.L89
 1222              	.L94:
 609:mri/architectures/armv7-m/debug_cm3.h ****     }
 610:mri/architectures/armv7-m/debug_cm3.h **** 
 611:mri/architectures/armv7-m/debug_cm3.h ****     /* Return NULL if no FPB breakpoint comparators are free. */
 612:mri/architectures/armv7-m/debug_cm3.h ****     return NULL;
 1223              		.loc 4 612 12 view .LVU351
 1224 002c 0024     		movs	r4, #0
 1225              	.LVL119:
 1226              	.L89:
 613:mri/architectures/armv7-m/debug_cm3.h **** }
 1227              		.loc 4 613 1 view .LVU352
 1228 002e 2046     		mov	r0, r4
 1229 0030 70BD     		pop	{r4, r5, r6, pc}
 1230              	.LVL120:
 1231              	.L97:
 1232              		.loc 4 613 1 view .LVU353
 1233 0032 00BF     		.align	2
 1234              	.L96:
 1235 0034 002000E0 		.word	-536862720
 1236 0038 082000E0 		.word	-536862712
 1237              		.cfi_endproc
 1238              	.LFE186:
 1240              		.section	.text.enableFPBBreakpoint,"ax",%progbits
 1241              		.align	1
 1242              		.syntax unified
 1243              		.thumb
 1244              		.thumb_func
 1246              	enableFPBBreakpoint:
 1247              	.LVL121:
 1248              	.LFB187:
 614:mri/architectures/armv7-m/debug_cm3.h **** 
 615:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t* enableFPBBreakpoint(uint32_t breakpointAddress, int32_t is32BitInstructio
 616:mri/architectures/armv7-m/debug_cm3.h **** {
 1249              		.loc 4 616 1 is_stmt 1 view -0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253              		.loc 4 616 1 is_stmt 0 view .LVU355
 1254 0000 70B5     		push	{r4, r5, r6, lr}
 1255              	.LCFI9:
 1256              		.cfi_def_cfa_offset 16
 1257              		.cfi_offset 4, -16
 1258              		.cfi_offset 5, -12
 1259              		.cfi_offset 6, -8
 1260              		.cfi_offset 14, -4
 1261 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccXppZcm.s 			page 87


 1262 0004 0D46     		mov	r5, r1
 617:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t* pExistingFPBBreakpoint;
 1263              		.loc 4 617 5 is_stmt 1 view .LVU356
 618:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t* pFreeFPBBreakpointComparator;
 1264              		.loc 4 618 5 view .LVU357
 619:mri/architectures/armv7-m/debug_cm3.h **** 
 620:mri/architectures/armv7-m/debug_cm3.h ****     pExistingFPBBreakpoint = findFPBBreakpointComparator(breakpointAddress, is32BitInstruction);
 1265              		.loc 4 620 5 view .LVU358
 1266              		.loc 4 620 30 is_stmt 0 view .LVU359
 1267 0006 FFF7FEFF 		bl	findFPBBreakpointComparator
 1268              	.LVL122:
 621:mri/architectures/armv7-m/debug_cm3.h ****     if (pExistingFPBBreakpoint)
 1269              		.loc 4 621 5 is_stmt 1 view .LVU360
 1270              		.loc 4 621 8 is_stmt 0 view .LVU361
 1271 000a 0646     		mov	r6, r0
 1272 000c 08B1     		cbz	r0, .L101
 1273              	.LVL123:
 1274              	.L98:
 622:mri/architectures/armv7-m/debug_cm3.h ****     {
 623:mri/architectures/armv7-m/debug_cm3.h ****         /* This breakpoint is already set to just return pointer to existing comparator. */
 624:mri/architectures/armv7-m/debug_cm3.h ****         return pExistingFPBBreakpoint;
 625:mri/architectures/armv7-m/debug_cm3.h ****     }
 626:mri/architectures/armv7-m/debug_cm3.h **** 
 627:mri/architectures/armv7-m/debug_cm3.h ****     pFreeFPBBreakpointComparator = findFreeFPBBreakpointComparator();
 628:mri/architectures/armv7-m/debug_cm3.h ****     if (!pFreeFPBBreakpointComparator)
 629:mri/architectures/armv7-m/debug_cm3.h ****     {
 630:mri/architectures/armv7-m/debug_cm3.h ****         /* All FPB breakpoint comparator slots are used so return NULL as error indicator. */
 631:mri/architectures/armv7-m/debug_cm3.h ****         return NULL;
 632:mri/architectures/armv7-m/debug_cm3.h ****     }
 633:mri/architectures/armv7-m/debug_cm3.h **** 
 634:mri/architectures/armv7-m/debug_cm3.h **** 
 635:mri/architectures/armv7-m/debug_cm3.h ****     *pFreeFPBBreakpointComparator = calculateFPBComparatorValue(breakpointAddress, is32BitInstructi
 636:mri/architectures/armv7-m/debug_cm3.h ****     return pFreeFPBBreakpointComparator;
 637:mri/architectures/armv7-m/debug_cm3.h **** }
 1275              		.loc 4 637 1 view .LVU362
 1276 000e 3046     		mov	r0, r6
 1277 0010 70BD     		pop	{r4, r5, r6, pc}
 1278              	.LVL124:
 1279              	.L101:
 627:mri/architectures/armv7-m/debug_cm3.h ****     if (!pFreeFPBBreakpointComparator)
 1280              		.loc 4 627 5 is_stmt 1 view .LVU363
 627:mri/architectures/armv7-m/debug_cm3.h ****     if (!pFreeFPBBreakpointComparator)
 1281              		.loc 4 627 36 is_stmt 0 view .LVU364
 1282 0012 FFF7FEFF 		bl	findFreeFPBBreakpointComparator
 1283              	.LVL125:
 628:mri/architectures/armv7-m/debug_cm3.h ****     {
 1284              		.loc 4 628 5 is_stmt 1 view .LVU365
 628:mri/architectures/armv7-m/debug_cm3.h ****     {
 1285              		.loc 4 628 8 is_stmt 0 view .LVU366
 1286 0016 0646     		mov	r6, r0
 1287              	.LVL126:
 628:mri/architectures/armv7-m/debug_cm3.h ****     {
 1288              		.loc 4 628 8 view .LVU367
 1289 0018 0028     		cmp	r0, #0
 1290 001a F8D0     		beq	.L98
 635:mri/architectures/armv7-m/debug_cm3.h ****     return pFreeFPBBreakpointComparator;
 1291              		.loc 4 635 5 is_stmt 1 view .LVU368
ARM GAS  /tmp/ccXppZcm.s 			page 88


 635:mri/architectures/armv7-m/debug_cm3.h ****     return pFreeFPBBreakpointComparator;
 1292              		.loc 4 635 37 is_stmt 0 view .LVU369
 1293 001c 2946     		mov	r1, r5
 1294 001e 2046     		mov	r0, r4
 1295              	.LVL127:
 635:mri/architectures/armv7-m/debug_cm3.h ****     return pFreeFPBBreakpointComparator;
 1296              		.loc 4 635 37 view .LVU370
 1297 0020 FFF7FEFF 		bl	calculateFPBComparatorValue
 1298              	.LVL128:
 635:mri/architectures/armv7-m/debug_cm3.h ****     return pFreeFPBBreakpointComparator;
 1299              		.loc 4 635 35 view .LVU371
 1300 0024 3060     		str	r0, [r6]
 636:mri/architectures/armv7-m/debug_cm3.h **** }
 1301              		.loc 4 636 5 is_stmt 1 view .LVU372
 636:mri/architectures/armv7-m/debug_cm3.h **** }
 1302              		.loc 4 636 12 is_stmt 0 view .LVU373
 1303 0026 F2E7     		b	.L98
 1304              		.cfi_endproc
 1305              	.LFE187:
 1307              		.section	.text.disableFPBBreakpointComparator,"ax",%progbits
 1308              		.align	1
 1309              		.syntax unified
 1310              		.thumb
 1311              		.thumb_func
 1313              	disableFPBBreakpointComparator:
 1314              	.LVL129:
 1315              	.LFB188:
 638:mri/architectures/armv7-m/debug_cm3.h **** 
 639:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t* disableFPBBreakpointComparator(uint32_t breakpointAddress, int32_t is32Bi
 640:mri/architectures/armv7-m/debug_cm3.h **** {
 1316              		.loc 4 640 1 is_stmt 1 view -0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320              		.loc 4 640 1 is_stmt 0 view .LVU375
 1321 0000 08B5     		push	{r3, lr}
 1322              	.LCFI10:
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 3, -8
 1325              		.cfi_offset 14, -4
 641:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t* pExistingFPBBreakpoint;
 1326              		.loc 4 641 5 is_stmt 1 view .LVU376
 642:mri/architectures/armv7-m/debug_cm3.h **** 
 643:mri/architectures/armv7-m/debug_cm3.h ****     pExistingFPBBreakpoint = findFPBBreakpointComparator(breakpointAddress, is32BitInstruction);
 1327              		.loc 4 643 5 view .LVU377
 1328              		.loc 4 643 30 is_stmt 0 view .LVU378
 1329 0002 FFF7FEFF 		bl	findFPBBreakpointComparator
 1330              	.LVL130:
 644:mri/architectures/armv7-m/debug_cm3.h ****     if (pExistingFPBBreakpoint)
 1331              		.loc 4 644 5 is_stmt 1 view .LVU379
 1332              		.loc 4 644 8 is_stmt 0 view .LVU380
 1333 0006 08B1     		cbz	r0, .L102
 645:mri/architectures/armv7-m/debug_cm3.h ****         clearFPBComparator(pExistingFPBBreakpoint);
 1334              		.loc 4 645 9 is_stmt 1 view .LVU381
 1335              	.LVL131:
 1336              	.LBB279:
 1337              	.LBI279:
ARM GAS  /tmp/ccXppZcm.s 			page 89


 474:mri/architectures/armv7-m/debug_cm3.h **** {
 1338              		.loc 4 474 22 view .LVU382
 1339              	.LBB280:
 476:mri/architectures/armv7-m/debug_cm3.h **** }
 1340              		.loc 4 476 5 view .LVU383
 476:mri/architectures/armv7-m/debug_cm3.h **** }
 1341              		.loc 4 476 18 is_stmt 0 view .LVU384
 1342 0008 0023     		movs	r3, #0
 1343 000a 0360     		str	r3, [r0]
 1344              	.LVL132:
 476:mri/architectures/armv7-m/debug_cm3.h **** }
 1345              		.loc 4 476 18 view .LVU385
 1346              	.LBE280:
 1347              	.LBE279:
 646:mri/architectures/armv7-m/debug_cm3.h **** 
 647:mri/architectures/armv7-m/debug_cm3.h ****     return pExistingFPBBreakpoint;
 1348              		.loc 4 647 5 is_stmt 1 view .LVU386
 1349              	.L102:
 648:mri/architectures/armv7-m/debug_cm3.h **** }
 1350              		.loc 4 648 1 is_stmt 0 view .LVU387
 1351 000c 08BD     		pop	{r3, pc}
 1352              		.cfi_endproc
 1353              	.LFE188:
 1355              		.section	.text.clearFPBComparators,"ax",%progbits
 1356              		.align	1
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1361              	clearFPBComparators:
 1362              	.LFB189:
 649:mri/architectures/armv7-m/debug_cm3.h **** 
 650:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void clearFPBComparators(void)
 651:mri/architectures/armv7-m/debug_cm3.h **** {
 1363              		.loc 4 651 1 is_stmt 1 view -0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 652:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t* pCurrentComparator = FPB_COMP_ARRAY;
 1368              		.loc 4 652 5 view .LVU389
 1369              	.LVL133:
 653:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  codeComparatorCount;
 1370              		.loc 4 653 5 view .LVU390
 654:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  literalComparatorCount;
 1371              		.loc 4 654 5 view .LVU391
 655:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  totalComparatorCount;
 1372              		.loc 4 655 5 view .LVU392
 656:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  i;
 1373              		.loc 4 656 5 view .LVU393
 657:mri/architectures/armv7-m/debug_cm3.h **** 
 658:mri/architectures/armv7-m/debug_cm3.h ****     codeComparatorCount = getFPBCodeComparatorCount();
 1374              		.loc 4 658 5 view .LVU394
 1375              	.LBB281:
 1376              	.LBI281:
 461:mri/architectures/armv7-m/debug_cm3.h **** {
 1377              		.loc 4 461 26 view .LVU395
 1378              	.LBB282:
ARM GAS  /tmp/ccXppZcm.s 			page 90


 463:mri/architectures/armv7-m/debug_cm3.h ****     return (((controlValue & FP_CTRL_NUM_CODE_MSB_MASK) >> 8) |
 1379              		.loc 4 463 5 view .LVU396
 463:mri/architectures/armv7-m/debug_cm3.h ****     return (((controlValue & FP_CTRL_NUM_CODE_MSB_MASK) >> 8) |
 1380              		.loc 4 463 17 is_stmt 0 view .LVU397
 1381 0000 0A49     		ldr	r1, .L108
 1382 0002 0A68     		ldr	r2, [r1]
 1383              	.LVL134:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1384              		.loc 4 464 5 is_stmt 1 view .LVU398
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1385              		.loc 4 464 57 is_stmt 0 view .LVU399
 1386 0004 130A     		lsrs	r3, r2, #8
 1387 0006 03F07003 		and	r3, r3, #112
 465:mri/architectures/armv7-m/debug_cm3.h **** }
 1388              		.loc 4 465 57 view .LVU400
 1389 000a C2F30312 		ubfx	r2, r2, #4, #4
 1390              	.LVL135:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1391              		.loc 4 464 63 view .LVU401
 1392 000e 1343     		orrs	r3, r3, r2
 1393              	.LVL136:
 464:mri/architectures/armv7-m/debug_cm3.h ****             ((controlValue & FP_CTRL_NUM_CODE_LSB_MASK) >> 4));
 1394              		.loc 4 464 63 view .LVU402
 1395              	.LBE282:
 1396              	.LBE281:
 659:mri/architectures/armv7-m/debug_cm3.h ****     literalComparatorCount = getFPBLiteralComparatorCount();
 1397              		.loc 4 659 5 is_stmt 1 view .LVU403
 1398              	.LBB283:
 1399              	.LBI283:
 468:mri/architectures/armv7-m/debug_cm3.h **** {
 1400              		.loc 4 468 26 view .LVU404
 1401              	.LBB284:
 470:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_NUM_LIT_MASK) >> FP_CTRL_NUM_LIT_SHIFT);
 1402              		.loc 4 470 5 view .LVU405
 470:mri/architectures/armv7-m/debug_cm3.h ****     return ((controlValue & FP_CTRL_NUM_LIT_MASK) >> FP_CTRL_NUM_LIT_SHIFT);
 1403              		.loc 4 470 17 is_stmt 0 view .LVU406
 1404 0010 0868     		ldr	r0, [r1]
 1405              	.LVL137:
 471:mri/architectures/armv7-m/debug_cm3.h **** }
 1406              		.loc 4 471 5 is_stmt 1 view .LVU407
 471:mri/architectures/armv7-m/debug_cm3.h **** }
 1407              		.loc 4 471 51 is_stmt 0 view .LVU408
 1408 0012 C0F30320 		ubfx	r0, r0, #8, #4
 1409              	.LVL138:
 471:mri/architectures/armv7-m/debug_cm3.h **** }
 1410              		.loc 4 471 51 view .LVU409
 1411              	.LBE284:
 1412              	.LBE283:
 660:mri/architectures/armv7-m/debug_cm3.h ****     totalComparatorCount = codeComparatorCount + literalComparatorCount;
 1413              		.loc 4 660 5 is_stmt 1 view .LVU410
 1414              		.loc 4 660 26 is_stmt 0 view .LVU411
 1415 0016 1844     		add	r0, r0, r3
 1416              	.LVL139:
 661:mri/architectures/armv7-m/debug_cm3.h ****     for (i = 0 ; i < totalComparatorCount ; i++)
 1417              		.loc 4 661 5 is_stmt 1 view .LVU412
 1418              		.loc 4 661 12 is_stmt 0 view .LVU413
 1419 0018 0023     		movs	r3, #0
ARM GAS  /tmp/ccXppZcm.s 			page 91


 1420              	.LVL140:
 652:mri/architectures/armv7-m/debug_cm3.h ****     uint32_t  codeComparatorCount;
 1421              		.loc 4 652 15 view .LVU414
 1422 001a 054A     		ldr	r2, .L108+4
 1423              		.loc 4 661 5 view .LVU415
 1424 001c 03E0     		b	.L106
 1425              	.LVL141:
 1426              	.L107:
 662:mri/architectures/armv7-m/debug_cm3.h ****     {
 663:mri/architectures/armv7-m/debug_cm3.h ****         clearFPBComparator(pCurrentComparator);
 1427              		.loc 4 663 9 is_stmt 1 view .LVU416
 1428              	.LBB285:
 1429              	.LBI285:
 474:mri/architectures/armv7-m/debug_cm3.h **** {
 1430              		.loc 4 474 22 view .LVU417
 1431              	.LBB286:
 476:mri/architectures/armv7-m/debug_cm3.h **** }
 1432              		.loc 4 476 5 view .LVU418
 476:mri/architectures/armv7-m/debug_cm3.h **** }
 1433              		.loc 4 476 18 is_stmt 0 view .LVU419
 1434 001e 0021     		movs	r1, #0
 1435 0020 42F8041B 		str	r1, [r2], #4
 1436              	.LVL142:
 476:mri/architectures/armv7-m/debug_cm3.h **** }
 1437              		.loc 4 476 18 view .LVU420
 1438              	.LBE286:
 1439              	.LBE285:
 664:mri/architectures/armv7-m/debug_cm3.h ****         pCurrentComparator++;
 1440              		.loc 4 664 9 is_stmt 1 view .LVU421
 661:mri/architectures/armv7-m/debug_cm3.h ****     {
 1441              		.loc 4 661 46 view .LVU422
 1442 0024 0133     		adds	r3, r3, #1
 1443              	.LVL143:
 1444              	.L106:
 661:mri/architectures/armv7-m/debug_cm3.h ****     {
 1445              		.loc 4 661 20 discriminator 1 view .LVU423
 1446 0026 8342     		cmp	r3, r0
 1447 0028 F9D3     		bcc	.L107
 665:mri/architectures/armv7-m/debug_cm3.h ****     }
 666:mri/architectures/armv7-m/debug_cm3.h **** }
 1448              		.loc 4 666 1 is_stmt 0 view .LVU424
 1449 002a 7047     		bx	lr
 1450              	.L109:
 1451              		.align	2
 1452              	.L108:
 1453 002c 002000E0 		.word	-536862720
 1454 0030 082000E0 		.word	-536862712
 1455              		.cfi_endproc
 1456              	.LFE189:
 1458              		.section	.text.fillDebuggerStack,"ax",%progbits
 1459              		.align	1
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1464              	fillDebuggerStack:
 1465              	.LFB219:
   1:mri/architectures/armv7-m/armv7-m.c **** /* Copyright 2022 Adam Green (https://github.com/adamgreen/)
ARM GAS  /tmp/ccXppZcm.s 			page 92


   2:mri/architectures/armv7-m/armv7-m.c **** 
   3:mri/architectures/armv7-m/armv7-m.c ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/architectures/armv7-m/armv7-m.c ****    you may not use this file except in compliance with the License.
   5:mri/architectures/armv7-m/armv7-m.c ****    You may obtain a copy of the License at
   6:mri/architectures/armv7-m/armv7-m.c **** 
   7:mri/architectures/armv7-m/armv7-m.c ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/architectures/armv7-m/armv7-m.c **** 
   9:mri/architectures/armv7-m/armv7-m.c ****    Unless required by applicable law or agreed to in writing, software
  10:mri/architectures/armv7-m/armv7-m.c ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/architectures/armv7-m/armv7-m.c ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/architectures/armv7-m/armv7-m.c ****    See the License for the specific language governing permissions and
  13:mri/architectures/armv7-m/armv7-m.c ****    limitations under the License.
  14:mri/architectures/armv7-m/armv7-m.c **** */
  15:mri/architectures/armv7-m/armv7-m.c **** /* Routines to expose the Cortex-M functionality to the mri debugger. */
  16:mri/architectures/armv7-m/armv7-m.c **** #include <core/libc.h>
  17:mri/architectures/armv7-m/armv7-m.c **** #include <core/signal.h>
  18:mri/architectures/armv7-m/armv7-m.c **** #include <core/core.h>
  19:mri/architectures/armv7-m/armv7-m.c **** #include <core/platforms.h>
  20:mri/architectures/armv7-m/armv7-m.c **** #include <core/gdb_console.h>
  21:mri/architectures/armv7-m/armv7-m.c **** #include <semihost/newlib/newlib_stubs.h>
  22:mri/architectures/armv7-m/armv7-m.c **** #include "debug_cm3.h"
  23:mri/architectures/armv7-m/armv7-m.c **** #include "armv7-m.h"
  24:mri/architectures/armv7-m/armv7-m.c **** 
  25:mri/architectures/armv7-m/armv7-m.c **** /* Fake stack used when task encounters stacking/unstacking fault. */
  26:mri/architectures/armv7-m/armv7-m.c **** static const uint32_t  g_fakeStack[] = { 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
  27:mri/architectures/armv7-m/armv7-m.c ****                                          0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
  28:mri/architectures/armv7-m/armv7-m.c **** #if MRI_DEVICE_HAS_FPU
  29:mri/architectures/armv7-m/armv7-m.c ****                                          0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
  30:mri/architectures/armv7-m/armv7-m.c ****                                          0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
  31:mri/architectures/armv7-m/armv7-m.c ****                                          0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
  32:mri/architectures/armv7-m/armv7-m.c ****                                          0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
  33:mri/architectures/armv7-m/armv7-m.c ****                                          0xDEADDEAD, 0xDEADDEAD
  34:mri/architectures/armv7-m/armv7-m.c **** #endif
  35:mri/architectures/armv7-m/armv7-m.c ****                                         };
  36:mri/architectures/armv7-m/armv7-m.c **** uint64_t            mriCortexMDebuggerStack[CORTEXM_DEBUGGER_STACK_SIZE];
  37:mri/architectures/armv7-m/armv7-m.c **** volatile uint32_t   mriCortexMFlags;
  38:mri/architectures/armv7-m/armv7-m.c **** CortexMState        mriCortexMState;
  39:mri/architectures/armv7-m/armv7-m.c **** 
  40:mri/architectures/armv7-m/armv7-m.c **** /* NOTE: This is the original version of the following XML which has had things stripped to reduce 
  41:mri/architectures/armv7-m/armv7-m.c ****          FLASH consumed by the debug monitor.  This includes the removal of the copyright comment.
  42:mri/architectures/armv7-m/armv7-m.c **** <?xml version="1.0"?>
  43:mri/architectures/armv7-m/armv7-m.c **** <!-- Copyright (C) 2010, 2011 Free Software Foundation, Inc.
  44:mri/architectures/armv7-m/armv7-m.c **** 
  45:mri/architectures/armv7-m/armv7-m.c ****      Copying and distribution of this file, with or without modification,
  46:mri/architectures/armv7-m/armv7-m.c ****      are permitted in any medium without royalty provided the copyright
  47:mri/architectures/armv7-m/armv7-m.c ****      notice and this notice are preserved.  -->
  48:mri/architectures/armv7-m/armv7-m.c **** 
  49:mri/architectures/armv7-m/armv7-m.c **** <!DOCTYPE feature SYSTEM "gdb-target.dtd">
  50:mri/architectures/armv7-m/armv7-m.c **** <feature name="org.gnu.gdb.arm.m-profile">
  51:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r0" bitsize="32"/>
  52:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r1" bitsize="32"/>
  53:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r2" bitsize="32"/>
  54:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r3" bitsize="32"/>
  55:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r4" bitsize="32"/>
  56:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r5" bitsize="32"/>
  57:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r6" bitsize="32"/>
  58:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r7" bitsize="32"/>
ARM GAS  /tmp/ccXppZcm.s 			page 93


  59:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r8" bitsize="32"/>
  60:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r9" bitsize="32"/>
  61:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r10" bitsize="32"/>
  62:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r11" bitsize="32"/>
  63:mri/architectures/armv7-m/armv7-m.c ****   <reg name="r12" bitsize="32"/>
  64:mri/architectures/armv7-m/armv7-m.c ****   <reg name="sp" bitsize="32" type="data_ptr"/>
  65:mri/architectures/armv7-m/armv7-m.c ****   <reg name="lr" bitsize="32"/>
  66:mri/architectures/armv7-m/armv7-m.c ****   <reg name="pc" bitsize="32" type="code_ptr"/>
  67:mri/architectures/armv7-m/armv7-m.c ****   <reg name="xpsr" bitsize="32" regnum="25"/>
  68:mri/architectures/armv7-m/armv7-m.c **** </feature>
  69:mri/architectures/armv7-m/armv7-m.c **** */
  70:mri/architectures/armv7-m/armv7-m.c **** static const char g_targetXml[] =
  71:mri/architectures/armv7-m/armv7-m.c ****     "<?xml version=\"1.0\"?>\n"
  72:mri/architectures/armv7-m/armv7-m.c ****     "<!DOCTYPE feature SYSTEM \"gdb-target.dtd\">\n"
  73:mri/architectures/armv7-m/armv7-m.c ****     "<target>\n"
  74:mri/architectures/armv7-m/armv7-m.c ****     "<feature name=\"org.gnu.gdb.arm.m-profile\">\n"
  75:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r0\" bitsize=\"32\"/>\n"
  76:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r1\" bitsize=\"32\"/>\n"
  77:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r2\" bitsize=\"32\"/>\n"
  78:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r3\" bitsize=\"32\"/>\n"
  79:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r4\" bitsize=\"32\"/>\n"
  80:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r5\" bitsize=\"32\"/>\n"
  81:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r6\" bitsize=\"32\"/>\n"
  82:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r7\" bitsize=\"32\"/>\n"
  83:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r8\" bitsize=\"32\"/>\n"
  84:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r9\" bitsize=\"32\"/>\n"
  85:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r10\" bitsize=\"32\"/>\n"
  86:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r11\" bitsize=\"32\"/>\n"
  87:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"r12\" bitsize=\"32\"/>\n"
  88:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"sp\" bitsize=\"32\" type=\"data_ptr\"/>\n"
  89:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"lr\" bitsize=\"32\" type=\"code_ptr\"/>\n"
  90:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"pc\" bitsize=\"32\" type=\"code_ptr\"/>\n"
  91:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"xpsr\" bitsize=\"32\" regnum=\"25\"/>\n"
  92:mri/architectures/armv7-m/armv7-m.c ****     "</feature>\n"
  93:mri/architectures/armv7-m/armv7-m.c **** #if !MRI_THREAD_MRI
  94:mri/architectures/armv7-m/armv7-m.c ****     "<feature name=\"org.gnu.gdb.arm.m-system\">\n"
  95:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"msp\" bitsize=\"32\" regnum=\"26\"/>\n"
  96:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"psp\" bitsize=\"32\" regnum=\"27\"/>\n"
  97:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"primask\" bitsize=\"32\" regnum=\"28\"/>\n"
  98:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"basepri\" bitsize=\"32\" regnum=\"29\"/>\n"
  99:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"faultmask\" bitsize=\"32\" regnum=\"30\"/>\n"
 100:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"control\" bitsize=\"32\" regnum=\"31\"/>\n"
 101:mri/architectures/armv7-m/armv7-m.c ****     "</feature>\n"
 102:mri/architectures/armv7-m/armv7-m.c **** #endif
 103:mri/architectures/armv7-m/armv7-m.c **** #if MRI_DEVICE_HAS_FPU
 104:mri/architectures/armv7-m/armv7-m.c ****     "<feature name=\"org.gnu.gdb.arm.vfp\">\n"
 105:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d0\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 106:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d1\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 107:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d2\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 108:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d3\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 109:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d4\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 110:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d5\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 111:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d6\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 112:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d7\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 113:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d8\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 114:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d9\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 115:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d10\" bitsize=\"64\" type=\"ieee_double\"/>\n"
ARM GAS  /tmp/ccXppZcm.s 			page 94


 116:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d11\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 117:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d12\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 118:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d13\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 119:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d14\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 120:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"d15\" bitsize=\"64\" type=\"ieee_double\"/>\n"
 121:mri/architectures/armv7-m/armv7-m.c ****     "<reg name=\"fpscr\" bitsize=\"32\" type=\"int\" group=\"float\"/>\n"
 122:mri/architectures/armv7-m/armv7-m.c ****     "</feature>\n"
 123:mri/architectures/armv7-m/armv7-m.c **** #endif
 124:mri/architectures/armv7-m/armv7-m.c ****     "</target>\n";
 125:mri/architectures/armv7-m/armv7-m.c **** 
 126:mri/architectures/armv7-m/armv7-m.c **** /* Reference this handler in the ASM module to make sure that it gets linked in. */
 127:mri/architectures/armv7-m/armv7-m.c **** void mriExceptionHandler(void);
 128:mri/architectures/armv7-m/armv7-m.c **** 
 129:mri/architectures/armv7-m/armv7-m.c **** 
 130:mri/architectures/armv7-m/armv7-m.c **** static void fillDebuggerStack(void);
 131:mri/architectures/armv7-m/armv7-m.c **** static void clearState(void);
 132:mri/architectures/armv7-m/armv7-m.c **** static void determinePriorityBitShift(void);
 133:mri/architectures/armv7-m/armv7-m.c **** static void configureDWTandFPB(void);
 134:mri/architectures/armv7-m/armv7-m.c **** static void defaultSvcAndSysTickInterruptsToLowerPriority(uint8_t priority);
 135:mri/architectures/armv7-m/armv7-m.c **** static void defaultExternalInterruptsToLowerPriority(uint8_t priority, IRQn_Type highestExternalIrq
 136:mri/architectures/armv7-m/armv7-m.c **** static void disableDebuggerStack(void);
 137:mri/architectures/armv7-m/armv7-m.c **** static void enableDebugMonitorAtSpecifiedPriority(uint8_t priority);
 138:mri/architectures/armv7-m/armv7-m.c **** void mriCortexMInit(Token* pParameterTokens, uint8_t debugMonPriority, IRQn_Type highestExternalIrq
 139:mri/architectures/armv7-m/armv7-m.c **** {
 140:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_THREAD_MRI)
 141:mri/architectures/armv7-m/armv7-m.c ****     {
 142:mri/architectures/armv7-m/armv7-m.c ****         /* Always set DebugMon interrupt priority to lowest level, 255, when using threaded MRI. */
 143:mri/architectures/armv7-m/armv7-m.c ****         debugMonPriority = 255;
 144:mri/architectures/armv7-m/armv7-m.c ****     }
 145:mri/architectures/armv7-m/armv7-m.c ****     else
 146:mri/architectures/armv7-m/armv7-m.c ****     {
 147:mri/architectures/armv7-m/armv7-m.c ****         /* Reference routine in ASM module to make sure that is gets linked in. */
 148:mri/architectures/armv7-m/armv7-m.c ****         void (* volatile dummyReference)(void) = mriExceptionHandler;
 149:mri/architectures/armv7-m/armv7-m.c ****         (void)dummyReference;
 150:mri/architectures/armv7-m/armv7-m.c ****     }
 151:mri/architectures/armv7-m/armv7-m.c ****     (void)pParameterTokens;
 152:mri/architectures/armv7-m/armv7-m.c **** 
 153:mri/architectures/armv7-m/armv7-m.c ****     fillDebuggerStack();
 154:mri/architectures/armv7-m/armv7-m.c ****     clearState();
 155:mri/architectures/armv7-m/armv7-m.c ****     determinePriorityBitShift();
 156:mri/architectures/armv7-m/armv7-m.c ****     configureDWTandFPB();
 157:mri/architectures/armv7-m/armv7-m.c ****     if (debugMonPriority == 0)
 158:mri/architectures/armv7-m/armv7-m.c ****     {
 159:mri/architectures/armv7-m/armv7-m.c ****         defaultSvcAndSysTickInterruptsToLowerPriority(debugMonPriority+1);
 160:mri/architectures/armv7-m/armv7-m.c ****         defaultExternalInterruptsToLowerPriority(debugMonPriority+1, highestExternalIrq);
 161:mri/architectures/armv7-m/armv7-m.c ****     }
 162:mri/architectures/armv7-m/armv7-m.c ****     else
 163:mri/architectures/armv7-m/armv7-m.c ****     {
 164:mri/architectures/armv7-m/armv7-m.c ****         /* When not running MRI at highest priority, the user is responsible for the priority level
 165:mri/architectures/armv7-m/armv7-m.c ****         /* other interrupts in the system. Only the user knows what they want to be able to debug a
 166:mri/architectures/armv7-m/armv7-m.c ****         /* run in the background while the debugger is active. */
 167:mri/architectures/armv7-m/armv7-m.c ****         /* Don't want to change MSP to point to special debugger stack during debug exceptions if h
 168:mri/architectures/armv7-m/armv7-m.c ****         /* interrupts exist that can run while stopped in debugger. */
 169:mri/architectures/armv7-m/armv7-m.c ****         disableDebuggerStack();
 170:mri/architectures/armv7-m/armv7-m.c ****     }
 171:mri/architectures/armv7-m/armv7-m.c ****     Platform_DisableSingleStep();
 172:mri/architectures/armv7-m/armv7-m.c ****     clearMonitorPending();
ARM GAS  /tmp/ccXppZcm.s 			page 95


 173:mri/architectures/armv7-m/armv7-m.c ****     enableDebugMonitorAtSpecifiedPriority(debugMonPriority);
 174:mri/architectures/armv7-m/armv7-m.c **** }
 175:mri/architectures/armv7-m/armv7-m.c **** 
 176:mri/architectures/armv7-m/armv7-m.c **** static void fillDebuggerStack(void)
 177:mri/architectures/armv7-m/armv7-m.c **** {
 1466              		.loc 1 177 1 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470              		@ link register save eliminated.
 178:mri/architectures/armv7-m/armv7-m.c ****     uint64_t fillValue = ((uint64_t)CORTEXM_DEBUGGER_STACK_FILL << 32) | (uint64_t)CORTEXM_DEBUGGER
 1471              		.loc 1 178 5 view .LVU426
 1472              	.LVL144:
 179:mri/architectures/armv7-m/armv7-m.c ****     size_t i;
 1473              		.loc 1 179 5 view .LVU427
 180:mri/architectures/armv7-m/armv7-m.c **** 
 181:mri/architectures/armv7-m/armv7-m.c ****     for (i = 0 ; i < sizeof(mriCortexMDebuggerStack)/sizeof(mriCortexMDebuggerStack[0]) ; i++)
 1474              		.loc 1 181 5 view .LVU428
 1475              		.loc 1 181 12 is_stmt 0 view .LVU429
 1476 0000 0023     		movs	r3, #0
 1477              		.loc 1 181 5 view .LVU430
 1478 0002 08E0     		b	.L111
 1479              	.LVL145:
 1480              	.L112:
 182:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMDebuggerStack[i] = fillValue;
 1481              		.loc 1 182 9 is_stmt 1 discriminator 3 view .LVU431
 1482              		.loc 1 182 36 is_stmt 0 discriminator 3 view .LVU432
 1483 0004 084A     		ldr	r2, .L113+8
 1484 0006 02EBC302 		add	r2, r2, r3, lsl #3
 1485 000a 05A1     		adr	r1, .L113
 1486 000c D1E90001 		ldrd	r0, [r1]
 1487 0010 C2E90001 		strd	r0, [r2]
 181:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMDebuggerStack[i] = fillValue;
 1488              		.loc 1 181 92 is_stmt 1 discriminator 3 view .LVU433
 1489 0014 0133     		adds	r3, r3, #1
 1490              	.LVL146:
 1491              	.L111:
 181:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMDebuggerStack[i] = fillValue;
 1492              		.loc 1 181 20 discriminator 1 view .LVU434
 1493 0016 702B     		cmp	r3, #112
 1494 0018 F4D9     		bls	.L112
 183:mri/architectures/armv7-m/armv7-m.c **** }
 1495              		.loc 1 183 1 is_stmt 0 view .LVU435
 1496 001a 7047     		bx	lr
 1497              	.L114:
 1498 001c AFF30080 		.align	3
 1499              	.L113:
 1500 0020 EFBEADDE 		.word	-559038737
 1501 0024 EFBEADDE 		.word	-559038737
 1502 0028 00000000 		.word	mriCortexMDebuggerStack
 1503              		.cfi_endproc
 1504              	.LFE219:
 1506              		.section	.text.configureDWTandFPB,"ax",%progbits
 1507              		.align	1
 1508              		.syntax unified
 1509              		.thumb
 1510              		.thumb_func
ARM GAS  /tmp/ccXppZcm.s 			page 96


 1512              	configureDWTandFPB:
 1513              	.LFB222:
 184:mri/architectures/armv7-m/armv7-m.c **** 
 185:mri/architectures/armv7-m/armv7-m.c **** static void clearState(void)
 186:mri/architectures/armv7-m/armv7-m.c **** {
 187:mri/architectures/armv7-m/armv7-m.c ****     mri_memset(&mriCortexMState, 0, sizeof(mriCortexMState));
 188:mri/architectures/armv7-m/armv7-m.c **** }
 189:mri/architectures/armv7-m/armv7-m.c **** 
 190:mri/architectures/armv7-m/armv7-m.c **** /* Cortex-M7 microcontrollers name the SHP priority registers SHPR unlike other ARMv7-M devices. */
 191:mri/architectures/armv7-m/armv7-m.c **** #if defined(__CORTEX_M) && (__CORTEX_M == 7U)
 192:mri/architectures/armv7-m/armv7-m.c **** #define SHP SHPR
 193:mri/architectures/armv7-m/armv7-m.c **** #endif
 194:mri/architectures/armv7-m/armv7-m.c **** 
 195:mri/architectures/armv7-m/armv7-m.c **** static void determinePriorityBitShift(void)
 196:mri/architectures/armv7-m/armv7-m.c **** {
 197:mri/architectures/armv7-m/armv7-m.c ****     const uint32_t debugMonExceptionNumber = 12;
 198:mri/architectures/armv7-m/armv7-m.c ****     uint32_t zeroBitCount;
 199:mri/architectures/armv7-m/armv7-m.c ****     uint32_t priorityBitShift;
 200:mri/architectures/armv7-m/armv7-m.c **** 
 201:mri/architectures/armv7-m/armv7-m.c ****     /* Setting DebugMon priority to 0xFF to see how many lsbits read back as zero. */
 202:mri/architectures/armv7-m/armv7-m.c ****     /* DebugMon priority will later be set correctly by mriCortexMInit(). */
 203:mri/architectures/armv7-m/armv7-m.c ****     SCB->SHP[debugMonExceptionNumber-4] = 0xFF;
 204:mri/architectures/armv7-m/armv7-m.c ****     zeroBitCount = 32 - (uint32_t)__CLZ(~(SCB->SHP[debugMonExceptionNumber-4] | 0xFFFFFF00));
 205:mri/architectures/armv7-m/armv7-m.c ****     priorityBitShift = NVIC_GetPriorityGrouping() + 1;
 206:mri/architectures/armv7-m/armv7-m.c ****     if (zeroBitCount > priorityBitShift)
 207:mri/architectures/armv7-m/armv7-m.c ****         priorityBitShift = zeroBitCount;
 208:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.priorityBitShift = priorityBitShift;
 209:mri/architectures/armv7-m/armv7-m.c **** }
 210:mri/architectures/armv7-m/armv7-m.c **** 
 211:mri/architectures/armv7-m/armv7-m.c **** static void configureDWTandFPB(void)
 212:mri/architectures/armv7-m/armv7-m.c **** {
 1514              		.loc 1 212 1 is_stmt 1 view -0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518 0000 08B5     		push	{r3, lr}
 1519              	.LCFI11:
 1520              		.cfi_def_cfa_offset 8
 1521              		.cfi_offset 3, -8
 1522              		.cfi_offset 14, -4
 213:mri/architectures/armv7-m/armv7-m.c ****     enableDWTandITM();
 1523              		.loc 1 213 5 view .LVU437
 1524              	.LBB287:
 1525              	.LBI287:
  99:mri/architectures/armv7-m/debug_cm3.h **** {
 1526              		.loc 4 99 22 view .LVU438
 1527              	.LBB288:
 101:mri/architectures/armv7-m/debug_cm3.h **** }
 1528              		.loc 4 101 5 view .LVU439
 101:mri/architectures/armv7-m/debug_cm3.h **** }
 1529              		.loc 4 101 14 is_stmt 0 view .LVU440
 1530 0002 084A     		ldr	r2, .L117
 1531 0004 D2F8FC30 		ldr	r3, [r2, #252]
 101:mri/architectures/armv7-m/debug_cm3.h **** }
 1532              		.loc 4 101 22 view .LVU441
 1533 0008 43F08073 		orr	r3, r3, #16777216
 1534 000c C2F8FC30 		str	r3, [r2, #252]
ARM GAS  /tmp/ccXppZcm.s 			page 97


 1535              	.LBE288:
 1536              	.LBE287:
 214:mri/architectures/armv7-m/armv7-m.c ****     initDWT();
 1537              		.loc 1 214 5 is_stmt 1 view .LVU442
 1538              	.LBB289:
 1539              	.LBI289:
 198:mri/architectures/armv7-m/debug_cm3.h **** {
 1540              		.loc 4 198 22 view .LVU443
 1541              	.LBB290:
 200:mri/architectures/armv7-m/debug_cm3.h **** }
 1542              		.loc 4 200 5 view .LVU444
 1543 0010 FFF7FEFF 		bl	clearDWTComparators
 1544              	.LVL147:
 1545              	.LBE290:
 1546              	.LBE289:
 215:mri/architectures/armv7-m/armv7-m.c ****     initFPB();
 1547              		.loc 1 215 5 view .LVU445
 1548              	.LBB291:
 1549              	.LBI291:
 667:mri/architectures/armv7-m/debug_cm3.h **** 
 668:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void enableFPB(void)
 669:mri/architectures/armv7-m/debug_cm3.h **** {
 670:mri/architectures/armv7-m/debug_cm3.h ****     FPB->CTRL |= (FP_CTRL_KEY | FP_CTRL_ENABLE);
 671:mri/architectures/armv7-m/debug_cm3.h **** }
 672:mri/architectures/armv7-m/debug_cm3.h **** 
 673:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void disableFPB(void)
 674:mri/architectures/armv7-m/debug_cm3.h **** {
 675:mri/architectures/armv7-m/debug_cm3.h ****     FPB->CTRL = FP_CTRL_KEY | (FPB->CTRL & ~FP_CTRL_ENABLE);
 676:mri/architectures/armv7-m/debug_cm3.h **** }
 677:mri/architectures/armv7-m/debug_cm3.h **** 
 678:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void initFPB(void)
 1550              		.loc 4 678 22 view .LVU446
 1551              	.LBB292:
 679:mri/architectures/armv7-m/debug_cm3.h **** {
 680:mri/architectures/armv7-m/debug_cm3.h ****     clearFPBComparators();
 1552              		.loc 4 680 5 view .LVU447
 1553 0014 FFF7FEFF 		bl	clearFPBComparators
 1554              	.LVL148:
 681:mri/architectures/armv7-m/debug_cm3.h ****     enableFPB();
 1555              		.loc 4 681 5 view .LVU448
 1556              	.LBB293:
 1557              	.LBI293:
 668:mri/architectures/armv7-m/debug_cm3.h **** {
 1558              		.loc 4 668 22 view .LVU449
 1559              	.LBB294:
 670:mri/architectures/armv7-m/debug_cm3.h **** }
 1560              		.loc 4 670 5 view .LVU450
 670:mri/architectures/armv7-m/debug_cm3.h **** }
 1561              		.loc 4 670 8 is_stmt 0 view .LVU451
 1562 0018 034A     		ldr	r2, .L117+4
 1563 001a 1368     		ldr	r3, [r2]
 670:mri/architectures/armv7-m/debug_cm3.h **** }
 1564              		.loc 4 670 15 view .LVU452
 1565 001c 43F00303 		orr	r3, r3, #3
 1566 0020 1360     		str	r3, [r2]
 1567              	.LBE294:
 1568              	.LBE293:
ARM GAS  /tmp/ccXppZcm.s 			page 98


 1569              	.LBE292:
 1570              	.LBE291:
 216:mri/architectures/armv7-m/armv7-m.c **** }
 1571              		.loc 1 216 1 view .LVU453
 1572 0022 08BD     		pop	{r3, pc}
 1573              	.L118:
 1574              		.align	2
 1575              	.L117:
 1576 0024 00ED00E0 		.word	-536810240
 1577 0028 002000E0 		.word	-536862720
 1578              		.cfi_endproc
 1579              	.LFE222:
 1581              		.section	.text.disableDebuggerStack,"ax",%progbits
 1582              		.align	1
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1587              	disableDebuggerStack:
 1588              	.LFB225:
 217:mri/architectures/armv7-m/armv7-m.c **** 
 218:mri/architectures/armv7-m/armv7-m.c **** static void defaultSvcAndSysTickInterruptsToLowerPriority(uint8_t priority)
 219:mri/architectures/armv7-m/armv7-m.c **** {
 220:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(SVCall_IRQn, priority, 0);
 221:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(PendSV_IRQn, priority, 0);
 222:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(SysTick_IRQn, priority, 0);
 223:mri/architectures/armv7-m/armv7-m.c **** }
 224:mri/architectures/armv7-m/armv7-m.c **** 
 225:mri/architectures/armv7-m/armv7-m.c **** static void defaultExternalInterruptsToLowerPriority(uint8_t priority, IRQn_Type highestExternalIrq
 226:mri/architectures/armv7-m/armv7-m.c **** {
 227:mri/architectures/armv7-m/armv7-m.c ****     int irq;
 228:mri/architectures/armv7-m/armv7-m.c **** 
 229:mri/architectures/armv7-m/armv7-m.c ****     for (irq = 0 ; irq <= highestExternalIrq ; irq++)
 230:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMSetPriority((IRQn_Type)irq, priority, 0);
 231:mri/architectures/armv7-m/armv7-m.c **** }
 232:mri/architectures/armv7-m/armv7-m.c **** 
 233:mri/architectures/armv7-m/armv7-m.c **** static void disableDebuggerStack(void)
 234:mri/architectures/armv7-m/armv7-m.c **** {
 1589              		.loc 1 234 1 is_stmt 1 view -0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              		@ link register save eliminated.
 235:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_NO_DEBUG_STACK;
 1594              		.loc 1 235 5 view .LVU455
 1595              		.loc 1 235 21 is_stmt 0 view .LVU456
 1596 0000 024A     		ldr	r2, .L120
 1597 0002 1368     		ldr	r3, [r2]
 1598 0004 43F04003 		orr	r3, r3, #64
 1599 0008 1360     		str	r3, [r2]
 236:mri/architectures/armv7-m/armv7-m.c **** }
 1600              		.loc 1 236 1 view .LVU457
 1601 000a 7047     		bx	lr
 1602              	.L121:
 1603              		.align	2
 1604              	.L120:
 1605 000c 00000000 		.word	mriCortexMFlags
 1606              		.cfi_endproc
ARM GAS  /tmp/ccXppZcm.s 			page 99


 1607              	.LFE225:
 1609              		.section	.text.shouldRestorePriorityRegs,"ax",%progbits
 1610              		.align	1
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1615              	shouldRestorePriorityRegs:
 1616              	.LFB231:
 237:mri/architectures/armv7-m/armv7-m.c **** 
 238:mri/architectures/armv7-m/armv7-m.c **** static void enableDebugMonitorAtSpecifiedPriority(uint8_t priority)
 239:mri/architectures/armv7-m/armv7-m.c **** {
 240:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(DebugMonitor_IRQn, priority, priority);
 241:mri/architectures/armv7-m/armv7-m.c ****     enableDebugMonitor();
 242:mri/architectures/armv7-m/armv7-m.c **** }
 243:mri/architectures/armv7-m/armv7-m.c **** 
 244:mri/architectures/armv7-m/armv7-m.c **** 
 245:mri/architectures/armv7-m/armv7-m.c **** void mriCortexMSetPriority(IRQn_Type irq, uint8_t priority, uint8_t subPriority)
 246:mri/architectures/armv7-m/armv7-m.c **** {
 247:mri/architectures/armv7-m/armv7-m.c ****     uint8_t fullPriority = (priority << mriCortexMState.priorityBitShift) |
 248:mri/architectures/armv7-m/armv7-m.c ****                            (subPriority & ((1 << mriCortexMState.priorityBitShift) -1));
 249:mri/architectures/armv7-m/armv7-m.c **** 
 250:mri/architectures/armv7-m/armv7-m.c ****     if ((int32_t)irq >= 0)
 251:mri/architectures/armv7-m/armv7-m.c ****     {
 252:mri/architectures/armv7-m/armv7-m.c ****         NVIC->IP[((uint32_t)irq)] = fullPriority;
 253:mri/architectures/armv7-m/armv7-m.c ****     }
 254:mri/architectures/armv7-m/armv7-m.c ****     else
 255:mri/architectures/armv7-m/armv7-m.c ****     {
 256:mri/architectures/armv7-m/armv7-m.c ****         SCB->SHP[(((uint32_t)irq) & 0xF)-4] = fullPriority;
 257:mri/architectures/armv7-m/armv7-m.c ****     }
 258:mri/architectures/armv7-m/armv7-m.c **** }
 259:mri/architectures/armv7-m/armv7-m.c **** 
 260:mri/architectures/armv7-m/armv7-m.c **** 
 261:mri/architectures/armv7-m/armv7-m.c **** static void     cleanupIfSingleStepping(void);
 262:mri/architectures/armv7-m/armv7-m.c **** static void     restorePriorityRegsIfNeeded(void);
 263:mri/architectures/armv7-m/armv7-m.c **** static uint32_t shouldRestorePriorityRegs(void);
 264:mri/architectures/armv7-m/armv7-m.c **** static void     clearPriorityRestoreFlag();
 265:mri/architectures/armv7-m/armv7-m.c **** static void     removeHardwareBreakpointOnSvcHandlerIfNeeded(void);
 266:mri/architectures/armv7-m/armv7-m.c **** static int      shouldRemoveHardwareBreakpointOnSvcHandler(void);
 267:mri/architectures/armv7-m/armv7-m.c **** static void     clearSvcStepFlag(void);
 268:mri/architectures/armv7-m/armv7-m.c **** static void     clearHardwareBreakpointOnSvcHandler(void);
 269:mri/architectures/armv7-m/armv7-m.c **** static uint32_t getNvicVector(IRQn_Type irq);
 270:mri/architectures/armv7-m/armv7-m.c **** static void     clearSingleSteppingFlag(void);
 271:mri/architectures/armv7-m/armv7-m.c **** void Platform_DisableSingleStep(void)
 272:mri/architectures/armv7-m/armv7-m.c **** {
 273:mri/architectures/armv7-m/armv7-m.c ****     cleanupIfSingleStepping();
 274:mri/architectures/armv7-m/armv7-m.c ****     disableSingleStep();
 275:mri/architectures/armv7-m/armv7-m.c ****     clearSingleSteppingFlag();
 276:mri/architectures/armv7-m/armv7-m.c **** }
 277:mri/architectures/armv7-m/armv7-m.c **** 
 278:mri/architectures/armv7-m/armv7-m.c **** static void cleanupIfSingleStepping(void)
 279:mri/architectures/armv7-m/armv7-m.c **** {
 280:mri/architectures/armv7-m/armv7-m.c ****     restorePriorityRegsIfNeeded();
 281:mri/architectures/armv7-m/armv7-m.c ****     removeHardwareBreakpointOnSvcHandlerIfNeeded();
 282:mri/architectures/armv7-m/armv7-m.c **** }
 283:mri/architectures/armv7-m/armv7-m.c **** 
 284:mri/architectures/armv7-m/armv7-m.c **** static void restorePriorityRegsIfNeeded(void)
 285:mri/architectures/armv7-m/armv7-m.c **** {
ARM GAS  /tmp/ccXppZcm.s 			page 100


 286:mri/architectures/armv7-m/armv7-m.c ****     if (shouldRestorePriorityRegs())
 287:mri/architectures/armv7-m/armv7-m.c ****     {
 288:mri/architectures/armv7-m/armv7-m.c ****         clearPriorityRestoreFlag();
 289:mri/architectures/armv7-m/armv7-m.c ****         Context_Set(&mriCortexMState.context, PRIMASK, mriCortexMState.primask);
 290:mri/architectures/armv7-m/armv7-m.c ****         Context_Set(&mriCortexMState.context, BASEPRI, mriCortexMState.basepri);
 291:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.primask = 0;
 292:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.basepri = 0;
 293:mri/architectures/armv7-m/armv7-m.c ****     }
 294:mri/architectures/armv7-m/armv7-m.c **** }
 295:mri/architectures/armv7-m/armv7-m.c **** 
 296:mri/architectures/armv7-m/armv7-m.c **** static uint32_t shouldRestorePriorityRegs(void)
 297:mri/architectures/armv7-m/armv7-m.c **** {
 1617              		.loc 1 297 1 is_stmt 1 view -0
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 0
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 1621              		@ link register save eliminated.
 298:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMFlags & CORTEXM_FLAGS_RESTORE_PRI;
 1622              		.loc 1 298 5 view .LVU459
 1623              		.loc 1 298 28 is_stmt 0 view .LVU460
 1624 0000 024B     		ldr	r3, .L123
 1625 0002 1868     		ldr	r0, [r3]
 299:mri/architectures/armv7-m/armv7-m.c **** }
 1626              		.loc 1 299 1 view .LVU461
 1627 0004 00F00800 		and	r0, r0, #8
 1628 0008 7047     		bx	lr
 1629              	.L124:
 1630 000a 00BF     		.align	2
 1631              	.L123:
 1632 000c 00000000 		.word	mriCortexMFlags
 1633              		.cfi_endproc
 1634              	.LFE231:
 1636              		.section	.text.clearPriorityRestoreFlag,"ax",%progbits
 1637              		.align	1
 1638              		.syntax unified
 1639              		.thumb
 1640              		.thumb_func
 1642              	clearPriorityRestoreFlag:
 1643              	.LFB232:
 300:mri/architectures/armv7-m/armv7-m.c **** 
 301:mri/architectures/armv7-m/armv7-m.c **** static void clearPriorityRestoreFlag()
 302:mri/architectures/armv7-m/armv7-m.c **** {
 1644              		.loc 1 302 1 is_stmt 1 view -0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 0
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
 1648              		@ link register save eliminated.
 303:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags &= ~CORTEXM_FLAGS_RESTORE_PRI;
 1649              		.loc 1 303 5 view .LVU463
 1650              		.loc 1 303 21 is_stmt 0 view .LVU464
 1651 0000 024A     		ldr	r2, .L126
 1652 0002 1368     		ldr	r3, [r2]
 1653 0004 23F00803 		bic	r3, r3, #8
 1654 0008 1360     		str	r3, [r2]
 304:mri/architectures/armv7-m/armv7-m.c **** }
 1655              		.loc 1 304 1 view .LVU465
 1656 000a 7047     		bx	lr
ARM GAS  /tmp/ccXppZcm.s 			page 101


 1657              	.L127:
 1658              		.align	2
 1659              	.L126:
 1660 000c 00000000 		.word	mriCortexMFlags
 1661              		.cfi_endproc
 1662              	.LFE232:
 1664              		.section	.text.shouldRemoveHardwareBreakpointOnSvcHandler,"ax",%progbits
 1665              		.align	1
 1666              		.syntax unified
 1667              		.thumb
 1668              		.thumb_func
 1670              	shouldRemoveHardwareBreakpointOnSvcHandler:
 1671              	.LFB234:
 305:mri/architectures/armv7-m/armv7-m.c **** 
 306:mri/architectures/armv7-m/armv7-m.c **** static void removeHardwareBreakpointOnSvcHandlerIfNeeded(void)
 307:mri/architectures/armv7-m/armv7-m.c **** {
 308:mri/architectures/armv7-m/armv7-m.c ****     if (shouldRemoveHardwareBreakpointOnSvcHandler())
 309:mri/architectures/armv7-m/armv7-m.c ****     {
 310:mri/architectures/armv7-m/armv7-m.c ****         clearSvcStepFlag();
 311:mri/architectures/armv7-m/armv7-m.c ****         clearHardwareBreakpointOnSvcHandler();
 312:mri/architectures/armv7-m/armv7-m.c ****     }
 313:mri/architectures/armv7-m/armv7-m.c **** }
 314:mri/architectures/armv7-m/armv7-m.c **** 
 315:mri/architectures/armv7-m/armv7-m.c **** static int shouldRemoveHardwareBreakpointOnSvcHandler(void)
 316:mri/architectures/armv7-m/armv7-m.c **** {
 1672              		.loc 1 316 1 is_stmt 1 view -0
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 0
 1675              		@ frame_needed = 0, uses_anonymous_args = 0
 1676              		@ link register save eliminated.
 317:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMFlags & CORTEXM_FLAGS_SVC_STEP;
 1677              		.loc 1 317 5 view .LVU467
 1678              		.loc 1 317 28 is_stmt 0 view .LVU468
 1679 0000 024B     		ldr	r3, .L129
 1680 0002 1868     		ldr	r0, [r3]
 318:mri/architectures/armv7-m/armv7-m.c **** }
 1681              		.loc 1 318 1 view .LVU469
 1682 0004 00F01000 		and	r0, r0, #16
 1683 0008 7047     		bx	lr
 1684              	.L130:
 1685 000a 00BF     		.align	2
 1686              	.L129:
 1687 000c 00000000 		.word	mriCortexMFlags
 1688              		.cfi_endproc
 1689              	.LFE234:
 1691              		.section	.text.clearSvcStepFlag,"ax",%progbits
 1692              		.align	1
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
 1697              	clearSvcStepFlag:
 1698              	.LFB235:
 319:mri/architectures/armv7-m/armv7-m.c **** 
 320:mri/architectures/armv7-m/armv7-m.c **** static void clearSvcStepFlag(void)
 321:mri/architectures/armv7-m/armv7-m.c **** {
 1699              		.loc 1 321 1 is_stmt 1 view -0
 1700              		.cfi_startproc
ARM GAS  /tmp/ccXppZcm.s 			page 102


 1701              		@ args = 0, pretend = 0, frame = 0
 1702              		@ frame_needed = 0, uses_anonymous_args = 0
 1703              		@ link register save eliminated.
 322:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags &= ~CORTEXM_FLAGS_SVC_STEP;
 1704              		.loc 1 322 5 view .LVU471
 1705              		.loc 1 322 21 is_stmt 0 view .LVU472
 1706 0000 024A     		ldr	r2, .L132
 1707 0002 1368     		ldr	r3, [r2]
 1708 0004 23F01003 		bic	r3, r3, #16
 1709 0008 1360     		str	r3, [r2]
 323:mri/architectures/armv7-m/armv7-m.c **** }
 1710              		.loc 1 323 1 view .LVU473
 1711 000a 7047     		bx	lr
 1712              	.L133:
 1713              		.align	2
 1714              	.L132:
 1715 000c 00000000 		.word	mriCortexMFlags
 1716              		.cfi_endproc
 1717              	.LFE235:
 1719              		.section	.text.getNvicVector,"ax",%progbits
 1720              		.align	1
 1721              		.syntax unified
 1722              		.thumb
 1723              		.thumb_func
 1725              	getNvicVector:
 1726              	.LVL149:
 1727              	.LFB237:
 324:mri/architectures/armv7-m/armv7-m.c **** 
 325:mri/architectures/armv7-m/armv7-m.c **** static void clearHardwareBreakpointOnSvcHandler(void)
 326:mri/architectures/armv7-m/armv7-m.c **** {
 327:mri/architectures/armv7-m/armv7-m.c ****     Platform_ClearHardwareBreakpoint(getNvicVector(SVCall_IRQn) & ~1);
 328:mri/architectures/armv7-m/armv7-m.c **** }
 329:mri/architectures/armv7-m/armv7-m.c **** 
 330:mri/architectures/armv7-m/armv7-m.c **** static uint32_t getNvicVector(IRQn_Type irq)
 331:mri/architectures/armv7-m/armv7-m.c **** {
 1728              		.loc 1 331 1 is_stmt 1 view -0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 0
 1731              		@ frame_needed = 0, uses_anonymous_args = 0
 1732              		@ link register save eliminated.
 332:mri/architectures/armv7-m/armv7-m.c ****     const uint32_t           nvicBaseVectorOffset = 16;
 1733              		.loc 1 332 5 view .LVU475
 333:mri/architectures/armv7-m/armv7-m.c ****     volatile const uint32_t* pVectors = (volatile const uint32_t*)SCB->VTOR;
 1734              		.loc 1 333 5 view .LVU476
 1735              		.loc 1 333 70 is_stmt 0 view .LVU477
 1736 0000 024B     		ldr	r3, .L135
 1737 0002 9B68     		ldr	r3, [r3, #8]
 1738              	.LVL150:
 334:mri/architectures/armv7-m/armv7-m.c ****     return pVectors[irq + nvicBaseVectorOffset];
 1739              		.loc 1 334 5 is_stmt 1 view .LVU478
 1740              		.loc 1 334 25 is_stmt 0 view .LVU479
 1741 0004 1030     		adds	r0, r0, #16
 1742              	.LVL151:
 1743              		.loc 1 334 20 view .LVU480
 1744 0006 53F82000 		ldr	r0, [r3, r0, lsl #2]
 335:mri/architectures/armv7-m/armv7-m.c **** }
 1745              		.loc 1 335 1 view .LVU481
ARM GAS  /tmp/ccXppZcm.s 			page 103


 1746 000a 7047     		bx	lr
 1747              	.L136:
 1748              		.align	2
 1749              	.L135:
 1750 000c 00ED00E0 		.word	-536810240
 1751              		.cfi_endproc
 1752              	.LFE237:
 1754              		.section	.text.clearSingleSteppingFlag,"ax",%progbits
 1755              		.align	1
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1760              	clearSingleSteppingFlag:
 1761              	.LFB238:
 336:mri/architectures/armv7-m/armv7-m.c **** 
 337:mri/architectures/armv7-m/armv7-m.c **** static void clearSingleSteppingFlag(void)
 338:mri/architectures/armv7-m/armv7-m.c **** {
 1762              		.loc 1 338 1 is_stmt 1 view -0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 339:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags &= ~CORTEXM_FLAGS_SINGLE_STEPPING;
 1767              		.loc 1 339 5 view .LVU483
 1768              		.loc 1 339 21 is_stmt 0 view .LVU484
 1769 0000 024A     		ldr	r2, .L138
 1770 0002 1368     		ldr	r3, [r2]
 1771 0004 23F00403 		bic	r3, r3, #4
 1772 0008 1360     		str	r3, [r2]
 340:mri/architectures/armv7-m/armv7-m.c **** }
 1773              		.loc 1 340 1 view .LVU485
 1774 000a 7047     		bx	lr
 1775              	.L139:
 1776              		.align	2
 1777              	.L138:
 1778 000c 00000000 		.word	mriCortexMFlags
 1779              		.cfi_endproc
 1780              	.LFE238:
 1782              		.section	.text.setSvcStepFlag,"ax",%progbits
 1783              		.align	1
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1788              	setSvcStepFlag:
 1789              	.LFB242:
 341:mri/architectures/armv7-m/armv7-m.c **** 
 342:mri/architectures/armv7-m/armv7-m.c **** 
 343:mri/architectures/armv7-m/armv7-m.c **** static int      doesPCPointToSVCInstruction(void);
 344:mri/architectures/armv7-m/armv7-m.c **** static void     setHardwareBreakpointOnSvcHandler(void);
 345:mri/architectures/armv7-m/armv7-m.c **** static void     setSvcStepFlag(void);
 346:mri/architectures/armv7-m/armv7-m.c **** static void     setSingleSteppingFlag(void);
 347:mri/architectures/armv7-m/armv7-m.c **** static int      advancePastPriorityModifyingInstruction(void);
 348:mri/architectures/armv7-m/armv7-m.c **** static int      checkCurrentInstruction(void);
 349:mri/architectures/armv7-m/armv7-m.c **** static uint16_t getFirstHalfWordOfCurrentInstruction(void);
 350:mri/architectures/armv7-m/armv7-m.c **** static uint16_t getSecondHalfWordOfCurrentInstruction(void);
 351:mri/architectures/armv7-m/armv7-m.c **** static uint16_t throwingMemRead16(uint32_t address);
 352:mri/architectures/armv7-m/armv7-m.c **** static int      isInstructionMSR(uint16_t firstWord, uint16_t secondWord);
ARM GAS  /tmp/ccXppZcm.s 			page 104


 353:mri/architectures/armv7-m/armv7-m.c **** static int      processInstructionMSR(uint16_t firstWord, uint16_t secondWord);
 354:mri/architectures/armv7-m/armv7-m.c **** static int      isInstructionCPS(uint16_t firstWord);
 355:mri/architectures/armv7-m/armv7-m.c **** static int      processInstructionCPS(uint16_t firstWord);
 356:mri/architectures/armv7-m/armv7-m.c **** static int      isInstructionMRS(uint16_t firstWord, uint16_t secondWord);
 357:mri/architectures/armv7-m/armv7-m.c **** static int      processInstructionMRS(uint16_t firstWord, uint16_t secondWord);
 358:mri/architectures/armv7-m/armv7-m.c **** static void     recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts(void);
 359:mri/architectures/armv7-m/armv7-m.c **** static void     recordCurrentPriorityRegs(void);
 360:mri/architectures/armv7-m/armv7-m.c **** static void     setRestorePriorityRegsFlag(void);
 361:mri/architectures/armv7-m/armv7-m.c **** static uint8_t  calculateBasePriorityForThisCPU(uint8_t basePriority);
 362:mri/architectures/armv7-m/armv7-m.c **** void Platform_EnableSingleStep(void)
 363:mri/architectures/armv7-m/armv7-m.c **** {
 364:mri/architectures/armv7-m/armv7-m.c ****     int didAdvancePastPriorityInstruction;
 365:mri/architectures/armv7-m/armv7-m.c **** 
 366:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_THREAD_MRI)
 367:mri/architectures/armv7-m/armv7-m.c ****     {
 368:mri/architectures/armv7-m/armv7-m.c ****         setSingleSteppingFlag();
 369:mri/architectures/armv7-m/armv7-m.c ****         return;
 370:mri/architectures/armv7-m/armv7-m.c ****     }
 371:mri/architectures/armv7-m/armv7-m.c **** 
 372:mri/architectures/armv7-m/armv7-m.c ****     didAdvancePastPriorityInstruction = advancePastPriorityModifyingInstruction();
 373:mri/architectures/armv7-m/armv7-m.c ****     if (didAdvancePastPriorityInstruction)
 374:mri/architectures/armv7-m/armv7-m.c ****     {
 375:mri/architectures/armv7-m/armv7-m.c ****         return;
 376:mri/architectures/armv7-m/armv7-m.c ****     }
 377:mri/architectures/armv7-m/armv7-m.c **** 
 378:mri/architectures/armv7-m/armv7-m.c ****     if (!doesPCPointToSVCInstruction())
 379:mri/architectures/armv7-m/armv7-m.c ****     {
 380:mri/architectures/armv7-m/armv7-m.c ****         setSingleSteppingFlag();
 381:mri/architectures/armv7-m/armv7-m.c ****         recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts();
 382:mri/architectures/armv7-m/armv7-m.c ****         enableSingleStep();
 383:mri/architectures/armv7-m/armv7-m.c ****         return;
 384:mri/architectures/armv7-m/armv7-m.c ****     }
 385:mri/architectures/armv7-m/armv7-m.c **** 
 386:mri/architectures/armv7-m/armv7-m.c ****     __try
 387:mri/architectures/armv7-m/armv7-m.c ****     {
 388:mri/architectures/armv7-m/armv7-m.c ****         __throwing_func( setHardwareBreakpointOnSvcHandler() );
 389:mri/architectures/armv7-m/armv7-m.c ****         setSvcStepFlag();
 390:mri/architectures/armv7-m/armv7-m.c ****     }
 391:mri/architectures/armv7-m/armv7-m.c ****     __catch
 392:mri/architectures/armv7-m/armv7-m.c ****     {
 393:mri/architectures/armv7-m/armv7-m.c ****         /* Failed to set hardware breakpoint so single step without modifying priority since the pr
 394:mri/architectures/armv7-m/armv7-m.c ****            elevation leads SVC to escalate to Hard Fault. */
 395:mri/architectures/armv7-m/armv7-m.c ****         clearExceptionCode();
 396:mri/architectures/armv7-m/armv7-m.c ****         setSingleSteppingFlag();
 397:mri/architectures/armv7-m/armv7-m.c ****         enableSingleStep();
 398:mri/architectures/armv7-m/armv7-m.c ****     }
 399:mri/architectures/armv7-m/armv7-m.c ****     return;
 400:mri/architectures/armv7-m/armv7-m.c **** }
 401:mri/architectures/armv7-m/armv7-m.c **** 
 402:mri/architectures/armv7-m/armv7-m.c **** static int doesPCPointToSVCInstruction(void)
 403:mri/architectures/armv7-m/armv7-m.c **** {
 404:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t svcMachineCodeMask = 0xff00;
 405:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t svcMachineCode = 0xdf00;
 406:mri/architectures/armv7-m/armv7-m.c ****     uint16_t              instructionWord;
 407:mri/architectures/armv7-m/armv7-m.c **** 
 408:mri/architectures/armv7-m/armv7-m.c ****     __try
 409:mri/architectures/armv7-m/armv7-m.c ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 105


 410:mri/architectures/armv7-m/armv7-m.c ****         instructionWord = getFirstHalfWordOfCurrentInstruction();
 411:mri/architectures/armv7-m/armv7-m.c ****     }
 412:mri/architectures/armv7-m/armv7-m.c ****     __catch
 413:mri/architectures/armv7-m/armv7-m.c ****     {
 414:mri/architectures/armv7-m/armv7-m.c ****         clearExceptionCode();
 415:mri/architectures/armv7-m/armv7-m.c ****         return 0;
 416:mri/architectures/armv7-m/armv7-m.c ****     }
 417:mri/architectures/armv7-m/armv7-m.c **** 
 418:mri/architectures/armv7-m/armv7-m.c ****     return ((instructionWord & svcMachineCodeMask) == svcMachineCode);
 419:mri/architectures/armv7-m/armv7-m.c **** }
 420:mri/architectures/armv7-m/armv7-m.c **** 
 421:mri/architectures/armv7-m/armv7-m.c **** static void setHardwareBreakpointOnSvcHandler(void)
 422:mri/architectures/armv7-m/armv7-m.c **** {
 423:mri/architectures/armv7-m/armv7-m.c ****     Platform_SetHardwareBreakpoint(getNvicVector(SVCall_IRQn) & ~1);
 424:mri/architectures/armv7-m/armv7-m.c **** }
 425:mri/architectures/armv7-m/armv7-m.c **** 
 426:mri/architectures/armv7-m/armv7-m.c **** static void setSvcStepFlag(void)
 427:mri/architectures/armv7-m/armv7-m.c **** {
 1790              		.loc 1 427 1 is_stmt 1 view -0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794              		@ link register save eliminated.
 428:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_SVC_STEP;
 1795              		.loc 1 428 5 view .LVU487
 1796              		.loc 1 428 21 is_stmt 0 view .LVU488
 1797 0000 024A     		ldr	r2, .L141
 1798 0002 1368     		ldr	r3, [r2]
 1799 0004 43F01003 		orr	r3, r3, #16
 1800 0008 1360     		str	r3, [r2]
 429:mri/architectures/armv7-m/armv7-m.c **** }
 1801              		.loc 1 429 1 view .LVU489
 1802 000a 7047     		bx	lr
 1803              	.L142:
 1804              		.align	2
 1805              	.L141:
 1806 000c 00000000 		.word	mriCortexMFlags
 1807              		.cfi_endproc
 1808              	.LFE242:
 1810              		.section	.text.setSingleSteppingFlag,"ax",%progbits
 1811              		.align	1
 1812              		.syntax unified
 1813              		.thumb
 1814              		.thumb_func
 1816              	setSingleSteppingFlag:
 1817              	.LFB243:
 430:mri/architectures/armv7-m/armv7-m.c **** 
 431:mri/architectures/armv7-m/armv7-m.c **** static void setSingleSteppingFlag(void)
 432:mri/architectures/armv7-m/armv7-m.c **** {
 1818              		.loc 1 432 1 is_stmt 1 view -0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822              		@ link register save eliminated.
 433:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_SINGLE_STEPPING;
 1823              		.loc 1 433 5 view .LVU491
 1824              		.loc 1 433 21 is_stmt 0 view .LVU492
ARM GAS  /tmp/ccXppZcm.s 			page 106


 1825 0000 024A     		ldr	r2, .L144
 1826 0002 1368     		ldr	r3, [r2]
 1827 0004 43F00403 		orr	r3, r3, #4
 1828 0008 1360     		str	r3, [r2]
 434:mri/architectures/armv7-m/armv7-m.c **** }
 1829              		.loc 1 434 1 view .LVU493
 1830 000a 7047     		bx	lr
 1831              	.L145:
 1832              		.align	2
 1833              	.L144:
 1834 000c 00000000 		.word	mriCortexMFlags
 1835              		.cfi_endproc
 1836              	.LFE243:
 1838              		.section	.text.isInstructionMSR,"ax",%progbits
 1839              		.align	1
 1840              		.syntax unified
 1841              		.thumb
 1842              		.thumb_func
 1844              	isInstructionMSR:
 1845              	.LVL152:
 1846              	.LFB249:
 435:mri/architectures/armv7-m/armv7-m.c **** 
 436:mri/architectures/armv7-m/armv7-m.c **** static int advancePastPriorityModifyingInstruction(void)
 437:mri/architectures/armv7-m/armv7-m.c **** {
 438:mri/architectures/armv7-m/armv7-m.c ****     if (checkCurrentInstruction())
 439:mri/architectures/armv7-m/armv7-m.c ****     {
 440:mri/architectures/armv7-m/armv7-m.c ****         /* Current instruction is related to priority registers and was simulated so advance PC pas
 441:mri/architectures/armv7-m/armv7-m.c ****         Platform_AdvanceProgramCounterToNextInstruction();
 442:mri/architectures/armv7-m/armv7-m.c ****         return 1;
 443:mri/architectures/armv7-m/armv7-m.c ****     }
 444:mri/architectures/armv7-m/armv7-m.c ****     return 0;
 445:mri/architectures/armv7-m/armv7-m.c **** }
 446:mri/architectures/armv7-m/armv7-m.c **** 
 447:mri/architectures/armv7-m/armv7-m.c **** static int checkCurrentInstruction(void)
 448:mri/architectures/armv7-m/armv7-m.c **** {
 449:mri/architectures/armv7-m/armv7-m.c ****     uint16_t firstWord = 0;
 450:mri/architectures/armv7-m/armv7-m.c ****     uint16_t secondWord = 0;
 451:mri/architectures/armv7-m/armv7-m.c **** 
 452:mri/architectures/armv7-m/armv7-m.c ****     __try
 453:mri/architectures/armv7-m/armv7-m.c ****     {
 454:mri/architectures/armv7-m/armv7-m.c ****         __throwing_func( firstWord = getFirstHalfWordOfCurrentInstruction() );
 455:mri/architectures/armv7-m/armv7-m.c ****         __throwing_func( secondWord = getSecondHalfWordOfCurrentInstruction() );
 456:mri/architectures/armv7-m/armv7-m.c ****     }
 457:mri/architectures/armv7-m/armv7-m.c ****     __catch
 458:mri/architectures/armv7-m/armv7-m.c ****     {
 459:mri/architectures/armv7-m/armv7-m.c ****         clearExceptionCode();
 460:mri/architectures/armv7-m/armv7-m.c ****         return 0;
 461:mri/architectures/armv7-m/armv7-m.c ****     }
 462:mri/architectures/armv7-m/armv7-m.c **** 
 463:mri/architectures/armv7-m/armv7-m.c ****     /* MSR and CPSI* instructions can modify the PRIMASK and BASEPRI registers. */
 464:mri/architectures/armv7-m/armv7-m.c ****     if (isInstructionMSR(firstWord, secondWord))
 465:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMSR(firstWord, secondWord);
 466:mri/architectures/armv7-m/armv7-m.c ****     if (isInstructionCPS(firstWord))
 467:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionCPS(firstWord);
 468:mri/architectures/armv7-m/armv7-m.c ****     /* MRS instructions might want to read the real values of PRIMASK and BASEPRI and not the value
 469:mri/architectures/armv7-m/armv7-m.c ****        by MRI. */
 470:mri/architectures/armv7-m/armv7-m.c ****     if (isInstructionMRS(firstWord, secondWord))
ARM GAS  /tmp/ccXppZcm.s 			page 107


 471:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMRS(firstWord, secondWord);
 472:mri/architectures/armv7-m/armv7-m.c ****     return 0;
 473:mri/architectures/armv7-m/armv7-m.c **** }
 474:mri/architectures/armv7-m/armv7-m.c **** 
 475:mri/architectures/armv7-m/armv7-m.c **** static uint16_t getFirstHalfWordOfCurrentInstruction(void)
 476:mri/architectures/armv7-m/armv7-m.c **** {
 477:mri/architectures/armv7-m/armv7-m.c ****     return throwingMemRead16(Platform_GetProgramCounter());
 478:mri/architectures/armv7-m/armv7-m.c **** }
 479:mri/architectures/armv7-m/armv7-m.c **** 
 480:mri/architectures/armv7-m/armv7-m.c **** static uint16_t getSecondHalfWordOfCurrentInstruction(void)
 481:mri/architectures/armv7-m/armv7-m.c **** {
 482:mri/architectures/armv7-m/armv7-m.c ****     return throwingMemRead16(Platform_GetProgramCounter() + sizeof(uint16_t));
 483:mri/architectures/armv7-m/armv7-m.c **** }
 484:mri/architectures/armv7-m/armv7-m.c **** 
 485:mri/architectures/armv7-m/armv7-m.c **** static uint16_t throwingMemRead16(uint32_t address)
 486:mri/architectures/armv7-m/armv7-m.c **** {
 487:mri/architectures/armv7-m/armv7-m.c ****     uint16_t instructionWord = Platform_MemRead16((const uint16_t*)address);
 488:mri/architectures/armv7-m/armv7-m.c ****     if (Platform_WasMemoryFaultEncountered())
 489:mri/architectures/armv7-m/armv7-m.c ****         __throw_and_return(memFaultException, 0);
 490:mri/architectures/armv7-m/armv7-m.c ****     return instructionWord;
 491:mri/architectures/armv7-m/armv7-m.c **** }
 492:mri/architectures/armv7-m/armv7-m.c **** 
 493:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionMSR(uint16_t firstWord, uint16_t secondWord)
 494:mri/architectures/armv7-m/armv7-m.c **** {
 1847              		.loc 1 494 1 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 495:mri/architectures/armv7-m/armv7-m.c ****     return ((firstWord & 0xFFF0) == 0xF380) && ((secondWord & 0xFF00) == 0x8800);
 1852              		.loc 1 495 5 view .LVU495
 1853              		.loc 1 495 45 is_stmt 0 view .LVU496
 1854 0000 20F00F00 		bic	r0, r0, #15
 1855              	.LVL153:
 1856              		.loc 1 495 45 view .LVU497
 1857 0004 80B2     		uxth	r0, r0
 1858 0006 4FF28033 		movw	r3, #62336
 1859 000a 9842     		cmp	r0, r3
 1860 000c 01D0     		beq	.L150
 1861 000e 0020     		movs	r0, #0
 1862 0010 7047     		bx	lr
 1863              	.L150:
 1864              		.loc 1 495 45 discriminator 1 view .LVU498
 1865 0012 01F47F41 		and	r1, r1, #65280
 1866              	.LVL154:
 1867              		.loc 1 495 45 discriminator 1 view .LVU499
 1868 0016 B1F5084F 		cmp	r1, #34816
 1869 001a 01D0     		beq	.L149
 1870              		.loc 1 495 45 view .LVU500
 1871 001c 0020     		movs	r0, #0
 1872 001e 7047     		bx	lr
 1873              	.L149:
 1874 0020 0120     		movs	r0, #1
 496:mri/architectures/armv7-m/armv7-m.c **** }
 1875              		.loc 1 496 1 view .LVU501
 1876 0022 7047     		bx	lr
 1877              		.cfi_endproc
ARM GAS  /tmp/ccXppZcm.s 			page 108


 1878              	.LFE249:
 1880              		.section	.text.isInstructionCPS,"ax",%progbits
 1881              		.align	1
 1882              		.syntax unified
 1883              		.thumb
 1884              		.thumb_func
 1886              	isInstructionCPS:
 1887              	.LVL155:
 1888              	.LFB251:
 497:mri/architectures/armv7-m/armv7-m.c **** 
 498:mri/architectures/armv7-m/armv7-m.c **** static int processInstructionMSR(uint16_t firstWord, uint16_t secondWord)
 499:mri/architectures/armv7-m/armv7-m.c **** {
 500:mri/architectures/armv7-m/armv7-m.c ****     uint16_t Rn = firstWord & 0x000F;
 501:mri/architectures/armv7-m/armv7-m.c ****     uint16_t SYSm = secondWord & 0x00FF;
 502:mri/architectures/armv7-m/armv7-m.c **** 
 503:mri/architectures/armv7-m/armv7-m.c ****     switch (SYSm)
 504:mri/architectures/armv7-m/armv7-m.c ****     {
 505:mri/architectures/armv7-m/armv7-m.c ****         case 16: // PRIMASK
 506:mri/architectures/armv7-m/armv7-m.c ****             Context_Set(&mriCortexMState.context, PRIMASK, Context_Get(&mriCortexMState.context, Rn
 507:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 508:mri/architectures/armv7-m/armv7-m.c ****         case 17: // BASEPRI
 509:mri/architectures/armv7-m/armv7-m.c ****             Context_Set(&mriCortexMState.context, BASEPRI, Context_Get(&mriCortexMState.context, Rn
 510:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 511:mri/architectures/armv7-m/armv7-m.c ****         case 18: // BASEPRI_MAX
 512:mri/architectures/armv7-m/armv7-m.c ****         {
 513:mri/architectures/armv7-m/armv7-m.c ****             uint32_t basepriVal = Context_Get(&mriCortexMState.context, BASEPRI);
 514:mri/architectures/armv7-m/armv7-m.c ****             uint32_t RnVal = Context_Get(&mriCortexMState.context, Rn);
 515:mri/architectures/armv7-m/armv7-m.c ****             if (basepriVal == 0 || RnVal < basepriVal)
 516:mri/architectures/armv7-m/armv7-m.c ****             {
 517:mri/architectures/armv7-m/armv7-m.c ****                 Context_Set(&mriCortexMState.context, BASEPRI, RnVal);
 518:mri/architectures/armv7-m/armv7-m.c ****             }
 519:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 520:mri/architectures/armv7-m/armv7-m.c ****         }
 521:mri/architectures/armv7-m/armv7-m.c ****         default:
 522:mri/architectures/armv7-m/armv7-m.c ****             return 0;
 523:mri/architectures/armv7-m/armv7-m.c ****     }
 524:mri/architectures/armv7-m/armv7-m.c **** }
 525:mri/architectures/armv7-m/armv7-m.c **** 
 526:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionCPS(uint16_t firstWord)
 527:mri/architectures/armv7-m/armv7-m.c **** {
 1889              		.loc 1 527 1 is_stmt 1 view -0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 528:mri/architectures/armv7-m/armv7-m.c ****     return (firstWord & 0xFFEC) == 0xB660;
 1894              		.loc 1 528 5 view .LVU503
 1895              		.loc 1 528 33 is_stmt 0 view .LVU504
 1896 0000 20F01300 		bic	r0, r0, #19
 1897              	.LVL156:
 1898              		.loc 1 528 33 view .LVU505
 1899 0004 80B2     		uxth	r0, r0
 529:mri/architectures/armv7-m/armv7-m.c **** }
 1900              		.loc 1 529 1 view .LVU506
 1901 0006 4BF26063 		movw	r3, #46688
 1902 000a 9842     		cmp	r0, r3
 1903 000c 14BF     		ite	ne
ARM GAS  /tmp/ccXppZcm.s 			page 109


 1904 000e 0020     		movne	r0, #0
 1905 0010 0120     		moveq	r0, #1
 1906 0012 7047     		bx	lr
 1907              		.cfi_endproc
 1908              	.LFE251:
 1910              		.section	.text.isInstructionMRS,"ax",%progbits
 1911              		.align	1
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1916              	isInstructionMRS:
 1917              	.LVL157:
 1918              	.LFB253:
 530:mri/architectures/armv7-m/armv7-m.c **** 
 531:mri/architectures/armv7-m/armv7-m.c **** static int processInstructionCPS(uint16_t firstWord)
 532:mri/architectures/armv7-m/armv7-m.c **** {
 533:mri/architectures/armv7-m/armv7-m.c ****     uint16_t enable = (firstWord & 0x0010) >> 4;
 534:mri/architectures/armv7-m/armv7-m.c ****     uint16_t I = firstWord & 0x0002;
 535:mri/architectures/armv7-m/armv7-m.c **** 
 536:mri/architectures/armv7-m/armv7-m.c ****     if (I)
 537:mri/architectures/armv7-m/armv7-m.c ****     {
 538:mri/architectures/armv7-m/armv7-m.c ****         Context_Set(&mriCortexMState.context, PRIMASK, enable);
 539:mri/architectures/armv7-m/armv7-m.c ****         return 1;
 540:mri/architectures/armv7-m/armv7-m.c ****     }
 541:mri/architectures/armv7-m/armv7-m.c ****     return 0;
 542:mri/architectures/armv7-m/armv7-m.c **** }
 543:mri/architectures/armv7-m/armv7-m.c **** 
 544:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionMRS(uint16_t firstWord, uint16_t secondWord)
 545:mri/architectures/armv7-m/armv7-m.c **** {
 1919              		.loc 1 545 1 is_stmt 1 view -0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 546:mri/architectures/armv7-m/armv7-m.c ****     return ((firstWord & 0xFFFF) == 0xF3EF) && ((secondWord & 0xF000) == 0x8000);
 1924              		.loc 1 546 5 view .LVU508
 1925              		.loc 1 546 45 is_stmt 0 view .LVU509
 1926 0000 4FF2EF33 		movw	r3, #62447
 1927 0004 9842     		cmp	r0, r3
 1928 0006 01D0     		beq	.L156
 1929 0008 0020     		movs	r0, #0
 1930              	.LVL158:
 1931              		.loc 1 546 45 view .LVU510
 1932 000a 7047     		bx	lr
 1933              	.LVL159:
 1934              	.L156:
 1935              		.loc 1 546 45 discriminator 1 view .LVU511
 1936 000c 01F47041 		and	r1, r1, #61440
 1937              	.LVL160:
 1938              		.loc 1 546 45 discriminator 1 view .LVU512
 1939 0010 B1F5004F 		cmp	r1, #32768
 1940 0014 01D0     		beq	.L155
 1941              		.loc 1 546 45 view .LVU513
 1942 0016 0020     		movs	r0, #0
 1943              	.LVL161:
 1944              		.loc 1 546 45 view .LVU514
 1945 0018 7047     		bx	lr
ARM GAS  /tmp/ccXppZcm.s 			page 110


 1946              	.LVL162:
 1947              	.L155:
 1948              		.loc 1 546 45 view .LVU515
 1949 001a 0120     		movs	r0, #1
 1950              	.LVL163:
 547:mri/architectures/armv7-m/armv7-m.c **** }
 1951              		.loc 1 547 1 view .LVU516
 1952 001c 7047     		bx	lr
 1953              		.cfi_endproc
 1954              	.LFE253:
 1956              		.section	.text.setRestorePriorityRegsFlag,"ax",%progbits
 1957              		.align	1
 1958              		.syntax unified
 1959              		.thumb
 1960              		.thumb_func
 1962              	setRestorePriorityRegsFlag:
 1963              	.LFB257:
 548:mri/architectures/armv7-m/armv7-m.c **** 
 549:mri/architectures/armv7-m/armv7-m.c **** static int processInstructionMRS(uint16_t firstWord, uint16_t secondWord)
 550:mri/architectures/armv7-m/armv7-m.c **** {
 551:mri/architectures/armv7-m/armv7-m.c ****     uint16_t Rn = (secondWord & 0x0F00) >> 8;
 552:mri/architectures/armv7-m/armv7-m.c ****     uint16_t SYSm = secondWord & 0x00FF;
 553:mri/architectures/armv7-m/armv7-m.c **** 
 554:mri/architectures/armv7-m/armv7-m.c ****     switch (SYSm)
 555:mri/architectures/armv7-m/armv7-m.c ****     {
 556:mri/architectures/armv7-m/armv7-m.c ****         case 16: // PRIMASK
 557:mri/architectures/armv7-m/armv7-m.c ****             Context_Set(&mriCortexMState.context, Rn, Context_Get(&mriCortexMState.context, PRIMASK
 558:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 559:mri/architectures/armv7-m/armv7-m.c ****         case 17: // BASEPRI
 560:mri/architectures/armv7-m/armv7-m.c ****         case 18: // BASEPRI_MAX
 561:mri/architectures/armv7-m/armv7-m.c ****             Context_Set(&mriCortexMState.context, Rn, Context_Get(&mriCortexMState.context, BASEPRI
 562:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 563:mri/architectures/armv7-m/armv7-m.c ****         default:
 564:mri/architectures/armv7-m/armv7-m.c ****             return 0;
 565:mri/architectures/armv7-m/armv7-m.c ****     }
 566:mri/architectures/armv7-m/armv7-m.c **** }
 567:mri/architectures/armv7-m/armv7-m.c **** 
 568:mri/architectures/armv7-m/armv7-m.c **** static void recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts(void)
 569:mri/architectures/armv7-m/armv7-m.c **** {
 570:mri/architectures/armv7-m/armv7-m.c ****     recordCurrentPriorityRegs();
 571:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, PRIMASK, 0);
 572:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, BASEPRI,
 573:mri/architectures/armv7-m/armv7-m.c ****                 calculateBasePriorityForThisCPU(mriCortexMGetPriority(DebugMonitor_IRQn) + 1));
 574:mri/architectures/armv7-m/armv7-m.c **** }
 575:mri/architectures/armv7-m/armv7-m.c **** 
 576:mri/architectures/armv7-m/armv7-m.c **** static void recordCurrentPriorityRegs(void)
 577:mri/architectures/armv7-m/armv7-m.c **** {
 578:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.primask = Context_Get(&mriCortexMState.context, PRIMASK);
 579:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.basepri = Context_Get(&mriCortexMState.context, BASEPRI);
 580:mri/architectures/armv7-m/armv7-m.c ****     setRestorePriorityRegsFlag();
 581:mri/architectures/armv7-m/armv7-m.c **** }
 582:mri/architectures/armv7-m/armv7-m.c **** 
 583:mri/architectures/armv7-m/armv7-m.c **** static void setRestorePriorityRegsFlag(void)
 584:mri/architectures/armv7-m/armv7-m.c **** {
 1964              		.loc 1 584 1 is_stmt 1 view -0
 1965              		.cfi_startproc
 1966              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccXppZcm.s 			page 111


 1967              		@ frame_needed = 0, uses_anonymous_args = 0
 1968              		@ link register save eliminated.
 585:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_RESTORE_PRI;
 1969              		.loc 1 585 5 view .LVU518
 1970              		.loc 1 585 21 is_stmt 0 view .LVU519
 1971 0000 024A     		ldr	r2, .L158
 1972 0002 1368     		ldr	r3, [r2]
 1973 0004 43F00803 		orr	r3, r3, #8
 1974 0008 1360     		str	r3, [r2]
 586:mri/architectures/armv7-m/armv7-m.c **** }
 1975              		.loc 1 586 1 view .LVU520
 1976 000a 7047     		bx	lr
 1977              	.L159:
 1978              		.align	2
 1979              	.L158:
 1980 000c 00000000 		.word	mriCortexMFlags
 1981              		.cfi_endproc
 1982              	.LFE257:
 1984              		.section	.text.calculateBasePriorityForThisCPU,"ax",%progbits
 1985              		.align	1
 1986              		.syntax unified
 1987              		.thumb
 1988              		.thumb_func
 1990              	calculateBasePriorityForThisCPU:
 1991              	.LVL164:
 1992              	.LFB258:
 587:mri/architectures/armv7-m/armv7-m.c **** 
 588:mri/architectures/armv7-m/armv7-m.c **** static uint8_t calculateBasePriorityForThisCPU(uint8_t basePriority)
 589:mri/architectures/armv7-m/armv7-m.c **** {
 1993              		.loc 1 589 1 is_stmt 1 view -0
 1994              		.cfi_startproc
 1995              		@ args = 0, pretend = 0, frame = 0
 1996              		@ frame_needed = 0, uses_anonymous_args = 0
 1997              		@ link register save eliminated.
 590:mri/architectures/armv7-m/armv7-m.c ****     /* Different Cortex-M3 chips support different number of bits in the priority register. */
 591:mri/architectures/armv7-m/armv7-m.c ****     return basePriority << mriCortexMState.priorityBitShift;
 1998              		.loc 1 591 5 view .LVU522
 1999              		.loc 1 591 43 is_stmt 0 view .LVU523
 2000 0000 024B     		ldr	r3, .L161
 2001 0002 DB6B     		ldr	r3, [r3, #60]
 2002              		.loc 1 591 25 view .LVU524
 2003 0004 9840     		lsls	r0, r0, r3
 2004              	.LVL165:
 592:mri/architectures/armv7-m/armv7-m.c **** }
 2005              		.loc 1 592 1 view .LVU525
 2006 0006 C0B2     		uxtb	r0, r0
 2007 0008 7047     		bx	lr
 2008              	.L162:
 2009 000a 00BF     		.align	2
 2010              	.L161:
 2011 000c 00000000 		.word	mriCortexMState
 2012              		.cfi_endproc
 2013              	.LFE258:
 2015              		.section	.text.getReasonFromMatchComparator,"ax",%progbits
 2016              		.align	1
 2017              		.syntax unified
 2018              		.thumb
ARM GAS  /tmp/ccXppZcm.s 			page 112


 2019              		.thumb_func
 2021              	getReasonFromMatchComparator:
 2022              	.LVL166:
 2023              	.LFB266:
 593:mri/architectures/armv7-m/armv7-m.c **** 
 594:mri/architectures/armv7-m/armv7-m.c **** 
 595:mri/architectures/armv7-m/armv7-m.c **** uint8_t mriCortexMGetPriority(IRQn_Type irq)
 596:mri/architectures/armv7-m/armv7-m.c **** {
 597:mri/architectures/armv7-m/armv7-m.c ****     uint8_t priority;
 598:mri/architectures/armv7-m/armv7-m.c **** 
 599:mri/architectures/armv7-m/armv7-m.c ****     if ((int32_t)irq >= 0)
 600:mri/architectures/armv7-m/armv7-m.c ****     {
 601:mri/architectures/armv7-m/armv7-m.c ****         priority = NVIC->IP[(uint32_t)irq];
 602:mri/architectures/armv7-m/armv7-m.c ****     }
 603:mri/architectures/armv7-m/armv7-m.c ****     else
 604:mri/architectures/armv7-m/armv7-m.c ****     {
 605:mri/architectures/armv7-m/armv7-m.c ****         priority = SCB->SHP[((uint32_t)irq & 0xF)-4];
 606:mri/architectures/armv7-m/armv7-m.c ****     }
 607:mri/architectures/armv7-m/armv7-m.c ****     return priority >> mriCortexMState.priorityBitShift;
 608:mri/architectures/armv7-m/armv7-m.c **** }
 609:mri/architectures/armv7-m/armv7-m.c **** 
 610:mri/architectures/armv7-m/armv7-m.c **** 
 611:mri/architectures/armv7-m/armv7-m.c **** int Platform_IsSingleStepping(void)
 612:mri/architectures/armv7-m/armv7-m.c **** {
 613:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMFlags & CORTEXM_FLAGS_SINGLE_STEPPING;
 614:mri/architectures/armv7-m/armv7-m.c **** }
 615:mri/architectures/armv7-m/armv7-m.c **** 
 616:mri/architectures/armv7-m/armv7-m.c **** 
 617:mri/architectures/armv7-m/armv7-m.c **** char* Platform_GetPacketBuffer(void)
 618:mri/architectures/armv7-m/armv7-m.c **** {
 619:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMState.packetBuffer;
 620:mri/architectures/armv7-m/armv7-m.c **** }
 621:mri/architectures/armv7-m/armv7-m.c **** 
 622:mri/architectures/armv7-m/armv7-m.c **** 
 623:mri/architectures/armv7-m/armv7-m.c **** uint32_t Platform_GetPacketBufferSize(void)
 624:mri/architectures/armv7-m/armv7-m.c **** {
 625:mri/architectures/armv7-m/armv7-m.c ****     return sizeof(mriCortexMState.packetBuffer);
 626:mri/architectures/armv7-m/armv7-m.c **** }
 627:mri/architectures/armv7-m/armv7-m.c **** 
 628:mri/architectures/armv7-m/armv7-m.c **** 
 629:mri/architectures/armv7-m/armv7-m.c **** static PlatformTrapReason cacheTrapReason(void);
 630:mri/architectures/armv7-m/armv7-m.c **** static PlatformTrapReason findMatchedWatchpoint(void);
 631:mri/architectures/armv7-m/armv7-m.c **** static PlatformTrapReason getReasonFromMatchComparator(const DWT_COMP_Type* pComparator);
 632:mri/architectures/armv7-m/armv7-m.c **** static uint32_t hasControlCBeenDetected();
 633:mri/architectures/armv7-m/armv7-m.c **** static uint8_t  determineCauseOfDebugEvent(void);
 634:mri/architectures/armv7-m/armv7-m.c **** uint8_t Platform_DetermineCauseOfException(void)
 635:mri/architectures/armv7-m/armv7-m.c **** {
 636:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = mriCortexMState.exceptionNumber;
 637:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.reason = cacheTrapReason();
 638:mri/architectures/armv7-m/armv7-m.c **** 
 639:mri/architectures/armv7-m/armv7-m.c ****     if (hasControlCBeenDetected())
 640:mri/architectures/armv7-m/armv7-m.c ****     {
 641:mri/architectures/armv7-m/armv7-m.c ****         return SIGINT;
 642:mri/architectures/armv7-m/armv7-m.c ****     }
 643:mri/architectures/armv7-m/armv7-m.c **** 
 644:mri/architectures/armv7-m/armv7-m.c ****     switch(exceptionNumber)
 645:mri/architectures/armv7-m/armv7-m.c ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 113


 646:mri/architectures/armv7-m/armv7-m.c ****     case 2:
 647:mri/architectures/armv7-m/armv7-m.c ****         /* NMI */
 648:mri/architectures/armv7-m/armv7-m.c ****         return SIGINT;
 649:mri/architectures/armv7-m/armv7-m.c ****     case 3:
 650:mri/architectures/armv7-m/armv7-m.c ****         /* HardFault */
 651:mri/architectures/armv7-m/armv7-m.c ****         return SIGSEGV;
 652:mri/architectures/armv7-m/armv7-m.c ****     case 4:
 653:mri/architectures/armv7-m/armv7-m.c ****         /* MemManage */
 654:mri/architectures/armv7-m/armv7-m.c ****         return SIGSEGV;
 655:mri/architectures/armv7-m/armv7-m.c ****     case 5:
 656:mri/architectures/armv7-m/armv7-m.c ****         /* BusFault */
 657:mri/architectures/armv7-m/armv7-m.c ****         return SIGBUS;
 658:mri/architectures/armv7-m/armv7-m.c ****     case 6:
 659:mri/architectures/armv7-m/armv7-m.c ****         /* UsageFault */
 660:mri/architectures/armv7-m/armv7-m.c ****         return SIGILL;
 661:mri/architectures/armv7-m/armv7-m.c ****     case 12:
 662:mri/architectures/armv7-m/armv7-m.c ****         /* Debug Monitor */
 663:mri/architectures/armv7-m/armv7-m.c ****         return determineCauseOfDebugEvent();
 664:mri/architectures/armv7-m/armv7-m.c ****     default:
 665:mri/architectures/armv7-m/armv7-m.c ****         /* NOTE: Catch all signal will be SIGINT. */
 666:mri/architectures/armv7-m/armv7-m.c ****         return SIGINT;
 667:mri/architectures/armv7-m/armv7-m.c ****     }
 668:mri/architectures/armv7-m/armv7-m.c **** }
 669:mri/architectures/armv7-m/armv7-m.c **** 
 670:mri/architectures/armv7-m/armv7-m.c **** PlatformTrapReason cacheTrapReason(void)
 671:mri/architectures/armv7-m/armv7-m.c **** {
 672:mri/architectures/armv7-m/armv7-m.c ****     PlatformTrapReason reason = { MRI_PLATFORM_TRAP_TYPE_UNKNOWN, 0x00000000 };
 673:mri/architectures/armv7-m/armv7-m.c **** 
 674:mri/architectures/armv7-m/armv7-m.c ****     uint32_t debugFaultStatus = mriCortexMState.dfsr;
 675:mri/architectures/armv7-m/armv7-m.c ****     if (debugFaultStatus & SCB_DFSR_BKPT)
 676:mri/architectures/armv7-m/armv7-m.c ****     {
 677:mri/architectures/armv7-m/armv7-m.c ****         /* Was caused by hardware or software breakpoint. If PC points to BKPT then report as softw
 678:mri/architectures/armv7-m/armv7-m.c ****         if (Platform_TypeOfCurrentInstruction() == MRI_PLATFORM_INSTRUCTION_HARDCODED_BREAKPOINT)
 679:mri/architectures/armv7-m/armv7-m.c ****             reason.type = MRI_PLATFORM_TRAP_TYPE_SWBREAK;
 680:mri/architectures/armv7-m/armv7-m.c ****         else
 681:mri/architectures/armv7-m/armv7-m.c ****             reason.type = MRI_PLATFORM_TRAP_TYPE_HWBREAK;
 682:mri/architectures/armv7-m/armv7-m.c ****     }
 683:mri/architectures/armv7-m/armv7-m.c ****     else if (debugFaultStatus & SCB_DFSR_DWTTRAP)
 684:mri/architectures/armv7-m/armv7-m.c ****     {
 685:mri/architectures/armv7-m/armv7-m.c ****         reason = findMatchedWatchpoint();
 686:mri/architectures/armv7-m/armv7-m.c ****     }
 687:mri/architectures/armv7-m/armv7-m.c ****     return reason;
 688:mri/architectures/armv7-m/armv7-m.c **** }
 689:mri/architectures/armv7-m/armv7-m.c **** 
 690:mri/architectures/armv7-m/armv7-m.c **** static PlatformTrapReason findMatchedWatchpoint(void)
 691:mri/architectures/armv7-m/armv7-m.c **** {
 692:mri/architectures/armv7-m/armv7-m.c ****     PlatformTrapReason reason = { MRI_PLATFORM_TRAP_TYPE_UNKNOWN, 0x00000000 };
 693:mri/architectures/armv7-m/armv7-m.c ****     DWT_COMP_Type*     pCurrentComparator = DWT_COMP_ARRAY;
 694:mri/architectures/armv7-m/armv7-m.c ****     uint32_t           comparatorCount;
 695:mri/architectures/armv7-m/armv7-m.c ****     uint32_t           i;
 696:mri/architectures/armv7-m/armv7-m.c **** 
 697:mri/architectures/armv7-m/armv7-m.c ****     comparatorCount = getDWTComparatorCount();
 698:mri/architectures/armv7-m/armv7-m.c ****     for (i = 0 ; i < comparatorCount ; i++)
 699:mri/architectures/armv7-m/armv7-m.c ****     {
 700:mri/architectures/armv7-m/armv7-m.c ****         if (pCurrentComparator->FUNCTION & DWT_COMP_FUNCTION_MATCHED)
 701:mri/architectures/armv7-m/armv7-m.c ****             reason = getReasonFromMatchComparator(pCurrentComparator);
 702:mri/architectures/armv7-m/armv7-m.c ****         pCurrentComparator++;
ARM GAS  /tmp/ccXppZcm.s 			page 114


 703:mri/architectures/armv7-m/armv7-m.c ****     }
 704:mri/architectures/armv7-m/armv7-m.c ****     return reason;
 705:mri/architectures/armv7-m/armv7-m.c **** }
 706:mri/architectures/armv7-m/armv7-m.c **** 
 707:mri/architectures/armv7-m/armv7-m.c **** static PlatformTrapReason getReasonFromMatchComparator(const DWT_COMP_Type* pComparator)
 708:mri/architectures/armv7-m/armv7-m.c **** {
 2024              		.loc 1 708 1 is_stmt 1 view -0
 2025              		.cfi_startproc
 2026              		@ args = 0, pretend = 0, frame = 0
 2027              		@ frame_needed = 0, uses_anonymous_args = 0
 2028              		@ link register save eliminated.
 709:mri/architectures/armv7-m/armv7-m.c ****     PlatformTrapReason reason;
 2029              		.loc 1 709 5 view .LVU527
 710:mri/architectures/armv7-m/armv7-m.c ****     switch (pComparator->FUNCTION & DWT_COMP_FUNCTION_FUNCTION_MASK)
 2030              		.loc 1 710 5 view .LVU528
 2031              		.loc 1 710 24 is_stmt 0 view .LVU529
 2032 0000 8B68     		ldr	r3, [r1, #8]
 2033              		.loc 1 710 35 view .LVU530
 2034 0002 03F00F03 		and	r3, r3, #15
 2035              		.loc 1 710 5 view .LVU531
 2036 0006 062B     		cmp	r3, #6
 2037 0008 0BD0     		beq	.L164
 2038 000a 072B     		cmp	r3, #7
 2039 000c 0CD0     		beq	.L165
 2040 000e 052B     		cmp	r3, #5
 2041 0010 02D0     		beq	.L168
 711:mri/architectures/armv7-m/armv7-m.c ****     {
 712:mri/architectures/armv7-m/armv7-m.c ****     case DWT_COMP_FUNCTION_FUNCTION_DATA_READ:
 713:mri/architectures/armv7-m/armv7-m.c ****         reason.type = MRI_PLATFORM_TRAP_TYPE_RWATCH;
 714:mri/architectures/armv7-m/armv7-m.c ****         break;
 715:mri/architectures/armv7-m/armv7-m.c ****     case DWT_COMP_FUNCTION_FUNCTION_DATA_WRITE:
 716:mri/architectures/armv7-m/armv7-m.c ****         reason.type = MRI_PLATFORM_TRAP_TYPE_WATCH;
 717:mri/architectures/armv7-m/armv7-m.c ****         break;
 718:mri/architectures/armv7-m/armv7-m.c ****     case DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE:
 719:mri/architectures/armv7-m/armv7-m.c ****         reason.type = MRI_PLATFORM_TRAP_TYPE_AWATCH;
 720:mri/architectures/armv7-m/armv7-m.c ****         break;
 721:mri/architectures/armv7-m/armv7-m.c ****     default:
 722:mri/architectures/armv7-m/armv7-m.c ****         reason.type = MRI_PLATFORM_TRAP_TYPE_UNKNOWN;
 2042              		.loc 1 722 9 is_stmt 1 view .LVU532
 2043              		.loc 1 722 21 is_stmt 0 view .LVU533
 2044 0012 0023     		movs	r3, #0
 2045 0014 0370     		strb	r3, [r0]
 723:mri/architectures/armv7-m/armv7-m.c ****         break;
 2046              		.loc 1 723 9 is_stmt 1 view .LVU534
 2047 0016 01E0     		b	.L167
 2048              	.L168:
 713:mri/architectures/armv7-m/armv7-m.c ****         break;
 2049              		.loc 1 713 9 view .LVU535
 713:mri/architectures/armv7-m/armv7-m.c ****         break;
 2050              		.loc 1 713 21 is_stmt 0 view .LVU536
 2051 0018 0423     		movs	r3, #4
 2052 001a 0370     		strb	r3, [r0]
 714:mri/architectures/armv7-m/armv7-m.c ****     case DWT_COMP_FUNCTION_FUNCTION_DATA_WRITE:
 2053              		.loc 1 714 9 is_stmt 1 view .LVU537
 2054              	.L167:
 724:mri/architectures/armv7-m/armv7-m.c ****     }
 725:mri/architectures/armv7-m/armv7-m.c ****     reason.address = pComparator->COMP;
ARM GAS  /tmp/ccXppZcm.s 			page 115


 2055              		.loc 1 725 5 view .LVU538
 2056              		.loc 1 725 33 is_stmt 0 view .LVU539
 2057 001c 0B68     		ldr	r3, [r1]
 2058              		.loc 1 725 20 view .LVU540
 2059 001e 4360     		str	r3, [r0, #4]
 726:mri/architectures/armv7-m/armv7-m.c ****     return reason;
 2060              		.loc 1 726 5 is_stmt 1 view .LVU541
 727:mri/architectures/armv7-m/armv7-m.c **** }
 2061              		.loc 1 727 1 is_stmt 0 view .LVU542
 2062 0020 7047     		bx	lr
 2063              	.L164:
 716:mri/architectures/armv7-m/armv7-m.c ****         break;
 2064              		.loc 1 716 9 is_stmt 1 view .LVU543
 716:mri/architectures/armv7-m/armv7-m.c ****         break;
 2065              		.loc 1 716 21 is_stmt 0 view .LVU544
 2066 0022 0323     		movs	r3, #3
 2067 0024 0370     		strb	r3, [r0]
 717:mri/architectures/armv7-m/armv7-m.c ****     case DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE:
 2068              		.loc 1 717 9 is_stmt 1 view .LVU545
 2069 0026 F9E7     		b	.L167
 2070              	.L165:
 719:mri/architectures/armv7-m/armv7-m.c ****         break;
 2071              		.loc 1 719 9 view .LVU546
 719:mri/architectures/armv7-m/armv7-m.c ****         break;
 2072              		.loc 1 719 21 is_stmt 0 view .LVU547
 2073 0028 0523     		movs	r3, #5
 2074 002a 0370     		strb	r3, [r0]
 720:mri/architectures/armv7-m/armv7-m.c ****     default:
 2075              		.loc 1 720 9 is_stmt 1 view .LVU548
 2076 002c F6E7     		b	.L167
 2077              		.cfi_endproc
 2078              	.LFE266:
 2080              		.section	.text.findMatchedWatchpoint,"ax",%progbits
 2081              		.align	1
 2082              		.syntax unified
 2083              		.thumb
 2084              		.thumb_func
 2086              	findMatchedWatchpoint:
 2087              	.LVL167:
 2088              	.LFB265:
 691:mri/architectures/armv7-m/armv7-m.c ****     PlatformTrapReason reason = { MRI_PLATFORM_TRAP_TYPE_UNKNOWN, 0x00000000 };
 2089              		.loc 1 691 1 view -0
 2090              		.cfi_startproc
 2091              		@ args = 0, pretend = 0, frame = 0
 2092              		@ frame_needed = 0, uses_anonymous_args = 0
 691:mri/architectures/armv7-m/armv7-m.c ****     PlatformTrapReason reason = { MRI_PLATFORM_TRAP_TYPE_UNKNOWN, 0x00000000 };
 2093              		.loc 1 691 1 is_stmt 0 view .LVU550
 2094 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2095              	.LCFI12:
 2096              		.cfi_def_cfa_offset 24
 2097              		.cfi_offset 3, -24
 2098              		.cfi_offset 4, -20
 2099              		.cfi_offset 5, -16
 2100              		.cfi_offset 6, -12
 2101              		.cfi_offset 7, -8
 2102              		.cfi_offset 14, -4
 2103 0002 0746     		mov	r7, r0
ARM GAS  /tmp/ccXppZcm.s 			page 116


 692:mri/architectures/armv7-m/armv7-m.c ****     DWT_COMP_Type*     pCurrentComparator = DWT_COMP_ARRAY;
 2104              		.loc 1 692 5 is_stmt 1 view .LVU551
 692:mri/architectures/armv7-m/armv7-m.c ****     DWT_COMP_Type*     pCurrentComparator = DWT_COMP_ARRAY;
 2105              		.loc 1 692 24 is_stmt 0 view .LVU552
 2106 0004 0024     		movs	r4, #0
 2107 0006 0470     		strb	r4, [r0]
 2108 0008 4460     		str	r4, [r0, #4]
 693:mri/architectures/armv7-m/armv7-m.c ****     uint32_t           comparatorCount;
 2109              		.loc 1 693 5 is_stmt 1 view .LVU553
 2110              	.LVL168:
 694:mri/architectures/armv7-m/armv7-m.c ****     uint32_t           i;
 2111              		.loc 1 694 5 view .LVU554
 695:mri/architectures/armv7-m/armv7-m.c **** 
 2112              		.loc 1 695 5 view .LVU555
 697:mri/architectures/armv7-m/armv7-m.c ****     for (i = 0 ; i < comparatorCount ; i++)
 2113              		.loc 1 697 5 view .LVU556
 2114              	.LBB295:
 2115              	.LBI295:
 169:mri/architectures/armv7-m/debug_cm3.h **** {
 2116              		.loc 4 169 26 view .LVU557
 2117              	.LBB296:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 2118              		.loc 4 171 5 view .LVU558
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 2119              		.loc 4 171 16 is_stmt 0 view .LVU559
 2120 000a 0A4B     		ldr	r3, .L175
 2121 000c 1E68     		ldr	r6, [r3]
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 2122              		.loc 4 171 23 view .LVU560
 2123 000e 360F     		lsrs	r6, r6, #28
 2124              	.LVL169:
 171:mri/architectures/armv7-m/debug_cm3.h **** }
 2125              		.loc 4 171 23 view .LVU561
 2126              	.LBE296:
 2127              	.LBE295:
 698:mri/architectures/armv7-m/armv7-m.c ****     {
 2128              		.loc 1 698 5 is_stmt 1 view .LVU562
 693:mri/architectures/armv7-m/armv7-m.c ****     uint32_t           comparatorCount;
 2129              		.loc 1 693 24 is_stmt 0 view .LVU563
 2130 0010 094D     		ldr	r5, .L175+4
 698:mri/architectures/armv7-m/armv7-m.c ****     {
 2131              		.loc 1 698 5 view .LVU564
 2132 0012 01E0     		b	.L170
 2133              	.LVL170:
 2134              	.L171:
 702:mri/architectures/armv7-m/armv7-m.c ****     }
 2135              		.loc 1 702 9 is_stmt 1 discriminator 2 view .LVU565
 702:mri/architectures/armv7-m/armv7-m.c ****     }
 2136              		.loc 1 702 27 is_stmt 0 discriminator 2 view .LVU566
 2137 0014 1035     		adds	r5, r5, #16
 2138              	.LVL171:
 698:mri/architectures/armv7-m/armv7-m.c ****     {
 2139              		.loc 1 698 41 is_stmt 1 discriminator 2 view .LVU567
 2140 0016 0134     		adds	r4, r4, #1
 2141              	.LVL172:
 2142              	.L170:
 698:mri/architectures/armv7-m/armv7-m.c ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 117


 2143              		.loc 1 698 20 discriminator 1 view .LVU568
 2144 0018 B442     		cmp	r4, r6
 2145 001a 08D2     		bcs	.L174
 700:mri/architectures/armv7-m/armv7-m.c ****             reason = getReasonFromMatchComparator(pCurrentComparator);
 2146              		.loc 1 700 9 view .LVU569
 700:mri/architectures/armv7-m/armv7-m.c ****             reason = getReasonFromMatchComparator(pCurrentComparator);
 2147              		.loc 1 700 31 is_stmt 0 view .LVU570
 2148 001c AB68     		ldr	r3, [r5, #8]
 700:mri/architectures/armv7-m/armv7-m.c ****             reason = getReasonFromMatchComparator(pCurrentComparator);
 2149              		.loc 1 700 12 view .LVU571
 2150 001e 13F0807F 		tst	r3, #16777216
 2151 0022 F7D0     		beq	.L171
 701:mri/architectures/armv7-m/armv7-m.c ****         pCurrentComparator++;
 2152              		.loc 1 701 13 is_stmt 1 view .LVU572
 701:mri/architectures/armv7-m/armv7-m.c ****         pCurrentComparator++;
 2153              		.loc 1 701 22 is_stmt 0 view .LVU573
 2154 0024 2946     		mov	r1, r5
 2155 0026 3846     		mov	r0, r7
 2156 0028 FFF7FEFF 		bl	getReasonFromMatchComparator
 2157              	.LVL173:
 2158 002c F2E7     		b	.L171
 2159              	.L174:
 704:mri/architectures/armv7-m/armv7-m.c **** }
 2160              		.loc 1 704 5 is_stmt 1 view .LVU574
 705:mri/architectures/armv7-m/armv7-m.c **** 
 2161              		.loc 1 705 1 is_stmt 0 view .LVU575
 2162 002e 3846     		mov	r0, r7
 2163 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2164              	.LVL174:
 2165              	.L176:
 705:mri/architectures/armv7-m/armv7-m.c **** 
 2166              		.loc 1 705 1 view .LVU576
 2167 0032 00BF     		.align	2
 2168              	.L175:
 2169 0034 001000E0 		.word	-536866816
 2170 0038 201000E0 		.word	-536866784
 2171              		.cfi_endproc
 2172              	.LFE265:
 2174              		.section	.text.hasControlCBeenDetected,"ax",%progbits
 2175              		.align	1
 2176              		.syntax unified
 2177              		.thumb
 2178              		.thumb_func
 2180              	hasControlCBeenDetected:
 2181              	.LFB267:
 728:mri/architectures/armv7-m/armv7-m.c **** 
 729:mri/architectures/armv7-m/armv7-m.c **** static uint32_t hasControlCBeenDetected()
 730:mri/architectures/armv7-m/armv7-m.c **** {
 2182              		.loc 1 730 1 is_stmt 1 view -0
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 0
 2185              		@ frame_needed = 0, uses_anonymous_args = 0
 2186              		@ link register save eliminated.
 731:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMFlags & CORTEXM_FLAGS_CTRL_C;
 2187              		.loc 1 731 5 view .LVU578
 2188              		.loc 1 731 28 is_stmt 0 view .LVU579
 2189 0000 024B     		ldr	r3, .L178
ARM GAS  /tmp/ccXppZcm.s 			page 118


 2190 0002 1868     		ldr	r0, [r3]
 732:mri/architectures/armv7-m/armv7-m.c **** }
 2191              		.loc 1 732 1 view .LVU580
 2192 0004 00F02000 		and	r0, r0, #32
 2193 0008 7047     		bx	lr
 2194              	.L179:
 2195 000a 00BF     		.align	2
 2196              	.L178:
 2197 000c 00000000 		.word	mriCortexMFlags
 2198              		.cfi_endproc
 2199              	.LFE267:
 2201              		.section	.text.determineCauseOfDebugEvent,"ax",%progbits
 2202              		.align	1
 2203              		.syntax unified
 2204              		.thumb
 2205              		.thumb_func
 2207              	determineCauseOfDebugEvent:
 2208              	.LFB268:
 733:mri/architectures/armv7-m/armv7-m.c **** 
 734:mri/architectures/armv7-m/armv7-m.c **** static uint8_t determineCauseOfDebugEvent(void)
 735:mri/architectures/armv7-m/armv7-m.c **** {
 2209              		.loc 1 735 1 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 0
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              		@ link register save eliminated.
 736:mri/architectures/armv7-m/armv7-m.c ****     static struct
 2214              		.loc 1 736 5 view .LVU582
 737:mri/architectures/armv7-m/armv7-m.c ****     {
 738:mri/architectures/armv7-m/armv7-m.c ****         uint32_t        statusBit;
 739:mri/architectures/armv7-m/armv7-m.c ****         unsigned char   signalToReturn;
 740:mri/architectures/armv7-m/armv7-m.c ****     } const debugEventToSignalMap[] =
 741:mri/architectures/armv7-m/armv7-m.c ****     {
 742:mri/architectures/armv7-m/armv7-m.c ****         {SCB_DFSR_EXTERNAL, SIGSTOP},
 743:mri/architectures/armv7-m/armv7-m.c ****         {SCB_DFSR_DWTTRAP, SIGTRAP},
 744:mri/architectures/armv7-m/armv7-m.c ****         {SCB_DFSR_BKPT, SIGTRAP},
 745:mri/architectures/armv7-m/armv7-m.c ****         {SCB_DFSR_HALTED, SIGTRAP}
 746:mri/architectures/armv7-m/armv7-m.c ****     };
 747:mri/architectures/armv7-m/armv7-m.c ****     uint32_t debugFaultStatus = mriCortexMState.dfsr;
 2215              		.loc 1 747 5 view .LVU583
 2216              		.loc 1 747 14 is_stmt 0 view .LVU584
 2217 0000 094B     		ldr	r3, .L187
 2218 0002 D969     		ldr	r1, [r3, #28]
 2219              	.LVL175:
 748:mri/architectures/armv7-m/armv7-m.c ****     size_t   i;
 2220              		.loc 1 748 5 is_stmt 1 view .LVU585
 749:mri/architectures/armv7-m/armv7-m.c **** 
 750:mri/architectures/armv7-m/armv7-m.c ****     for (i = 0 ; i < sizeof(debugEventToSignalMap)/sizeof(debugEventToSignalMap[0]) ; i++)
 2221              		.loc 1 750 5 view .LVU586
 2222              		.loc 1 750 12 is_stmt 0 view .LVU587
 2223 0004 0023     		movs	r3, #0
 2224              	.LVL176:
 2225              	.L181:
 2226              		.loc 1 750 20 is_stmt 1 discriminator 1 view .LVU588
 2227 0006 032B     		cmp	r3, #3
 2228 0008 0BD8     		bhi	.L185
 751:mri/architectures/armv7-m/armv7-m.c ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 119


 752:mri/architectures/armv7-m/armv7-m.c ****         if (debugFaultStatus & debugEventToSignalMap[i].statusBit)
 2229              		.loc 1 752 9 view .LVU589
 2230              		.loc 1 752 56 is_stmt 0 view .LVU590
 2231 000a 084A     		ldr	r2, .L187+4
 2232 000c 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2233              		.loc 1 752 12 view .LVU591
 2234 0010 0A42     		tst	r2, r1
 2235 0012 01D1     		bne	.L186
 750:mri/architectures/armv7-m/armv7-m.c ****     {
 2236              		.loc 1 750 88 is_stmt 1 discriminator 2 view .LVU592
 2237 0014 0133     		adds	r3, r3, #1
 2238              	.LVL177:
 750:mri/architectures/armv7-m/armv7-m.c ****     {
 2239              		.loc 1 750 88 is_stmt 0 discriminator 2 view .LVU593
 2240 0016 F6E7     		b	.L181
 2241              	.L186:
 753:mri/architectures/armv7-m/armv7-m.c ****         {
 754:mri/architectures/armv7-m/armv7-m.c ****             return debugEventToSignalMap[i].signalToReturn;
 2242              		.loc 1 754 13 is_stmt 1 view .LVU594
 2243              		.loc 1 754 44 is_stmt 0 view .LVU595
 2244 0018 044A     		ldr	r2, .L187+4
 2245 001a 02EBC303 		add	r3, r2, r3, lsl #3
 2246              	.LVL178:
 2247              		.loc 1 754 44 view .LVU596
 2248 001e 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2249 0020 7047     		bx	lr
 2250              	.LVL179:
 2251              	.L185:
 755:mri/architectures/armv7-m/armv7-m.c ****         }
 756:mri/architectures/armv7-m/armv7-m.c ****     }
 757:mri/architectures/armv7-m/armv7-m.c **** 
 758:mri/architectures/armv7-m/armv7-m.c ****     /* NOTE: Default catch all signal is SIGSTOP. */
 759:mri/architectures/armv7-m/armv7-m.c ****     return SIGSTOP;
 2252              		.loc 1 759 12 view .LVU597
 2253 0022 1120     		movs	r0, #17
 760:mri/architectures/armv7-m/armv7-m.c **** }
 2254              		.loc 1 760 1 view .LVU598
 2255 0024 7047     		bx	lr
 2256              	.L188:
 2257 0026 00BF     		.align	2
 2258              	.L187:
 2259 0028 00000000 		.word	mriCortexMState
 2260 002c 00000000 		.word	debugEventToSignalMap.0
 2261              		.cfi_endproc
 2262              	.LFE268:
 2264              		.section	.text.clearMemoryFaultFlag,"ax",%progbits
 2265              		.align	1
 2266              		.syntax unified
 2267              		.thumb
 2268              		.thumb_func
 2270              	clearMemoryFaultFlag:
 2271              	.LFB276:
 761:mri/architectures/armv7-m/armv7-m.c **** 
 762:mri/architectures/armv7-m/armv7-m.c **** 
 763:mri/architectures/armv7-m/armv7-m.c **** PlatformTrapReason Platform_GetTrapReason(void)
 764:mri/architectures/armv7-m/armv7-m.c **** {
 765:mri/architectures/armv7-m/armv7-m.c ****     /* Return reason cached earlier by call to Platform_DetermineCauseOfException() so that findMat
ARM GAS  /tmp/ccXppZcm.s 			page 120


 766:mri/architectures/armv7-m/armv7-m.c ****        doesn't get called multiple times as it has the side effect of clearing the watchpoint MATCH
 767:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMState.reason;
 768:mri/architectures/armv7-m/armv7-m.c **** }
 769:mri/architectures/armv7-m/armv7-m.c **** 
 770:mri/architectures/armv7-m/armv7-m.c **** 
 771:mri/architectures/armv7-m/armv7-m.c **** static void displayHardFaultCauseToGdbConsole(void);
 772:mri/architectures/armv7-m/armv7-m.c **** static void displayMemFaultCauseToGdbConsole(void);
 773:mri/architectures/armv7-m/armv7-m.c **** static void displayBusFaultCauseToGdbConsole(void);
 774:mri/architectures/armv7-m/armv7-m.c **** static void displayUsageFaultCauseToGdbConsole(void);
 775:mri/architectures/armv7-m/armv7-m.c **** void Platform_DisplayFaultCauseToGdbConsole(void)
 776:mri/architectures/armv7-m/armv7-m.c **** {
 777:mri/architectures/armv7-m/armv7-m.c ****     switch (mriCortexMState.exceptionNumber)
 778:mri/architectures/armv7-m/armv7-m.c ****     {
 779:mri/architectures/armv7-m/armv7-m.c ****     case 3:
 780:mri/architectures/armv7-m/armv7-m.c ****         /* HardFault */
 781:mri/architectures/armv7-m/armv7-m.c ****         displayHardFaultCauseToGdbConsole();
 782:mri/architectures/armv7-m/armv7-m.c ****         break;
 783:mri/architectures/armv7-m/armv7-m.c ****     case 4:
 784:mri/architectures/armv7-m/armv7-m.c ****         /* MemManage */
 785:mri/architectures/armv7-m/armv7-m.c ****         displayMemFaultCauseToGdbConsole();
 786:mri/architectures/armv7-m/armv7-m.c ****         break;
 787:mri/architectures/armv7-m/armv7-m.c ****     case 5:
 788:mri/architectures/armv7-m/armv7-m.c ****         /* BusFault */
 789:mri/architectures/armv7-m/armv7-m.c ****         displayBusFaultCauseToGdbConsole();
 790:mri/architectures/armv7-m/armv7-m.c ****         break;
 791:mri/architectures/armv7-m/armv7-m.c ****     case 6:
 792:mri/architectures/armv7-m/armv7-m.c ****         /* UsageFault */
 793:mri/architectures/armv7-m/armv7-m.c ****         displayUsageFaultCauseToGdbConsole();
 794:mri/architectures/armv7-m/armv7-m.c ****         break;
 795:mri/architectures/armv7-m/armv7-m.c ****     default:
 796:mri/architectures/armv7-m/armv7-m.c ****         return;
 797:mri/architectures/armv7-m/armv7-m.c ****     }
 798:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n");
 799:mri/architectures/armv7-m/armv7-m.c **** }
 800:mri/architectures/armv7-m/armv7-m.c **** 
 801:mri/architectures/armv7-m/armv7-m.c **** static void displayHardFaultCauseToGdbConsole(void)
 802:mri/architectures/armv7-m/armv7-m.c **** {
 803:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t debugEventBit = 1 << 31;
 804:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t forcedBit = 1 << 30;
 805:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t vectorTableReadBit = 1 << 1;
 806:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              hardFaultStatusRegister = mriCortexMState.hfsr;
 807:mri/architectures/armv7-m/armv7-m.c **** 
 808:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n**Hard Fault**");
 809:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 810:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(hardFaultStatusRegister);
 811:mri/architectures/armv7-m/armv7-m.c **** 
 812:mri/architectures/armv7-m/armv7-m.c ****     if (hardFaultStatusRegister & debugEventBit)
 813:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Debug Event");
 814:mri/architectures/armv7-m/armv7-m.c **** 
 815:mri/architectures/armv7-m/armv7-m.c ****     if (hardFaultStatusRegister & vectorTableReadBit)
 816:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Vector Table Read");
 817:mri/architectures/armv7-m/armv7-m.c **** 
 818:mri/architectures/armv7-m/armv7-m.c ****     if (hardFaultStatusRegister & forcedBit)
 819:mri/architectures/armv7-m/armv7-m.c ****     {
 820:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Forced");
 821:mri/architectures/armv7-m/armv7-m.c ****         displayMemFaultCauseToGdbConsole();
 822:mri/architectures/armv7-m/armv7-m.c ****         displayBusFaultCauseToGdbConsole();
ARM GAS  /tmp/ccXppZcm.s 			page 121


 823:mri/architectures/armv7-m/armv7-m.c ****         displayUsageFaultCauseToGdbConsole();
 824:mri/architectures/armv7-m/armv7-m.c ****     }
 825:mri/architectures/armv7-m/armv7-m.c **** }
 826:mri/architectures/armv7-m/armv7-m.c **** 
 827:mri/architectures/armv7-m/armv7-m.c **** static void displayMemFaultCauseToGdbConsole(void)
 828:mri/architectures/armv7-m/armv7-m.c **** {
 829:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t MMARValidBit = 1 << 7;
 830:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t FPLazyStatePreservationBit = 1 << 5;
 831:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t stackingErrorBit = 1 << 4;
 832:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t unstackingErrorBit = 1 << 3;
 833:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t dataAccess = 1 << 1;
 834:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t instructionFetch = 1;
 835:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              memManageFaultStatusRegister = mriCortexMState.cfsr & 0xFF;
 836:mri/architectures/armv7-m/armv7-m.c **** 
 837:mri/architectures/armv7-m/armv7-m.c ****     /* Check to make sure that there is a memory fault to display. */
 838:mri/architectures/armv7-m/armv7-m.c ****     if (memManageFaultStatusRegister == 0)
 839:mri/architectures/armv7-m/armv7-m.c ****         return;
 840:mri/architectures/armv7-m/armv7-m.c **** 
 841:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n**MPU Fault**");
 842:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 843:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(memManageFaultStatusRegister);
 844:mri/architectures/armv7-m/armv7-m.c **** 
 845:mri/architectures/armv7-m/armv7-m.c ****     if (memManageFaultStatusRegister & MMARValidBit)
 846:mri/architectures/armv7-m/armv7-m.c ****     {
 847:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Fault Address: ");
 848:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.mmfar);
 849:mri/architectures/armv7-m/armv7-m.c ****     }
 850:mri/architectures/armv7-m/armv7-m.c ****     if (memManageFaultStatusRegister & FPLazyStatePreservationBit)
 851:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    FP Lazy Preservation");
 852:mri/architectures/armv7-m/armv7-m.c **** 
 853:mri/architectures/armv7-m/armv7-m.c ****     if (memManageFaultStatusRegister & stackingErrorBit)
 854:mri/architectures/armv7-m/armv7-m.c ****     {
 855:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Stacking Error w/ SP = ");
 856:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 857:mri/architectures/armv7-m/armv7-m.c ****     }
 858:mri/architectures/armv7-m/armv7-m.c ****     if (memManageFaultStatusRegister & unstackingErrorBit)
 859:mri/architectures/armv7-m/armv7-m.c ****     {
 860:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Unstacking Error w/ SP = ");
 861:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 862:mri/architectures/armv7-m/armv7-m.c ****     }
 863:mri/architectures/armv7-m/armv7-m.c ****     if (memManageFaultStatusRegister & dataAccess)
 864:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Data Access");
 865:mri/architectures/armv7-m/armv7-m.c **** 
 866:mri/architectures/armv7-m/armv7-m.c ****     if (memManageFaultStatusRegister & instructionFetch)
 867:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Instruction Fetch");
 868:mri/architectures/armv7-m/armv7-m.c **** }
 869:mri/architectures/armv7-m/armv7-m.c **** 
 870:mri/architectures/armv7-m/armv7-m.c **** static void displayBusFaultCauseToGdbConsole(void)
 871:mri/architectures/armv7-m/armv7-m.c **** {
 872:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t BFARValidBit = 1 << 7;
 873:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t FPLazyStatePreservationBit = 1 << 5;
 874:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t stackingErrorBit = 1 << 4;
 875:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t unstackingErrorBit = 1 << 3;
 876:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t impreciseDataAccessBit = 1 << 2;
 877:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t preciseDataAccessBit = 1 << 1;
 878:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t instructionPrefetch = 1;
 879:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              busFaultStatusRegister = (mriCortexMState.cfsr >> 8) & 0xFF;
ARM GAS  /tmp/ccXppZcm.s 			page 122


 880:mri/architectures/armv7-m/armv7-m.c **** 
 881:mri/architectures/armv7-m/armv7-m.c ****     /* Check to make sure that there is a bus fault to display. */
 882:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister == 0)
 883:mri/architectures/armv7-m/armv7-m.c ****         return;
 884:mri/architectures/armv7-m/armv7-m.c **** 
 885:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n**Bus Fault**");
 886:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 887:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(busFaultStatusRegister);
 888:mri/architectures/armv7-m/armv7-m.c **** 
 889:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister & BFARValidBit)
 890:mri/architectures/armv7-m/armv7-m.c ****     {
 891:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Fault Address: ");
 892:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.bfar);
 893:mri/architectures/armv7-m/armv7-m.c ****     }
 894:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister & FPLazyStatePreservationBit)
 895:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    FP Lazy Preservation");
 896:mri/architectures/armv7-m/armv7-m.c **** 
 897:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister & stackingErrorBit)
 898:mri/architectures/armv7-m/armv7-m.c ****     {
 899:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Stacking Error w/ SP = ");
 900:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 901:mri/architectures/armv7-m/armv7-m.c ****     }
 902:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister & unstackingErrorBit)
 903:mri/architectures/armv7-m/armv7-m.c ****     {
 904:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Unstacking Error w/ SP = ");
 905:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 906:mri/architectures/armv7-m/armv7-m.c ****     }
 907:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister & impreciseDataAccessBit)
 908:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Imprecise Data Access");
 909:mri/architectures/armv7-m/armv7-m.c **** 
 910:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister & preciseDataAccessBit)
 911:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Precise Data Access");
 912:mri/architectures/armv7-m/armv7-m.c **** 
 913:mri/architectures/armv7-m/armv7-m.c ****     if (busFaultStatusRegister & instructionPrefetch)
 914:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Instruction Prefetch");
 915:mri/architectures/armv7-m/armv7-m.c **** }
 916:mri/architectures/armv7-m/armv7-m.c **** 
 917:mri/architectures/armv7-m/armv7-m.c **** static void displayUsageFaultCauseToGdbConsole(void)
 918:mri/architectures/armv7-m/armv7-m.c **** {
 919:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t divideByZeroBit = 1 << 9;
 920:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t unalignedBit = 1 << 8;
 921:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t coProcessorAccessBit = 1 << 3;
 922:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t invalidPCBit = 1 << 2;
 923:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t invalidStateBit = 1 << 1;
 924:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t undefinedInstructionBit = 1;
 925:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              usageFaultStatusRegister = mriCortexMState.cfsr >> 16;
 926:mri/architectures/armv7-m/armv7-m.c **** 
 927:mri/architectures/armv7-m/armv7-m.c ****     /* Make sure that there is a usage fault to display. */
 928:mri/architectures/armv7-m/armv7-m.c ****     if (usageFaultStatusRegister == 0)
 929:mri/architectures/armv7-m/armv7-m.c ****         return;
 930:mri/architectures/armv7-m/armv7-m.c **** 
 931:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n**Usage Fault**");
 932:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 933:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(usageFaultStatusRegister);
 934:mri/architectures/armv7-m/armv7-m.c **** 
 935:mri/architectures/armv7-m/armv7-m.c ****     if (usageFaultStatusRegister & divideByZeroBit)
 936:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Divide by Zero");
ARM GAS  /tmp/ccXppZcm.s 			page 123


 937:mri/architectures/armv7-m/armv7-m.c **** 
 938:mri/architectures/armv7-m/armv7-m.c ****     if (usageFaultStatusRegister & unalignedBit)
 939:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Unaligned Access");
 940:mri/architectures/armv7-m/armv7-m.c **** 
 941:mri/architectures/armv7-m/armv7-m.c ****     if (usageFaultStatusRegister & coProcessorAccessBit)
 942:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Coprocessor Access");
 943:mri/architectures/armv7-m/armv7-m.c **** 
 944:mri/architectures/armv7-m/armv7-m.c ****     if (usageFaultStatusRegister & invalidPCBit)
 945:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Invalid Exception Return State");
 946:mri/architectures/armv7-m/armv7-m.c **** 
 947:mri/architectures/armv7-m/armv7-m.c ****     if (usageFaultStatusRegister & invalidStateBit)
 948:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Invalid State");
 949:mri/architectures/armv7-m/armv7-m.c **** 
 950:mri/architectures/armv7-m/armv7-m.c ****     if (usageFaultStatusRegister & undefinedInstructionBit)
 951:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Undefined Instruction");
 952:mri/architectures/armv7-m/armv7-m.c **** }
 953:mri/architectures/armv7-m/armv7-m.c **** 
 954:mri/architectures/armv7-m/armv7-m.c **** 
 955:mri/architectures/armv7-m/armv7-m.c **** static void     clearMemoryFaultFlag(void);
 956:mri/architectures/armv7-m/armv7-m.c **** static int      isExternalInterrupt(uint32_t exceptionNumber);
 957:mri/architectures/armv7-m/armv7-m.c **** static void     setControlCFlag(void);
 958:mri/architectures/armv7-m/armv7-m.c **** static void     setActiveDebugFlag(void);
 959:mri/architectures/armv7-m/armv7-m.c **** void Platform_EnteringDebugger(void)
 960:mri/architectures/armv7-m/armv7-m.c **** {
 961:mri/architectures/armv7-m/armv7-m.c ****     clearMemoryFaultFlag();
 962:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.originalPC = Platform_GetProgramCounter();
 963:mri/architectures/armv7-m/armv7-m.c ****     Platform_DisableSingleStep();
 964:mri/architectures/armv7-m/armv7-m.c ****     if (isExternalInterrupt(mriCortexMState.exceptionNumber))
 965:mri/architectures/armv7-m/armv7-m.c ****         setControlCFlag();
 966:mri/architectures/armv7-m/armv7-m.c ****     setActiveDebugFlag();
 967:mri/architectures/armv7-m/armv7-m.c **** }
 968:mri/architectures/armv7-m/armv7-m.c **** 
 969:mri/architectures/armv7-m/armv7-m.c **** static void clearMemoryFaultFlag(void)
 970:mri/architectures/armv7-m/armv7-m.c **** {
 2272              		.loc 1 970 1 is_stmt 1 view -0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 0
 2275              		@ frame_needed = 0, uses_anonymous_args = 0
 2276              		@ link register save eliminated.
 971:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags &= ~CORTEXM_FLAGS_FAULT_DURING_DEBUG;
 2277              		.loc 1 971 5 view .LVU600
 2278              		.loc 1 971 21 is_stmt 0 view .LVU601
 2279 0000 024A     		ldr	r2, .L190
 2280 0002 1368     		ldr	r3, [r2]
 2281 0004 23F00203 		bic	r3, r3, #2
 2282 0008 1360     		str	r3, [r2]
 972:mri/architectures/armv7-m/armv7-m.c **** }
 2283              		.loc 1 972 1 view .LVU602
 2284 000a 7047     		bx	lr
 2285              	.L191:
 2286              		.align	2
 2287              	.L190:
 2288 000c 00000000 		.word	mriCortexMFlags
 2289              		.cfi_endproc
 2290              	.LFE276:
 2292              		.section	.text.isExternalInterrupt,"ax",%progbits
 2293              		.align	1
ARM GAS  /tmp/ccXppZcm.s 			page 124


 2294              		.syntax unified
 2295              		.thumb
 2296              		.thumb_func
 2298              	isExternalInterrupt:
 2299              	.LVL180:
 2300              	.LFB277:
 973:mri/architectures/armv7-m/armv7-m.c **** 
 974:mri/architectures/armv7-m/armv7-m.c **** static int isExternalInterrupt(uint32_t exceptionNumber)
 975:mri/architectures/armv7-m/armv7-m.c **** {
 2301              		.loc 1 975 1 is_stmt 1 view -0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
 976:mri/architectures/armv7-m/armv7-m.c ****     /* Exception numbers below 16 are reserved for system faults. */
 977:mri/architectures/armv7-m/armv7-m.c ****     return exceptionNumber >= 16;
 2306              		.loc 1 977 5 view .LVU604
 978:mri/architectures/armv7-m/armv7-m.c **** }
 2307              		.loc 1 978 1 is_stmt 0 view .LVU605
 2308 0000 0F28     		cmp	r0, #15
 2309 0002 94BF     		ite	ls
 2310 0004 0020     		movls	r0, #0
 2311              	.LVL181:
 2312              		.loc 1 978 1 view .LVU606
 2313 0006 0120     		movhi	r0, #1
 2314 0008 7047     		bx	lr
 2315              		.cfi_endproc
 2316              	.LFE277:
 2318              		.section	.text.setControlCFlag,"ax",%progbits
 2319              		.align	1
 2320              		.syntax unified
 2321              		.thumb
 2322              		.thumb_func
 2324              	setControlCFlag:
 2325              	.LFB278:
 979:mri/architectures/armv7-m/armv7-m.c **** 
 980:mri/architectures/armv7-m/armv7-m.c **** static void setControlCFlag(void)
 981:mri/architectures/armv7-m/armv7-m.c **** {
 2326              		.loc 1 981 1 is_stmt 1 view -0
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 0
 2329              		@ frame_needed = 0, uses_anonymous_args = 0
 2330              		@ link register save eliminated.
 982:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_CTRL_C;
 2331              		.loc 1 982 5 view .LVU608
 2332              		.loc 1 982 21 is_stmt 0 view .LVU609
 2333 0000 024A     		ldr	r2, .L194
 2334 0002 1368     		ldr	r3, [r2]
 2335 0004 43F02003 		orr	r3, r3, #32
 2336 0008 1360     		str	r3, [r2]
 983:mri/architectures/armv7-m/armv7-m.c **** }
 2337              		.loc 1 983 1 view .LVU610
 2338 000a 7047     		bx	lr
 2339              	.L195:
 2340              		.align	2
 2341              	.L194:
 2342 000c 00000000 		.word	mriCortexMFlags
ARM GAS  /tmp/ccXppZcm.s 			page 125


 2343              		.cfi_endproc
 2344              	.LFE278:
 2346              		.section	.text.setActiveDebugFlag,"ax",%progbits
 2347              		.align	1
 2348              		.syntax unified
 2349              		.thumb
 2350              		.thumb_func
 2352              	setActiveDebugFlag:
 2353              	.LFB279:
 984:mri/architectures/armv7-m/armv7-m.c **** 
 985:mri/architectures/armv7-m/armv7-m.c **** static void setActiveDebugFlag(void)
 986:mri/architectures/armv7-m/armv7-m.c **** {
 2354              		.loc 1 986 1 is_stmt 1 view -0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 0
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 2358              		@ link register save eliminated.
 987:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_ACTIVE_DEBUG;
 2359              		.loc 1 987 5 view .LVU612
 2360              		.loc 1 987 21 is_stmt 0 view .LVU613
 2361 0000 024A     		ldr	r2, .L197
 2362 0002 1368     		ldr	r3, [r2]
 2363 0004 43F00103 		orr	r3, r3, #1
 2364 0008 1360     		str	r3, [r2]
 988:mri/architectures/armv7-m/armv7-m.c **** }
 2365              		.loc 1 988 1 view .LVU614
 2366 000a 7047     		bx	lr
 2367              	.L198:
 2368              		.align	2
 2369              	.L197:
 2370 000c 00000000 		.word	mriCortexMFlags
 2371              		.cfi_endproc
 2372              	.LFE279:
 2374              		.section	.text.clearControlCFlag,"ax",%progbits
 2375              		.align	1
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2380              	clearControlCFlag:
 2381              	.LFB281:
 989:mri/architectures/armv7-m/armv7-m.c **** 
 990:mri/architectures/armv7-m/armv7-m.c **** 
 991:mri/architectures/armv7-m/armv7-m.c **** static void checkStack(void);
 992:mri/architectures/armv7-m/armv7-m.c **** static void clearControlCFlag(void);
 993:mri/architectures/armv7-m/armv7-m.c **** static void clearActiveDebugFlag(void);
 994:mri/architectures/armv7-m/armv7-m.c **** static void clearPendedFromFaultFlag(void);
 995:mri/architectures/armv7-m/armv7-m.c **** void Platform_LeavingDebugger(void)
 996:mri/architectures/armv7-m/armv7-m.c **** {
 997:mri/architectures/armv7-m/armv7-m.c ****     checkStack();
 998:mri/architectures/armv7-m/armv7-m.c ****     clearControlCFlag();
 999:mri/architectures/armv7-m/armv7-m.c ****     clearActiveDebugFlag();
1000:mri/architectures/armv7-m/armv7-m.c ****     clearPendedFromFaultFlag();
1001:mri/architectures/armv7-m/armv7-m.c ****     clearMonitorPending();
1002:mri/architectures/armv7-m/armv7-m.c **** }
1003:mri/architectures/armv7-m/armv7-m.c **** 
1004:mri/architectures/armv7-m/armv7-m.c **** static void clearControlCFlag(void)
1005:mri/architectures/armv7-m/armv7-m.c **** {
ARM GAS  /tmp/ccXppZcm.s 			page 126


 2382              		.loc 1 1005 1 is_stmt 1 view -0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 0
 2385              		@ frame_needed = 0, uses_anonymous_args = 0
 2386              		@ link register save eliminated.
1006:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags &= ~CORTEXM_FLAGS_CTRL_C;
 2387              		.loc 1 1006 5 view .LVU616
 2388              		.loc 1 1006 21 is_stmt 0 view .LVU617
 2389 0000 024A     		ldr	r2, .L200
 2390 0002 1368     		ldr	r3, [r2]
 2391 0004 23F02003 		bic	r3, r3, #32
 2392 0008 1360     		str	r3, [r2]
1007:mri/architectures/armv7-m/armv7-m.c **** }
 2393              		.loc 1 1007 1 view .LVU618
 2394 000a 7047     		bx	lr
 2395              	.L201:
 2396              		.align	2
 2397              	.L200:
 2398 000c 00000000 		.word	mriCortexMFlags
 2399              		.cfi_endproc
 2400              	.LFE281:
 2402              		.section	.text.clearActiveDebugFlag,"ax",%progbits
 2403              		.align	1
 2404              		.syntax unified
 2405              		.thumb
 2406              		.thumb_func
 2408              	clearActiveDebugFlag:
 2409              	.LFB282:
1008:mri/architectures/armv7-m/armv7-m.c **** 
1009:mri/architectures/armv7-m/armv7-m.c **** static void clearActiveDebugFlag(void)
1010:mri/architectures/armv7-m/armv7-m.c **** {
 2410              		.loc 1 1010 1 is_stmt 1 view -0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
1011:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags &= ~CORTEXM_FLAGS_ACTIVE_DEBUG;
 2415              		.loc 1 1011 5 view .LVU620
 2416              		.loc 1 1011 21 is_stmt 0 view .LVU621
 2417 0000 024A     		ldr	r2, .L203
 2418 0002 1368     		ldr	r3, [r2]
 2419 0004 23F00103 		bic	r3, r3, #1
 2420 0008 1360     		str	r3, [r2]
1012:mri/architectures/armv7-m/armv7-m.c **** }
 2421              		.loc 1 1012 1 view .LVU622
 2422 000a 7047     		bx	lr
 2423              	.L204:
 2424              		.align	2
 2425              	.L203:
 2426 000c 00000000 		.word	mriCortexMFlags
 2427              		.cfi_endproc
 2428              	.LFE282:
 2430              		.section	.text.clearPendedFromFaultFlag,"ax",%progbits
 2431              		.align	1
 2432              		.syntax unified
 2433              		.thumb
 2434              		.thumb_func
ARM GAS  /tmp/ccXppZcm.s 			page 127


 2436              	clearPendedFromFaultFlag:
 2437              	.LFB283:
1013:mri/architectures/armv7-m/armv7-m.c **** 
1014:mri/architectures/armv7-m/armv7-m.c **** static void clearPendedFromFaultFlag(void)
1015:mri/architectures/armv7-m/armv7-m.c **** {
 2438              		.loc 1 1015 1 is_stmt 1 view -0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 0
 2441              		@ frame_needed = 0, uses_anonymous_args = 0
 2442              		@ link register save eliminated.
1016:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags &= ~CORTEXM_FLAGS_PEND_FROM_FAULT;
 2443              		.loc 1 1016 5 view .LVU624
 2444              		.loc 1 1016 21 is_stmt 0 view .LVU625
 2445 0000 024A     		ldr	r2, .L206
 2446 0002 1368     		ldr	r3, [r2]
 2447 0004 23F08003 		bic	r3, r3, #128
 2448 0008 1360     		str	r3, [r2]
1017:mri/architectures/armv7-m/armv7-m.c **** }
 2449              		.loc 1 1017 1 view .LVU626
 2450 000a 7047     		bx	lr
 2451              	.L207:
 2452              		.align	2
 2453              	.L206:
 2454 000c 00000000 		.word	mriCortexMFlags
 2455              		.cfi_endproc
 2456              	.LFE283:
 2458              		.section	.text.checkStack,"ax",%progbits
 2459              		.align	1
 2460              		.syntax unified
 2461              		.thumb
 2462              		.thumb_func
 2464              	checkStack:
 2465              	.LFB284:
1018:mri/architectures/armv7-m/armv7-m.c **** 
1019:mri/architectures/armv7-m/armv7-m.c **** static void checkStack(void)
1020:mri/architectures/armv7-m/armv7-m.c **** {
 2466              		.loc 1 1020 1 is_stmt 1 view -0
 2467              		.cfi_startproc
 2468              		@ args = 0, pretend = 0, frame = 0
 2469              		@ frame_needed = 0, uses_anonymous_args = 0
 2470              		@ link register save eliminated.
1021:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pCurr = (uint32_t*)mriCortexMDebuggerStack;
 2471              		.loc 1 1021 5 view .LVU628
 2472              	.LVL182:
1022:mri/architectures/armv7-m/armv7-m.c ****     uint8_t*  pEnd = (uint8_t*)mriCortexMDebuggerStack + sizeof(mriCortexMDebuggerStack);
 2473              		.loc 1 1022 5 view .LVU629
1023:mri/architectures/armv7-m/armv7-m.c ****     int       spaceUsed;
 2474              		.loc 1 1023 5 view .LVU630
1024:mri/architectures/armv7-m/armv7-m.c **** 
1025:mri/architectures/armv7-m/armv7-m.c ****     while ((uint8_t*)pCurr < pEnd && *pCurr == CORTEXM_DEBUGGER_STACK_FILL)
 2475              		.loc 1 1025 5 view .LVU631
1021:mri/architectures/armv7-m/armv7-m.c ****     uint8_t*  pEnd = (uint8_t*)mriCortexMDebuggerStack + sizeof(mriCortexMDebuggerStack);
 2476              		.loc 1 1021 15 is_stmt 0 view .LVU632
 2477 0000 094B     		ldr	r3, .L213
 2478              		.loc 1 1025 11 view .LVU633
 2479 0002 00E0     		b	.L209
 2480              	.LVL183:
ARM GAS  /tmp/ccXppZcm.s 			page 128


 2481              	.L211:
1026:mri/architectures/armv7-m/armv7-m.c ****         pCurr++;
 2482              		.loc 1 1026 9 is_stmt 1 view .LVU634
 2483              		.loc 1 1026 14 is_stmt 0 view .LVU635
 2484 0004 0433     		adds	r3, r3, #4
 2485              	.LVL184:
 2486              	.L209:
1025:mri/architectures/armv7-m/armv7-m.c ****         pCurr++;
 2487              		.loc 1 1025 35 is_stmt 1 view .LVU636
 2488 0006 094A     		ldr	r2, .L213+4
 2489              	.LVL185:
1025:mri/architectures/armv7-m/armv7-m.c ****         pCurr++;
 2490              		.loc 1 1025 35 is_stmt 0 view .LVU637
 2491 0008 9342     		cmp	r3, r2
 2492 000a 03D2     		bcs	.L210
1025:mri/architectures/armv7-m/armv7-m.c ****         pCurr++;
 2493              		.loc 1 1025 38 discriminator 1 view .LVU638
 2494 000c 1968     		ldr	r1, [r3]
1025:mri/architectures/armv7-m/armv7-m.c ****         pCurr++;
 2495              		.loc 1 1025 35 discriminator 1 view .LVU639
 2496 000e 084A     		ldr	r2, .L213+8
 2497              	.LVL186:
1025:mri/architectures/armv7-m/armv7-m.c ****         pCurr++;
 2498              		.loc 1 1025 35 discriminator 1 view .LVU640
 2499 0010 9142     		cmp	r1, r2
 2500 0012 F7D0     		beq	.L211
 2501              	.L210:
1027:mri/architectures/armv7-m/armv7-m.c **** 
1028:mri/architectures/armv7-m/armv7-m.c ****     spaceUsed = pEnd - (uint8_t*)pCurr;
 2502              		.loc 1 1028 5 is_stmt 1 view .LVU641
 2503              		.loc 1 1028 15 is_stmt 0 view .LVU642
 2504 0014 054A     		ldr	r2, .L213+4
 2505              	.LVL187:
 2506              		.loc 1 1028 15 view .LVU643
 2507 0016 D31A     		subs	r3, r2, r3
 2508              	.LVL188:
1029:mri/architectures/armv7-m/armv7-m.c ****     if (spaceUsed > mriCortexMState.maxStackUsed)
 2509              		.loc 1 1029 5 is_stmt 1 view .LVU644
 2510              		.loc 1 1029 36 is_stmt 0 view .LVU645
 2511 0018 064A     		ldr	r2, .L213+12
 2512              	.LVL189:
 2513              		.loc 1 1029 36 view .LVU646
 2514 001a 126C     		ldr	r2, [r2, #64]
 2515              		.loc 1 1029 8 view .LVU647
 2516 001c 9A42     		cmp	r2, r3
 2517 001e 01DA     		bge	.L208
1030:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.maxStackUsed = spaceUsed;
 2518              		.loc 1 1030 9 is_stmt 1 view .LVU648
 2519              		.loc 1 1030 38 is_stmt 0 view .LVU649
 2520 0020 044A     		ldr	r2, .L213+12
 2521 0022 1364     		str	r3, [r2, #64]
 2522              	.L208:
1031:mri/architectures/armv7-m/armv7-m.c **** }
 2523              		.loc 1 1031 1 view .LVU650
 2524 0024 7047     		bx	lr
 2525              	.L214:
 2526 0026 00BF     		.align	2
ARM GAS  /tmp/ccXppZcm.s 			page 129


 2527              	.L213:
 2528 0028 00000000 		.word	mriCortexMDebuggerStack
 2529 002c 88030000 		.word	mriCortexMDebuggerStack+904
 2530 0030 EFBEADDE 		.word	-559038737
 2531 0034 00000000 		.word	mriCortexMState
 2532              		.cfi_endproc
 2533              	.LFE284:
 2535              		.section	.text.isInstruction32Bit,"ax",%progbits
 2536              		.align	1
 2537              		.syntax unified
 2538              		.thumb
 2539              		.thumb_func
 2541              	isInstruction32Bit:
 2542              	.LVL190:
 2543              	.LFB288:
1032:mri/architectures/armv7-m/armv7-m.c **** 
1033:mri/architectures/armv7-m/armv7-m.c **** 
1034:mri/architectures/armv7-m/armv7-m.c **** uint32_t Platform_GetProgramCounter(void)
1035:mri/architectures/armv7-m/armv7-m.c **** {
1036:mri/architectures/armv7-m/armv7-m.c ****     return Context_Get(&mriCortexMState.context, PC);
1037:mri/architectures/armv7-m/armv7-m.c **** }
1038:mri/architectures/armv7-m/armv7-m.c **** 
1039:mri/architectures/armv7-m/armv7-m.c **** 
1040:mri/architectures/armv7-m/armv7-m.c **** void Platform_SetProgramCounter(uint32_t newPC)
1041:mri/architectures/armv7-m/armv7-m.c **** {
1042:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, PC, newPC);
1043:mri/architectures/armv7-m/armv7-m.c **** }
1044:mri/architectures/armv7-m/armv7-m.c **** 
1045:mri/architectures/armv7-m/armv7-m.c **** 
1046:mri/architectures/armv7-m/armv7-m.c **** static int isInstruction32Bit(uint16_t firstWordOfInstruction);
1047:mri/architectures/armv7-m/armv7-m.c **** void Platform_AdvanceProgramCounterToNextInstruction(void)
1048:mri/architectures/armv7-m/armv7-m.c **** {
1049:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  firstWordOfCurrentInstruction;
1050:mri/architectures/armv7-m/armv7-m.c **** 
1051:mri/architectures/armv7-m/armv7-m.c ****     __try
1052:mri/architectures/armv7-m/armv7-m.c ****     {
1053:mri/architectures/armv7-m/armv7-m.c ****         firstWordOfCurrentInstruction = getFirstHalfWordOfCurrentInstruction();
1054:mri/architectures/armv7-m/armv7-m.c ****     }
1055:mri/architectures/armv7-m/armv7-m.c ****     __catch
1056:mri/architectures/armv7-m/armv7-m.c ****     {
1057:mri/architectures/armv7-m/armv7-m.c ****         /* Will get here if PC isn't pointing to valid memory so don't bother to advance. */
1058:mri/architectures/armv7-m/armv7-m.c ****         clearExceptionCode();
1059:mri/architectures/armv7-m/armv7-m.c ****         return;
1060:mri/architectures/armv7-m/armv7-m.c ****     }
1061:mri/architectures/armv7-m/armv7-m.c **** 
1062:mri/architectures/armv7-m/armv7-m.c ****     if (isInstruction32Bit(firstWordOfCurrentInstruction))
1063:mri/architectures/armv7-m/armv7-m.c ****     {
1064:mri/architectures/armv7-m/armv7-m.c ****         /* 32-bit Instruction. */
1065:mri/architectures/armv7-m/armv7-m.c ****         Platform_SetProgramCounter(Platform_GetProgramCounter() + sizeof(uint32_t));
1066:mri/architectures/armv7-m/armv7-m.c ****     }
1067:mri/architectures/armv7-m/armv7-m.c ****     else
1068:mri/architectures/armv7-m/armv7-m.c ****     {
1069:mri/architectures/armv7-m/armv7-m.c ****         /* 16-bit Instruction. */
1070:mri/architectures/armv7-m/armv7-m.c ****         Platform_SetProgramCounter(Platform_GetProgramCounter() + sizeof(uint16_t));
1071:mri/architectures/armv7-m/armv7-m.c ****     }
1072:mri/architectures/armv7-m/armv7-m.c **** }
1073:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 130


1074:mri/architectures/armv7-m/armv7-m.c **** static int isInstruction32Bit(uint16_t firstWordOfInstruction)
1075:mri/architectures/armv7-m/armv7-m.c **** {
 2544              		.loc 1 1075 1 is_stmt 1 view -0
 2545              		.cfi_startproc
 2546              		@ args = 0, pretend = 0, frame = 0
 2547              		@ frame_needed = 0, uses_anonymous_args = 0
 2548              		@ link register save eliminated.
1076:mri/architectures/armv7-m/armv7-m.c ****     uint16_t maskedOffUpper5BitsOfWord = firstWordOfInstruction & 0xF800;
 2549              		.loc 1 1076 5 view .LVU652
 2550              		.loc 1 1076 14 is_stmt 0 view .LVU653
 2551 0000 00F47840 		and	r0, r0, #63488
 2552              	.LVL191:
1077:mri/architectures/armv7-m/armv7-m.c **** 
1078:mri/architectures/armv7-m/armv7-m.c ****     /* 32-bit instructions start with 0b11101, 0b11110, 0b11111 according to page A5-152 of the
1079:mri/architectures/armv7-m/armv7-m.c ****        ARMv7-M Architecture Manual. */
1080:mri/architectures/armv7-m/armv7-m.c ****     return  (maskedOffUpper5BitsOfWord == 0xE800 ||
 2553              		.loc 1 1080 5 is_stmt 1 view .LVU654
1081:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF000 ||
 2554              		.loc 1 1081 50 is_stmt 0 view .LVU655
 2555 0004 B0F5684F 		cmp	r0, #59392
 2556 0008 09D0     		beq	.L217
1080:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF000 ||
 2557              		.loc 1 1080 50 view .LVU656
 2558 000a B0F5704F 		cmp	r0, #61440
 2559 000e 08D0     		beq	.L218
 2560              		.loc 1 1081 50 discriminator 2 view .LVU657
 2561 0010 B0F5784F 		cmp	r0, #63488
 2562 0014 01D0     		beq	.L220
 2563              		.loc 1 1081 50 view .LVU658
 2564 0016 0020     		movs	r0, #0
 2565              	.LVL192:
1082:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF800);
1083:mri/architectures/armv7-m/armv7-m.c **** }
 2566              		.loc 1 1083 1 view .LVU659
 2567 0018 7047     		bx	lr
 2568              	.LVL193:
 2569              	.L220:
1081:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF800);
 2570              		.loc 1 1081 50 view .LVU660
 2571 001a 0120     		movs	r0, #1
 2572              	.LVL194:
1081:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF800);
 2573              		.loc 1 1081 50 view .LVU661
 2574 001c 7047     		bx	lr
 2575              	.LVL195:
 2576              	.L217:
1081:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF800);
 2577              		.loc 1 1081 50 view .LVU662
 2578 001e 0120     		movs	r0, #1
 2579              	.LVL196:
1081:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF800);
 2580              		.loc 1 1081 50 view .LVU663
 2581 0020 7047     		bx	lr
 2582              	.LVL197:
 2583              	.L218:
1081:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF800);
 2584              		.loc 1 1081 50 view .LVU664
ARM GAS  /tmp/ccXppZcm.s 			page 131


 2585 0022 0120     		movs	r0, #1
 2586              	.LVL198:
1081:mri/architectures/armv7-m/armv7-m.c ****              maskedOffUpper5BitsOfWord == 0xF800);
 2587              		.loc 1 1081 50 view .LVU665
 2588 0024 7047     		bx	lr
 2589              		.cfi_endproc
 2590              	.LFE288:
 2592              		.section	.text.isInstructionMbedSemihostBreakpoint,"ax",%progbits
 2593              		.align	1
 2594              		.syntax unified
 2595              		.thumb
 2596              		.thumb_func
 2598              	isInstructionMbedSemihostBreakpoint:
 2599              	.LVL199:
 2600              	.LFB291:
1084:mri/architectures/armv7-m/armv7-m.c **** 
1085:mri/architectures/armv7-m/armv7-m.c **** 
1086:mri/architectures/armv7-m/armv7-m.c **** int Platform_WasProgramCounterModifiedByUser(void)
1087:mri/architectures/armv7-m/armv7-m.c **** {
1088:mri/architectures/armv7-m/armv7-m.c ****     return Platform_GetProgramCounter() != mriCortexMState.originalPC;
1089:mri/architectures/armv7-m/armv7-m.c **** }
1090:mri/architectures/armv7-m/armv7-m.c **** 
1091:mri/architectures/armv7-m/armv7-m.c **** 
1092:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionMbedSemihostBreakpoint(uint16_t instruction);
1093:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionNewlibSemihostBreakpoint(uint16_t instruction);
1094:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionHardcodedBreakpoint(uint16_t instruction);
1095:mri/architectures/armv7-m/armv7-m.c **** PlatformInstructionType Platform_TypeOfCurrentInstruction(void)
1096:mri/architectures/armv7-m/armv7-m.c **** {
1097:mri/architectures/armv7-m/armv7-m.c ****     uint16_t currentInstruction;
1098:mri/architectures/armv7-m/armv7-m.c **** 
1099:mri/architectures/armv7-m/armv7-m.c ****     __try
1100:mri/architectures/armv7-m/armv7-m.c ****     {
1101:mri/architectures/armv7-m/armv7-m.c ****         currentInstruction = getFirstHalfWordOfCurrentInstruction();
1102:mri/architectures/armv7-m/armv7-m.c ****     }
1103:mri/architectures/armv7-m/armv7-m.c ****     __catch
1104:mri/architectures/armv7-m/armv7-m.c ****     {
1105:mri/architectures/armv7-m/armv7-m.c ****         /* Will get here if PC isn't pointing to valid memory so treat as other. */
1106:mri/architectures/armv7-m/armv7-m.c ****         clearExceptionCode();
1107:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_OTHER;
1108:mri/architectures/armv7-m/armv7-m.c ****     }
1109:mri/architectures/armv7-m/armv7-m.c **** 
1110:mri/architectures/armv7-m/armv7-m.c ****     if (isInstructionMbedSemihostBreakpoint(currentInstruction))
1111:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_MBED_SEMIHOST_CALL;
1112:mri/architectures/armv7-m/armv7-m.c ****     else if (isInstructionNewlibSemihostBreakpoint(currentInstruction))
1113:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_NEWLIB_SEMIHOST_CALL;
1114:mri/architectures/armv7-m/armv7-m.c ****     else if (isInstructionHardcodedBreakpoint(currentInstruction))
1115:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_HARDCODED_BREAKPOINT;
1116:mri/architectures/armv7-m/armv7-m.c ****     else
1117:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_OTHER;
1118:mri/architectures/armv7-m/armv7-m.c **** }
1119:mri/architectures/armv7-m/armv7-m.c **** 
1120:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionMbedSemihostBreakpoint(uint16_t instruction)
1121:mri/architectures/armv7-m/armv7-m.c **** {
 2601              		.loc 1 1121 1 is_stmt 1 view -0
 2602              		.cfi_startproc
 2603              		@ args = 0, pretend = 0, frame = 0
 2604              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccXppZcm.s 			page 132


 2605              		@ link register save eliminated.
1122:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t mbedSemihostBreakpointMachineCode = 0xbeab;
 2606              		.loc 1 1122 5 view .LVU667
1123:mri/architectures/armv7-m/armv7-m.c **** 
1124:mri/architectures/armv7-m/armv7-m.c ****     return mbedSemihostBreakpointMachineCode == instruction;
 2607              		.loc 1 1124 5 view .LVU668
1125:mri/architectures/armv7-m/armv7-m.c **** }
 2608              		.loc 1 1125 1 is_stmt 0 view .LVU669
 2609 0000 4BF6AB63 		movw	r3, #48811
 2610 0004 9842     		cmp	r0, r3
 2611 0006 14BF     		ite	ne
 2612 0008 0020     		movne	r0, #0
 2613              	.LVL200:
 2614              		.loc 1 1125 1 view .LVU670
 2615 000a 0120     		moveq	r0, #1
 2616 000c 7047     		bx	lr
 2617              		.cfi_endproc
 2618              	.LFE291:
 2620              		.section	.text.isInstructionNewlibSemihostBreakpoint,"ax",%progbits
 2621              		.align	1
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
 2626              	isInstructionNewlibSemihostBreakpoint:
 2627              	.LVL201:
 2628              	.LFB292:
1126:mri/architectures/armv7-m/armv7-m.c **** 
1127:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionNewlibSemihostBreakpoint(uint16_t instruction)
1128:mri/architectures/armv7-m/armv7-m.c **** {
 2629              		.loc 1 1128 1 is_stmt 1 view -0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 2633              		@ link register save eliminated.
1129:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t newlibSemihostBreakpointMinMachineCode = 0xbe00 | MRI_NEWLIB_SEMIHOST_MIN
 2634              		.loc 1 1129 5 view .LVU672
1130:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t newlibSemihostBreakpointMaxMachineCode = 0xbe00 | MRI_NEWLIB_SEMIHOST_MAX
 2635              		.loc 1 1130 5 view .LVU673
1131:mri/architectures/armv7-m/armv7-m.c **** 
1132:mri/architectures/armv7-m/armv7-m.c ****     return (instruction >= newlibSemihostBreakpointMinMachineCode &&
 2636              		.loc 1 1132 5 view .LVU674
 2637              		.loc 1 1132 67 is_stmt 0 view .LVU675
 2638 0000 00F58240 		add	r0, r0, #16640
 2639              	.LVL202:
 2640              		.loc 1 1132 67 view .LVU676
 2641 0004 0B30     		adds	r0, r0, #11
 2642 0006 80B2     		uxth	r0, r0
1133:mri/architectures/armv7-m/armv7-m.c ****             instruction <=  newlibSemihostBreakpointMaxMachineCode);
1134:mri/architectures/armv7-m/armv7-m.c **** }
 2643              		.loc 1 1134 1 view .LVU677
 2644 0008 0A28     		cmp	r0, #10
 2645 000a 8CBF     		ite	hi
 2646 000c 0020     		movhi	r0, #0
 2647 000e 0120     		movls	r0, #1
 2648 0010 7047     		bx	lr
 2649              		.cfi_endproc
 2650              	.LFE292:
ARM GAS  /tmp/ccXppZcm.s 			page 133


 2652              		.section	.text.isInstructionHardcodedBreakpoint,"ax",%progbits
 2653              		.align	1
 2654              		.syntax unified
 2655              		.thumb
 2656              		.thumb_func
 2658              	isInstructionHardcodedBreakpoint:
 2659              	.LVL203:
 2660              	.LFB293:
1135:mri/architectures/armv7-m/armv7-m.c **** 
1136:mri/architectures/armv7-m/armv7-m.c **** static int isInstructionHardcodedBreakpoint(uint16_t instruction)
1137:mri/architectures/armv7-m/armv7-m.c **** {
 2661              		.loc 1 1137 1 is_stmt 1 view -0
 2662              		.cfi_startproc
 2663              		@ args = 0, pretend = 0, frame = 0
 2664              		@ frame_needed = 0, uses_anonymous_args = 0
 2665              		@ link register save eliminated.
1138:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t hardCodedBreakpointMachineCode = 0xbe00;
 2666              		.loc 1 1138 5 view .LVU679
1139:mri/architectures/armv7-m/armv7-m.c **** 
1140:mri/architectures/armv7-m/armv7-m.c ****     return (hardCodedBreakpointMachineCode == instruction);
 2667              		.loc 1 1140 5 view .LVU680
1141:mri/architectures/armv7-m/armv7-m.c **** }
 2668              		.loc 1 1141 1 is_stmt 0 view .LVU681
 2669 0000 B0F53E4F 		cmp	r0, #48640
 2670 0004 14BF     		ite	ne
 2671 0006 0020     		movne	r0, #0
 2672              	.LVL204:
 2673              		.loc 1 1141 1 view .LVU682
 2674 0008 0120     		moveq	r0, #1
 2675 000a 7047     		bx	lr
 2676              		.cfi_endproc
 2677              	.LFE293:
 2679              		.section	.text.doesKindIndicate32BitInstruction,"ax",%progbits
 2680              		.align	1
 2681              		.syntax unified
 2682              		.thumb
 2683              		.thumb_func
 2685              	doesKindIndicate32BitInstruction:
 2686              	.LVL205:
 2687              	.LFB301:
1142:mri/architectures/armv7-m/armv7-m.c **** 
1143:mri/architectures/armv7-m/armv7-m.c **** 
1144:mri/architectures/armv7-m/armv7-m.c **** PlatformSemihostParameters Platform_GetSemihostCallParameters(void)
1145:mri/architectures/armv7-m/armv7-m.c **** {
1146:mri/architectures/armv7-m/armv7-m.c ****     PlatformSemihostParameters parameters;
1147:mri/architectures/armv7-m/armv7-m.c **** 
1148:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter1 = Context_Get(&mriCortexMState.context, R0);
1149:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter2 = Context_Get(&mriCortexMState.context, R1);
1150:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter3 = Context_Get(&mriCortexMState.context, R2);
1151:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter4 = Context_Get(&mriCortexMState.context, R3);
1152:mri/architectures/armv7-m/armv7-m.c **** 
1153:mri/architectures/armv7-m/armv7-m.c ****     return parameters;
1154:mri/architectures/armv7-m/armv7-m.c **** }
1155:mri/architectures/armv7-m/armv7-m.c **** 
1156:mri/architectures/armv7-m/armv7-m.c **** 
1157:mri/architectures/armv7-m/armv7-m.c **** void Platform_SetSemihostCallReturnAndErrnoValues(int returnValue, int errNo)
1158:mri/architectures/armv7-m/armv7-m.c **** {
ARM GAS  /tmp/ccXppZcm.s 			page 134


1159:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, R0, returnValue);
1160:mri/architectures/armv7-m/armv7-m.c **** }
1161:mri/architectures/armv7-m/armv7-m.c **** 
1162:mri/architectures/armv7-m/armv7-m.c **** 
1163:mri/architectures/armv7-m/armv7-m.c **** int Platform_WasMemoryFaultEncountered(void)
1164:mri/architectures/armv7-m/armv7-m.c **** {
1165:mri/architectures/armv7-m/armv7-m.c ****     int wasFaultEncountered;
1166:mri/architectures/armv7-m/armv7-m.c **** 
1167:mri/architectures/armv7-m/armv7-m.c ****     __DSB();
1168:mri/architectures/armv7-m/armv7-m.c ****     wasFaultEncountered = mriCortexMFlags & CORTEXM_FLAGS_FAULT_DURING_DEBUG;
1169:mri/architectures/armv7-m/armv7-m.c ****     clearMemoryFaultFlag();
1170:mri/architectures/armv7-m/armv7-m.c **** 
1171:mri/architectures/armv7-m/armv7-m.c ****     return wasFaultEncountered;
1172:mri/architectures/armv7-m/armv7-m.c **** }
1173:mri/architectures/armv7-m/armv7-m.c **** 
1174:mri/architectures/armv7-m/armv7-m.c **** 
1175:mri/architectures/armv7-m/armv7-m.c **** static void sendRegisterForTResponse(Buffer* pBuffer, uint8_t registerOffset, uint32_t registerValu
1176:mri/architectures/armv7-m/armv7-m.c **** static void writeBytesToBufferAsHex(Buffer* pBuffer, void* pBytes, size_t byteCount);
1177:mri/architectures/armv7-m/armv7-m.c **** void Platform_WriteTResponseRegistersToBuffer(Buffer* pBuffer)
1178:mri/architectures/armv7-m/armv7-m.c **** {
1179:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, R7, Context_Get(&mriCortexMState.context, R7));
1180:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, SP, Context_Get(&mriCortexMState.context, SP));
1181:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, LR, Context_Get(&mriCortexMState.context, LR));
1182:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, PC, Context_Get(&mriCortexMState.context, PC));
1183:mri/architectures/armv7-m/armv7-m.c **** }
1184:mri/architectures/armv7-m/armv7-m.c **** 
1185:mri/architectures/armv7-m/armv7-m.c **** static void sendRegisterForTResponse(Buffer* pBuffer, uint8_t registerOffset, uint32_t registerValu
1186:mri/architectures/armv7-m/armv7-m.c **** {
1187:mri/architectures/armv7-m/armv7-m.c ****     Buffer_WriteByteAsHex(pBuffer, registerOffset);
1188:mri/architectures/armv7-m/armv7-m.c ****     Buffer_WriteChar(pBuffer, ':');
1189:mri/architectures/armv7-m/armv7-m.c ****     writeBytesToBufferAsHex(pBuffer, &registerValue, sizeof(registerValue));
1190:mri/architectures/armv7-m/armv7-m.c ****     Buffer_WriteChar(pBuffer, ';');
1191:mri/architectures/armv7-m/armv7-m.c **** }
1192:mri/architectures/armv7-m/armv7-m.c **** 
1193:mri/architectures/armv7-m/armv7-m.c **** static void writeBytesToBufferAsHex(Buffer* pBuffer, void* pBytes, size_t byteCount)
1194:mri/architectures/armv7-m/armv7-m.c **** {
1195:mri/architectures/armv7-m/armv7-m.c ****     uint8_t* pByte = (uint8_t*)pBytes;
1196:mri/architectures/armv7-m/armv7-m.c ****     size_t   i;
1197:mri/architectures/armv7-m/armv7-m.c **** 
1198:mri/architectures/armv7-m/armv7-m.c ****     for (i = 0 ; i < byteCount ; i++)
1199:mri/architectures/armv7-m/armv7-m.c ****         Buffer_WriteByteAsHex(pBuffer, *pByte++);
1200:mri/architectures/armv7-m/armv7-m.c **** }
1201:mri/architectures/armv7-m/armv7-m.c **** 
1202:mri/architectures/armv7-m/armv7-m.c **** 
1203:mri/architectures/armv7-m/armv7-m.c **** static int doesKindIndicate32BitInstruction(uint32_t kind);
1204:mri/architectures/armv7-m/armv7-m.c **** void Platform_SetHardwareBreakpointOfGdbKind(uint32_t address, uint32_t kind)
1205:mri/architectures/armv7-m/armv7-m.c **** {
1206:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pFPBBreakpointComparator;
1207:mri/architectures/armv7-m/armv7-m.c ****     int       is32BitInstruction;
1208:mri/architectures/armv7-m/armv7-m.c **** 
1209:mri/architectures/armv7-m/armv7-m.c ****     // __try
1210:mri/architectures/armv7-m/armv7-m.c ****     //     is32BitInstruction = doesKindIndicate32BitInstruction(kind);
1211:mri/architectures/armv7-m/armv7-m.c ****     // __catch
1212:mri/architectures/armv7-m/armv7-m.c ****     //     __rethrow;
1213:mri/architectures/armv7-m/armv7-m.c **** 
1214:mri/architectures/armv7-m/armv7-m.c ****     pFPBBreakpointComparator = enableFPBBreakpoint(address, is32BitInstruction);
1215:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
ARM GAS  /tmp/ccXppZcm.s 			page 135


1216:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
1217:mri/architectures/armv7-m/armv7-m.c **** }
1218:mri/architectures/armv7-m/armv7-m.c **** 
1219:mri/architectures/armv7-m/armv7-m.c **** static int doesKindIndicate32BitInstruction(uint32_t kind)
1220:mri/architectures/armv7-m/armv7-m.c **** {
 2688              		.loc 1 1220 1 is_stmt 1 view -0
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 0
 2691              		@ frame_needed = 0, uses_anonymous_args = 0
 2692              		@ link register save eliminated.
1221:mri/architectures/armv7-m/armv7-m.c ****     switch (kind)
 2693              		.loc 1 1221 5 view .LVU684
 2694 0000 0228     		cmp	r0, #2
 2695 0002 0ED0     		beq	.L227
 2696 0004 04D3     		bcc	.L226
 2697 0006 0338     		subs	r0, r0, #3
 2698              	.LVL206:
 2699              		.loc 1 1221 5 is_stmt 0 view .LVU685
 2700 0008 0128     		cmp	r0, #1
 2701 000a 01D8     		bhi	.L226
1222:mri/architectures/armv7-m/armv7-m.c ****     {
1223:mri/architectures/armv7-m/armv7-m.c ****     case 2:
1224:mri/architectures/armv7-m/armv7-m.c ****         return 0;
1225:mri/architectures/armv7-m/armv7-m.c ****     case 3:
1226:mri/architectures/armv7-m/armv7-m.c ****     case 4:
1227:mri/architectures/armv7-m/armv7-m.c ****         return 1;
 2702              		.loc 1 1227 16 view .LVU686
 2703 000c 0120     		movs	r0, #1
 2704              	.LVL207:
1228:mri/architectures/armv7-m/armv7-m.c ****     default:
1229:mri/architectures/armv7-m/armv7-m.c ****         __throw_and_return(invalidArgumentException, -1);
1230:mri/architectures/armv7-m/armv7-m.c ****     }
1231:mri/architectures/armv7-m/armv7-m.c **** }
 2705              		.loc 1 1231 1 view .LVU687
 2706 000e 7047     		bx	lr
 2707              	.L226:
1229:mri/architectures/armv7-m/armv7-m.c ****     }
 2708              		.loc 1 1229 9 is_stmt 1 view .LVU688
 2709              	.LVL208:
 2710              	.LBB297:
 2711              	.LBI297:
 2712              		.file 5 "mri/core/try_catch.h"
   1:mri/core/try_catch.h **** /* Copyright 2014 Adam Green (https://github.com/adamgreen/)
   2:mri/core/try_catch.h **** 
   3:mri/core/try_catch.h ****    Licensed under the Apache License, Version 2.0 (the "License");
   4:mri/core/try_catch.h ****    you may not use this file except in compliance with the License.
   5:mri/core/try_catch.h ****    You may obtain a copy of the License at
   6:mri/core/try_catch.h **** 
   7:mri/core/try_catch.h ****        http://www.apache.org/licenses/LICENSE-2.0
   8:mri/core/try_catch.h **** 
   9:mri/core/try_catch.h ****    Unless required by applicable law or agreed to in writing, software
  10:mri/core/try_catch.h ****    distributed under the License is distributed on an "AS IS" BASIS,
  11:mri/core/try_catch.h ****    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:mri/core/try_catch.h ****    See the License for the specific language governing permissions and
  13:mri/core/try_catch.h ****    limitations under the License.
  14:mri/core/try_catch.h **** */
  15:mri/core/try_catch.h **** /* Very rough exception handling like macros for C. */
ARM GAS  /tmp/ccXppZcm.s 			page 136


  16:mri/core/try_catch.h **** #ifndef MRI_TRY_CATCH_H_
  17:mri/core/try_catch.h **** #define MRI_TRY_CATCH_H_
  18:mri/core/try_catch.h **** 
  19:mri/core/try_catch.h **** #define noException                         0
  20:mri/core/try_catch.h **** #define bufferOverrunException              1
  21:mri/core/try_catch.h **** #define invalidHexDigitException            2
  22:mri/core/try_catch.h **** #define invalidValueException               3
  23:mri/core/try_catch.h **** #define invalidArgumentException            4
  24:mri/core/try_catch.h **** #define timeoutException                    5
  25:mri/core/try_catch.h **** #define invalidIndexException               6
  26:mri/core/try_catch.h **** #define notFoundException                   7
  27:mri/core/try_catch.h **** #define exceededHardwareResourcesException  8
  28:mri/core/try_catch.h **** #define invalidDecDigitException            9
  29:mri/core/try_catch.h **** #define memFaultException                   10
  30:mri/core/try_catch.h **** #define mriMaxException                     15
  31:mri/core/try_catch.h **** 
  32:mri/core/try_catch.h **** extern int mriExceptionCode;
  33:mri/core/try_catch.h **** 
  34:mri/core/try_catch.h **** 
  35:mri/core/try_catch.h **** /* Allow an application including MRI to extend with their own exception codes and replace the belo
  36:mri/core/try_catch.h **** #ifndef MRI_SKIP_TRY_CATCH_MACRO_DEFINES
  37:mri/core/try_catch.h **** 
  38:mri/core/try_catch.h **** /* On Linux, it is possible that __try and __catch are already defined. */
  39:mri/core/try_catch.h **** #undef __try
  40:mri/core/try_catch.h **** #undef __catch
  41:mri/core/try_catch.h **** 
  42:mri/core/try_catch.h **** #define __throws
  43:mri/core/try_catch.h **** 
  44:mri/core/try_catch.h **** #define __try \
  45:mri/core/try_catch.h ****         do \
  46:mri/core/try_catch.h ****         { \
  47:mri/core/try_catch.h ****             clearExceptionCode();
  48:mri/core/try_catch.h **** 
  49:mri/core/try_catch.h **** #define __throwing_func(X) \
  50:mri/core/try_catch.h ****             X; \
  51:mri/core/try_catch.h ****             if (mriExceptionCode) \
  52:mri/core/try_catch.h ****                 break;
  53:mri/core/try_catch.h **** 
  54:mri/core/try_catch.h **** #define __catch \
  55:mri/core/try_catch.h ****         } while (0); \
  56:mri/core/try_catch.h ****         if (mriExceptionCode)
  57:mri/core/try_catch.h **** 
  58:mri/core/try_catch.h **** #define __throw(EXCEPTION) return ((void)setExceptionCode(EXCEPTION))
  59:mri/core/try_catch.h **** 
  60:mri/core/try_catch.h **** #define __throw_and_return(EXCEPTION, RETURN) return (setExceptionCode(EXCEPTION), (RETURN))
  61:mri/core/try_catch.h **** 
  62:mri/core/try_catch.h **** #define __rethrow return
  63:mri/core/try_catch.h **** 
  64:mri/core/try_catch.h **** #define __rethrow_and_return(RETURN) return RETURN
  65:mri/core/try_catch.h **** 
  66:mri/core/try_catch.h **** static inline int getExceptionCode(void)
  67:mri/core/try_catch.h **** {
  68:mri/core/try_catch.h ****     return mriExceptionCode;
  69:mri/core/try_catch.h **** }
  70:mri/core/try_catch.h **** 
  71:mri/core/try_catch.h **** static inline void setExceptionCode(int exceptionCode)
 2713              		.loc 5 71 20 view .LVU689
ARM GAS  /tmp/ccXppZcm.s 			page 137


 2714              	.LBB298:
  72:mri/core/try_catch.h **** {
  73:mri/core/try_catch.h ****     mriExceptionCode = exceptionCode > mriExceptionCode ? exceptionCode : mriExceptionCode;
 2715              		.loc 5 73 5 view .LVU690
 2716              		.loc 5 73 73 is_stmt 0 view .LVU691
 2717 0010 054A     		ldr	r2, .L229
 2718 0012 1368     		ldr	r3, [r2]
 2719 0014 042B     		cmp	r3, #4
 2720 0016 B8BF     		it	lt
 2721 0018 0423     		movlt	r3, #4
 2722              		.loc 5 73 22 view .LVU692
 2723 001a 1360     		str	r3, [r2]
 2724              	.LVL209:
 2725              		.loc 5 73 22 view .LVU693
 2726              	.LBE298:
 2727              	.LBE297:
1229:mri/architectures/armv7-m/armv7-m.c ****     }
 2728              		.loc 1 1229 9 view .LVU694
 2729 001c 4FF0FF30 		mov	r0, #-1
 2730 0020 7047     		bx	lr
 2731              	.LVL210:
 2732              	.L227:
1221:mri/architectures/armv7-m/armv7-m.c ****     {
 2733              		.loc 1 1221 5 view .LVU695
 2734 0022 0020     		movs	r0, #0
 2735              	.LVL211:
1221:mri/architectures/armv7-m/armv7-m.c ****     {
 2736              		.loc 1 1221 5 view .LVU696
 2737 0024 7047     		bx	lr
 2738              	.L230:
 2739 0026 00BF     		.align	2
 2740              	.L229:
 2741 0028 00000000 		.word	mriExceptionCode
 2742              		.cfi_endproc
 2743              	.LFE301:
 2745              		.section	.text.convertWatchpointTypeToCortexMType,"ax",%progbits
 2746              		.align	1
 2747              		.syntax unified
 2748              		.thumb
 2749              		.thumb_func
 2751              	convertWatchpointTypeToCortexMType:
 2752              	.LVL212:
 2753              	.LFB306:
1232:mri/architectures/armv7-m/armv7-m.c **** 
1233:mri/architectures/armv7-m/armv7-m.c **** 
1234:mri/architectures/armv7-m/armv7-m.c **** void Platform_SetHardwareBreakpoint(uint32_t address)
1235:mri/architectures/armv7-m/armv7-m.c **** {
1236:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pFPBBreakpointComparator;
1237:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  firstInstructionWord;
1238:mri/architectures/armv7-m/armv7-m.c **** 
1239:mri/architectures/armv7-m/armv7-m.c ****      __try
1240:mri/architectures/armv7-m/armv7-m.c ****     {
1241:mri/architectures/armv7-m/armv7-m.c ****         firstInstructionWord = throwingMemRead16(address);
1242:mri/architectures/armv7-m/armv7-m.c ****     }
1243:mri/architectures/armv7-m/armv7-m.c ****     __catch
1244:mri/architectures/armv7-m/armv7-m.c ****         __rethrow;
1245:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 138


1246:mri/architectures/armv7-m/armv7-m.c ****     pFPBBreakpointComparator = enableFPBBreakpoint(address, isInstruction32Bit(firstInstructionWord
1247:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
1248:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
1249:mri/architectures/armv7-m/armv7-m.c **** }
1250:mri/architectures/armv7-m/armv7-m.c **** 
1251:mri/architectures/armv7-m/armv7-m.c **** 
1252:mri/architectures/armv7-m/armv7-m.c **** void Platform_ClearHardwareBreakpointOfGdbKind(uint32_t address, uint32_t kind)
1253:mri/architectures/armv7-m/armv7-m.c **** {
1254:mri/architectures/armv7-m/armv7-m.c ****     int       is32BitInstruction;
1255:mri/architectures/armv7-m/armv7-m.c **** 
1256:mri/architectures/armv7-m/armv7-m.c ****     __try
1257:mri/architectures/armv7-m/armv7-m.c ****         is32BitInstruction = doesKindIndicate32BitInstruction(kind);
1258:mri/architectures/armv7-m/armv7-m.c ****     __catch
1259:mri/architectures/armv7-m/armv7-m.c ****         __rethrow;
1260:mri/architectures/armv7-m/armv7-m.c **** 
1261:mri/architectures/armv7-m/armv7-m.c ****     disableFPBBreakpointComparator(address, is32BitInstruction);
1262:mri/architectures/armv7-m/armv7-m.c **** }
1263:mri/architectures/armv7-m/armv7-m.c **** 
1264:mri/architectures/armv7-m/armv7-m.c **** 
1265:mri/architectures/armv7-m/armv7-m.c **** void Platform_ClearHardwareBreakpoint(uint32_t address)
1266:mri/architectures/armv7-m/armv7-m.c **** {
1267:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  firstInstructionWord;
1268:mri/architectures/armv7-m/armv7-m.c **** 
1269:mri/architectures/armv7-m/armv7-m.c ****      __try
1270:mri/architectures/armv7-m/armv7-m.c ****     {
1271:mri/architectures/armv7-m/armv7-m.c ****         firstInstructionWord = throwingMemRead16(address);
1272:mri/architectures/armv7-m/armv7-m.c ****     }
1273:mri/architectures/armv7-m/armv7-m.c ****     __catch
1274:mri/architectures/armv7-m/armv7-m.c ****         __rethrow;
1275:mri/architectures/armv7-m/armv7-m.c **** 
1276:mri/architectures/armv7-m/armv7-m.c ****     disableFPBBreakpointComparator(address, isInstruction32Bit(firstInstructionWord));
1277:mri/architectures/armv7-m/armv7-m.c **** }
1278:mri/architectures/armv7-m/armv7-m.c **** 
1279:mri/architectures/armv7-m/armv7-m.c **** 
1280:mri/architectures/armv7-m/armv7-m.c **** static uint32_t convertWatchpointTypeToCortexMType(PlatformWatchpointType type);
1281:mri/architectures/armv7-m/armv7-m.c **** void Platform_SetHardwareWatchpoint(uint32_t address, uint32_t size, PlatformWatchpointType type)
1282:mri/architectures/armv7-m/armv7-m.c **** {
1283:mri/architectures/armv7-m/armv7-m.c ****     uint32_t       nativeType = convertWatchpointTypeToCortexMType(type);
1284:mri/architectures/armv7-m/armv7-m.c ****     DWT_COMP_Type* pComparator;
1285:mri/architectures/armv7-m/armv7-m.c **** 
1286:mri/architectures/armv7-m/armv7-m.c ****     if (!isValidDWTComparatorSetting(address, size, nativeType))
1287:mri/architectures/armv7-m/armv7-m.c ****         __throw(invalidArgumentException);
1288:mri/architectures/armv7-m/armv7-m.c **** 
1289:mri/architectures/armv7-m/armv7-m.c ****     pComparator = enableDWTWatchpoint(address, size, nativeType);
1290:mri/architectures/armv7-m/armv7-m.c ****     if (!pComparator)
1291:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
1292:mri/architectures/armv7-m/armv7-m.c **** }
1293:mri/architectures/armv7-m/armv7-m.c **** 
1294:mri/architectures/armv7-m/armv7-m.c **** static uint32_t convertWatchpointTypeToCortexMType(PlatformWatchpointType type)
1295:mri/architectures/armv7-m/armv7-m.c **** {
 2754              		.loc 1 1295 1 is_stmt 1 view -0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 0
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 2758              		@ link register save eliminated.
1296:mri/architectures/armv7-m/armv7-m.c ****     switch (type)
 2759              		.loc 1 1296 5 view .LVU698
ARM GAS  /tmp/ccXppZcm.s 			page 139


 2760 0000 0128     		cmp	r0, #1
 2761 0002 06D0     		beq	.L233
 2762 0004 0228     		cmp	r0, #2
 2763 0006 06D0     		beq	.L234
 2764 0008 08B1     		cbz	r0, .L236
1297:mri/architectures/armv7-m/armv7-m.c ****     {
1298:mri/architectures/armv7-m/armv7-m.c ****     case MRI_PLATFORM_WRITE_WATCHPOINT:
1299:mri/architectures/armv7-m/armv7-m.c ****         return DWT_COMP_FUNCTION_FUNCTION_DATA_WRITE;
1300:mri/architectures/armv7-m/armv7-m.c ****     case MRI_PLATFORM_READ_WATCHPOINT:
1301:mri/architectures/armv7-m/armv7-m.c ****         return DWT_COMP_FUNCTION_FUNCTION_DATA_READ;
1302:mri/architectures/armv7-m/armv7-m.c ****     case MRI_PLATFORM_READWRITE_WATCHPOINT:
1303:mri/architectures/armv7-m/armv7-m.c ****         return DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE;
1304:mri/architectures/armv7-m/armv7-m.c ****     default:
1305:mri/architectures/armv7-m/armv7-m.c ****         return 0;
 2765              		.loc 1 1305 16 is_stmt 0 view .LVU699
 2766 000a 0020     		movs	r0, #0
 2767              	.LVL213:
1306:mri/architectures/armv7-m/armv7-m.c ****     }
1307:mri/architectures/armv7-m/armv7-m.c **** }
 2768              		.loc 1 1307 1 view .LVU700
 2769 000c 7047     		bx	lr
 2770              	.LVL214:
 2771              	.L236:
1296:mri/architectures/armv7-m/armv7-m.c ****     {
 2772              		.loc 1 1296 5 view .LVU701
 2773 000e 0620     		movs	r0, #6
 2774              	.LVL215:
1296:mri/architectures/armv7-m/armv7-m.c ****     {
 2775              		.loc 1 1296 5 view .LVU702
 2776 0010 7047     		bx	lr
 2777              	.LVL216:
 2778              	.L233:
1301:mri/architectures/armv7-m/armv7-m.c ****     case MRI_PLATFORM_READWRITE_WATCHPOINT:
 2779              		.loc 1 1301 16 view .LVU703
 2780 0012 0520     		movs	r0, #5
 2781              	.LVL217:
1301:mri/architectures/armv7-m/armv7-m.c ****     case MRI_PLATFORM_READWRITE_WATCHPOINT:
 2782              		.loc 1 1301 16 view .LVU704
 2783 0014 7047     		bx	lr
 2784              	.LVL218:
 2785              	.L234:
1303:mri/architectures/armv7-m/armv7-m.c ****     default:
 2786              		.loc 1 1303 16 view .LVU705
 2787 0016 0720     		movs	r0, #7
 2788              	.LVL219:
1303:mri/architectures/armv7-m/armv7-m.c ****     default:
 2789              		.loc 1 1303 16 view .LVU706
 2790 0018 7047     		bx	lr
 2791              		.cfi_endproc
 2792              	.LFE306:
 2794              		.section	.text.setFaultDetectedFlag,"ax",%progbits
 2795              		.align	1
 2796              		.syntax unified
 2797              		.thumb
 2798              		.thumb_func
 2800              	setFaultDetectedFlag:
 2801              	.LFB312:
ARM GAS  /tmp/ccXppZcm.s 			page 140


1308:mri/architectures/armv7-m/armv7-m.c **** 
1309:mri/architectures/armv7-m/armv7-m.c **** 
1310:mri/architectures/armv7-m/armv7-m.c **** void Platform_ClearHardwareWatchpoint(uint32_t address, uint32_t size, PlatformWatchpointType type)
1311:mri/architectures/armv7-m/armv7-m.c **** {
1312:mri/architectures/armv7-m/armv7-m.c ****     uint32_t nativeType = convertWatchpointTypeToCortexMType(type);
1313:mri/architectures/armv7-m/armv7-m.c **** 
1314:mri/architectures/armv7-m/armv7-m.c ****     if (!isValidDWTComparatorSetting(address, size, nativeType))
1315:mri/architectures/armv7-m/armv7-m.c ****         __throw(invalidArgumentException);
1316:mri/architectures/armv7-m/armv7-m.c **** 
1317:mri/architectures/armv7-m/armv7-m.c ****     disableDWTWatchpoint(address, size, nativeType);
1318:mri/architectures/armv7-m/armv7-m.c **** }
1319:mri/architectures/armv7-m/armv7-m.c **** 
1320:mri/architectures/armv7-m/armv7-m.c **** uint32_t Platform_GetTargetXmlSize(void)
1321:mri/architectures/armv7-m/armv7-m.c **** {
1322:mri/architectures/armv7-m/armv7-m.c ****     return sizeof(g_targetXml) - 1;
1323:mri/architectures/armv7-m/armv7-m.c **** }
1324:mri/architectures/armv7-m/armv7-m.c **** 
1325:mri/architectures/armv7-m/armv7-m.c **** 
1326:mri/architectures/armv7-m/armv7-m.c **** const char* Platform_GetTargetXml(void)
1327:mri/architectures/armv7-m/armv7-m.c **** {
1328:mri/architectures/armv7-m/armv7-m.c ****     return g_targetXml;
1329:mri/architectures/armv7-m/armv7-m.c **** }
1330:mri/architectures/armv7-m/armv7-m.c **** 
1331:mri/architectures/armv7-m/armv7-m.c **** 
1332:mri/architectures/armv7-m/armv7-m.c **** void Platform_ResetDevice(void)
1333:mri/architectures/armv7-m/armv7-m.c **** {
1334:mri/architectures/armv7-m/armv7-m.c ****     NVIC_SystemReset();
1335:mri/architectures/armv7-m/armv7-m.c **** }
1336:mri/architectures/armv7-m/armv7-m.c **** 
1337:mri/architectures/armv7-m/armv7-m.c **** 
1338:mri/architectures/armv7-m/armv7-m.c **** 
1339:mri/architectures/armv7-m/armv7-m.c **** #if !MRI_THREAD_MRI
1340:mri/architectures/armv7-m/armv7-m.c **** /**************************************************************************************************
1341:mri/architectures/armv7-m/armv7-m.c **** /* Handler/Kernel Mode MRI C code handlers to prepare environment before calling mriDebugException.
1342:mri/architectures/armv7-m/armv7-m.c **** /**************************************************************************************************
1343:mri/architectures/armv7-m/armv7-m.c **** /* Entries to track the chunks of the context in a scatter list. */
1344:mri/architectures/armv7-m/armv7-m.c **** #if MRI_DEVICE_HAS_FPU
1345:mri/architectures/armv7-m/armv7-m.c ****     #define CONTEXT_ENTRIES     (6 + 3)
1346:mri/architectures/armv7-m/armv7-m.c **** #else
1347:mri/architectures/armv7-m/armv7-m.c ****     #define CONTEXT_ENTRIES     6
1348:mri/architectures/armv7-m/armv7-m.c **** #endif
1349:mri/architectures/armv7-m/armv7-m.c **** 
1350:mri/architectures/armv7-m/armv7-m.c **** static ContextSection   g_contextEntries[CONTEXT_ENTRIES];
1351:mri/architectures/armv7-m/armv7-m.c **** 
1352:mri/architectures/armv7-m/armv7-m.c **** 
1353:mri/architectures/armv7-m/armv7-m.c **** /* Lower nibble of EXC_RETURN in LR will have one of these values if interrupted code was running i
1354:mri/architectures/armv7-m/armv7-m.c ****    Using PSP. */
1355:mri/architectures/armv7-m/armv7-m.c **** #define EXC_RETURN_THREADMODE_PROCESSSTACK  0xD
1356:mri/architectures/armv7-m/armv7-m.c **** /*  Using MSP. */
1357:mri/architectures/armv7-m/armv7-m.c **** #define EXC_RETURN_THREADMODE_MAINSTACK     0x9
1358:mri/architectures/armv7-m/armv7-m.c **** 
1359:mri/architectures/armv7-m/armv7-m.c **** /* Bit location in PSR which indicates if the stack needed to be 8-byte aligned or not. */
1360:mri/architectures/armv7-m/armv7-m.c **** #define PSR_STACK_ALIGN_BIT_POS             9
1361:mri/architectures/armv7-m/armv7-m.c **** 
1362:mri/architectures/armv7-m/armv7-m.c **** /* Bit in LR set to 0 when automatic stacking of floating point registers occurs during exception h
1363:mri/architectures/armv7-m/armv7-m.c **** #define LR_FLOAT_STACK                      (1 << 4)
1364:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 141


1365:mri/architectures/armv7-m/armv7-m.c **** /* Bits in CFSR which indicate that stacking/unstacking fault has occurred during exception entry/e
1366:mri/architectures/armv7-m/armv7-m.c **** #define CFSR_STACK_ERROR_BITS               0x00001818
1367:mri/architectures/armv7-m/armv7-m.c **** 
1368:mri/architectures/armv7-m/armv7-m.c **** 
1369:mri/architectures/armv7-m/armv7-m.c **** 
1370:mri/architectures/armv7-m/armv7-m.c **** typedef struct IntegerRegisters
1371:mri/architectures/armv7-m/armv7-m.c **** {
1372:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    msp;
1373:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    psp;
1374:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    primask;
1375:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    basepri;
1376:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    faultmask;
1377:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    control;
1378:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r4;
1379:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r5;
1380:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r6;
1381:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r7;
1382:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r8;
1383:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r9;
1384:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r10;
1385:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r11;
1386:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    excReturn;
1387:mri/architectures/armv7-m/armv7-m.c **** } IntegerRegisters;
1388:mri/architectures/armv7-m/armv7-m.c **** 
1389:mri/architectures/armv7-m/armv7-m.c **** typedef struct ExceptionStack
1390:mri/architectures/armv7-m/armv7-m.c **** {
1391:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r0;
1392:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r1;
1393:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r2;
1394:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r3;
1395:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    r12;
1396:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    lr;
1397:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    pc;
1398:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    xpsr;
1399:mri/architectures/armv7-m/armv7-m.c ****     /* Need to check EXC_RETURN value in exception LR to see if these floating point registers have
1400:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s0;
1401:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s1;
1402:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s2;
1403:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s3;
1404:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s4;
1405:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s5;
1406:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s6;
1407:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s7;
1408:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s8;
1409:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s9;
1410:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s10;
1411:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s11;
1412:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s12;
1413:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s13;
1414:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s14;
1415:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    s15;
1416:mri/architectures/armv7-m/armv7-m.c ****     uint32_t    fpscr;
1417:mri/architectures/armv7-m/armv7-m.c **** } ExceptionStack;
1418:mri/architectures/armv7-m/armv7-m.c **** 
1419:mri/architectures/armv7-m/armv7-m.c **** 
1420:mri/architectures/armv7-m/armv7-m.c **** 
1421:mri/architectures/armv7-m/armv7-m.c **** static ExceptionStack* getExceptionStack(uint32_t excReturn, uint32_t psp, uint32_t msp);
ARM GAS  /tmp/ccXppZcm.s 			page 142


1422:mri/architectures/armv7-m/armv7-m.c **** static int isDebuggerAlreadyActive(void);
1423:mri/architectures/armv7-m/armv7-m.c **** static void setFaultDetectedFlag(void);
1424:mri/architectures/armv7-m/armv7-m.c **** static uint32_t isImpreciseBusFaultRaw(void);
1425:mri/architectures/armv7-m/armv7-m.c **** static void advancePCToNextInstruction(ExceptionStack* pExceptionStack);
1426:mri/architectures/armv7-m/armv7-m.c **** static void clearFaultStatusBits(void);
1427:mri/architectures/armv7-m/armv7-m.c **** static int isExceptionPriorityLowEnoughToDebug(uint32_t exceptionNumber);
1428:mri/architectures/armv7-m/armv7-m.c **** static int hasDebugMonInterruptBeenDisabled();
1429:mri/architectures/armv7-m/armv7-m.c **** static void recordAndClearFaultStatusBits(uint32_t exceptionNumber);
1430:mri/architectures/armv7-m/armv7-m.c **** static void disableInterruptMaskingIfNecessary(void);
1431:mri/architectures/armv7-m/armv7-m.c **** static void treatDebugEventHardFaultAsDebugMonInterrupt(void);
1432:mri/architectures/armv7-m/armv7-m.c **** static void setPendedFromFaultBit(void);
1433:mri/architectures/armv7-m/armv7-m.c **** int mriFaultHandler(uint32_t psp, uint32_t msp, uint32_t excReturn)
1434:mri/architectures/armv7-m/armv7-m.c **** {
1435:mri/architectures/armv7-m/armv7-m.c ****     /* This handler will be called from the fault handlers (Hard Fault, etc.)
1436:mri/architectures/armv7-m/armv7-m.c ****        What needs to be done depends on CPU state when the fault occurs.
1437:mri/architectures/armv7-m/armv7-m.c ****     */
1438:mri/architectures/armv7-m/armv7-m.c ****     const uint32_t debugMonExceptionNumber = (uint32_t)(DebugMonitor_IRQn + 16);
1439:mri/architectures/armv7-m/armv7-m.c ****     ExceptionStack* pExceptionStack = getExceptionStack(excReturn, psp, msp);
1440:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = pExceptionStack->xpsr & 0xFF;
1441:mri/architectures/armv7-m/armv7-m.c ****     if (isDebuggerAlreadyActive() && exceptionNumber == debugMonExceptionNumber)
1442:mri/architectures/armv7-m/armv7-m.c ****     {
1443:mri/architectures/armv7-m/armv7-m.c ****         /* Encountered memory fault when GDB attempted to access an invalid address.
1444:mri/architectures/armv7-m/armv7-m.c ****            Set flag to let MRI know that its access failed and advance past the faulting instructio
1445:mri/architectures/armv7-m/armv7-m.c ****            if it was a precise bus fault so that it doesn't just occur again on return.
1446:mri/architectures/armv7-m/armv7-m.c **** 
1447:mri/architectures/armv7-m/armv7-m.c ****            Returns 0 to let asm routine know that it should just return and let debuggee continue e
1448:mri/architectures/armv7-m/armv7-m.c ****         */
1449:mri/architectures/armv7-m/armv7-m.c ****         setFaultDetectedFlag();
1450:mri/architectures/armv7-m/armv7-m.c ****         if (!isImpreciseBusFaultRaw())
1451:mri/architectures/armv7-m/armv7-m.c ****         {
1452:mri/architectures/armv7-m/armv7-m.c ****             advancePCToNextInstruction(pExceptionStack);
1453:mri/architectures/armv7-m/armv7-m.c ****         }
1454:mri/architectures/armv7-m/armv7-m.c ****         clearFaultStatusBits();
1455:mri/architectures/armv7-m/armv7-m.c ****         return 0;
1456:mri/architectures/armv7-m/armv7-m.c ****     }
1457:mri/architectures/armv7-m/armv7-m.c **** 
1458:mri/architectures/armv7-m/armv7-m.c ****     if (isExceptionPriorityLowEnoughToDebug(exceptionNumber))
1459:mri/architectures/armv7-m/armv7-m.c ****     {
1460:mri/architectures/armv7-m/armv7-m.c ****         /* Pend DebugMon interrupt to debug the fault.
1461:mri/architectures/armv7-m/armv7-m.c **** 
1462:mri/architectures/armv7-m/armv7-m.c ****            Returns 0 to let asm routine know that it can now just return to let the pended DebugMon
1463:mri/architectures/armv7-m/armv7-m.c ****         */
1464:mri/architectures/armv7-m/armv7-m.c ****         recordAndClearFaultStatusBits(getCurrentlyExecutingExceptionNumber());
1465:mri/architectures/armv7-m/armv7-m.c ****         disableInterruptMaskingIfNecessary();
1466:mri/architectures/armv7-m/armv7-m.c ****         treatDebugEventHardFaultAsDebugMonInterrupt();
1467:mri/architectures/armv7-m/armv7-m.c ****         setPendedFromFaultBit();
1468:mri/architectures/armv7-m/armv7-m.c ****         setMonitorPending();
1469:mri/architectures/armv7-m/armv7-m.c ****         return 0;
1470:mri/architectures/armv7-m/armv7-m.c ****     }
1471:mri/architectures/armv7-m/armv7-m.c ****     else
1472:mri/architectures/armv7-m/armv7-m.c ****     {
1473:mri/architectures/armv7-m/armv7-m.c ****         /* Exception occurred in code too high priority to debug so start a crash dump.
1474:mri/architectures/armv7-m/armv7-m.c **** 
1475:mri/architectures/armv7-m/armv7-m.c ****            Returns -1 to let asm routine know that it should call Platform_HandleFaultFromHighPrior
1476:mri/architectures/armv7-m/armv7-m.c ****            this special case by doing something like dumping a crash dump since MRI can't debug it.
1477:mri/architectures/armv7-m/armv7-m.c ****         */
1478:mri/architectures/armv7-m/armv7-m.c ****         return -1;
ARM GAS  /tmp/ccXppZcm.s 			page 143


1479:mri/architectures/armv7-m/armv7-m.c ****     }
1480:mri/architectures/armv7-m/armv7-m.c **** }
1481:mri/architectures/armv7-m/armv7-m.c **** 
1482:mri/architectures/armv7-m/armv7-m.c **** static void setFaultDetectedFlag(void)
1483:mri/architectures/armv7-m/armv7-m.c **** {
 2802              		.loc 1 1483 1 is_stmt 1 view -0
 2803              		.cfi_startproc
 2804              		@ args = 0, pretend = 0, frame = 0
 2805              		@ frame_needed = 0, uses_anonymous_args = 0
 2806              		@ link register save eliminated.
1484:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_FAULT_DURING_DEBUG;
 2807              		.loc 1 1484 5 view .LVU708
 2808              		.loc 1 1484 21 is_stmt 0 view .LVU709
 2809 0000 024A     		ldr	r2, .L238
 2810 0002 1368     		ldr	r3, [r2]
 2811 0004 43F00203 		orr	r3, r3, #2
 2812 0008 1360     		str	r3, [r2]
1485:mri/architectures/armv7-m/armv7-m.c **** }
 2813              		.loc 1 1485 1 view .LVU710
 2814 000a 7047     		bx	lr
 2815              	.L239:
 2816              		.align	2
 2817              	.L238:
 2818 000c 00000000 		.word	mriCortexMFlags
 2819              		.cfi_endproc
 2820              	.LFE312:
 2822              		.section	.text.isDebuggerAlreadyActive,"ax",%progbits
 2823              		.align	1
 2824              		.syntax unified
 2825              		.thumb
 2826              		.thumb_func
 2828              	isDebuggerAlreadyActive:
 2829              	.LFB313:
1486:mri/architectures/armv7-m/armv7-m.c **** 
1487:mri/architectures/armv7-m/armv7-m.c **** static int isDebuggerAlreadyActive(void)
1488:mri/architectures/armv7-m/armv7-m.c **** {
 2830              		.loc 1 1488 1 is_stmt 1 view -0
 2831              		.cfi_startproc
 2832              		@ args = 0, pretend = 0, frame = 0
 2833              		@ frame_needed = 0, uses_anonymous_args = 0
 2834              		@ link register save eliminated.
1489:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMFlags & CORTEXM_FLAGS_ACTIVE_DEBUG;
 2835              		.loc 1 1489 5 view .LVU712
 2836              		.loc 1 1489 28 is_stmt 0 view .LVU713
 2837 0000 024B     		ldr	r3, .L241
 2838 0002 1868     		ldr	r0, [r3]
1490:mri/architectures/armv7-m/armv7-m.c **** }
 2839              		.loc 1 1490 1 view .LVU714
 2840 0004 00F00100 		and	r0, r0, #1
 2841 0008 7047     		bx	lr
 2842              	.L242:
 2843 000a 00BF     		.align	2
 2844              	.L241:
 2845 000c 00000000 		.word	mriCortexMFlags
 2846              		.cfi_endproc
 2847              	.LFE313:
 2849              		.section	.text.isImpreciseBusFaultRaw,"ax",%progbits
ARM GAS  /tmp/ccXppZcm.s 			page 144


 2850              		.align	1
 2851              		.syntax unified
 2852              		.thumb
 2853              		.thumb_func
 2855              	isImpreciseBusFaultRaw:
 2856              	.LFB314:
1491:mri/architectures/armv7-m/armv7-m.c **** 
1492:mri/architectures/armv7-m/armv7-m.c **** static uint32_t isImpreciseBusFaultRaw(void)
1493:mri/architectures/armv7-m/armv7-m.c **** {
 2857              		.loc 1 1493 1 is_stmt 1 view -0
 2858              		.cfi_startproc
 2859              		@ args = 0, pretend = 0, frame = 0
 2860              		@ frame_needed = 0, uses_anonymous_args = 0
 2861              		@ link register save eliminated.
1494:mri/architectures/armv7-m/armv7-m.c ****     /* Uses the raw SCB->CFSR register since it is called before recordAndClearFaultStatusBits(). *
1495:mri/architectures/armv7-m/armv7-m.c ****     return SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk;
 2862              		.loc 1 1495 5 view .LVU716
 2863              		.loc 1 1495 15 is_stmt 0 view .LVU717
 2864 0000 024B     		ldr	r3, .L244
 2865 0002 986A     		ldr	r0, [r3, #40]
1496:mri/architectures/armv7-m/armv7-m.c **** }
 2866              		.loc 1 1496 1 view .LVU718
 2867 0004 00F48060 		and	r0, r0, #1024
 2868 0008 7047     		bx	lr
 2869              	.L245:
 2870 000a 00BF     		.align	2
 2871              	.L244:
 2872 000c 00ED00E0 		.word	-536810240
 2873              		.cfi_endproc
 2874              	.LFE314:
 2876              		.section	.text.getExceptionStack,"ax",%progbits
 2877              		.align	1
 2878              		.syntax unified
 2879              		.thumb
 2880              		.thumb_func
 2882              	getExceptionStack:
 2883              	.LVL220:
 2884              	.LFB315:
1497:mri/architectures/armv7-m/armv7-m.c **** 
1498:mri/architectures/armv7-m/armv7-m.c **** static ExceptionStack* getExceptionStack(uint32_t excReturn, uint32_t psp, uint32_t msp)
1499:mri/architectures/armv7-m/armv7-m.c **** {
 2885              		.loc 1 1499 1 is_stmt 1 view -0
 2886              		.cfi_startproc
 2887              		@ args = 0, pretend = 0, frame = 0
 2888              		@ frame_needed = 0, uses_anonymous_args = 0
 2889              		@ link register save eliminated.
1500:mri/architectures/armv7-m/armv7-m.c ****     uint32_t sp;
 2890              		.loc 1 1500 5 view .LVU720
1501:mri/architectures/armv7-m/armv7-m.c ****     if ((excReturn & 0xF) == EXC_RETURN_THREADMODE_PROCESSSTACK)
 2891              		.loc 1 1501 5 view .LVU721
 2892              		.loc 1 1501 20 is_stmt 0 view .LVU722
 2893 0000 00F00F00 		and	r0, r0, #15
 2894              	.LVL221:
 2895              		.loc 1 1501 8 view .LVU723
 2896 0004 0D28     		cmp	r0, #13
 2897 0006 01D0     		beq	.L248
 2898              	.LVL222:
ARM GAS  /tmp/ccXppZcm.s 			page 145


 2899              	.L247:
1502:mri/architectures/armv7-m/armv7-m.c ****         sp = psp;
1503:mri/architectures/armv7-m/armv7-m.c ****     else
1504:mri/architectures/armv7-m/armv7-m.c ****         sp = msp;
1505:mri/architectures/armv7-m/armv7-m.c ****     return (ExceptionStack*)sp;
 2900              		.loc 1 1505 5 is_stmt 1 view .LVU724
1506:mri/architectures/armv7-m/armv7-m.c **** }
 2901              		.loc 1 1506 1 is_stmt 0 view .LVU725
 2902 0008 1046     		mov	r0, r2
 2903 000a 7047     		bx	lr
 2904              	.LVL223:
 2905              	.L248:
1502:mri/architectures/armv7-m/armv7-m.c ****         sp = psp;
 2906              		.loc 1 1502 12 view .LVU726
 2907 000c 0A46     		mov	r2, r1
 2908              	.LVL224:
1502:mri/architectures/armv7-m/armv7-m.c ****         sp = psp;
 2909              		.loc 1 1502 12 view .LVU727
 2910 000e FBE7     		b	.L247
 2911              		.cfi_endproc
 2912              	.LFE315:
 2914              		.section	.text.advancePCToNextInstruction,"ax",%progbits
 2915              		.align	1
 2916              		.syntax unified
 2917              		.thumb
 2918              		.thumb_func
 2920              	advancePCToNextInstruction:
 2921              	.LVL225:
 2922              	.LFB316:
1507:mri/architectures/armv7-m/armv7-m.c **** 
1508:mri/architectures/armv7-m/armv7-m.c **** static void advancePCToNextInstruction(ExceptionStack* pExceptionStack)
1509:mri/architectures/armv7-m/armv7-m.c **** {
 2923              		.loc 1 1509 1 is_stmt 1 view -0
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 0
 2926              		@ frame_needed = 0, uses_anonymous_args = 0
 2927              		.loc 1 1509 1 is_stmt 0 view .LVU729
 2928 0000 38B5     		push	{r3, r4, r5, lr}
 2929              	.LCFI13:
 2930              		.cfi_def_cfa_offset 16
 2931              		.cfi_offset 3, -16
 2932              		.cfi_offset 4, -12
 2933              		.cfi_offset 5, -8
 2934              		.cfi_offset 14, -4
 2935 0002 0446     		mov	r4, r0
1510:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pPC = &pExceptionStack->pc;
 2936              		.loc 1 1510 5 is_stmt 1 view .LVU730
 2937              	.LVL226:
1511:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  currentInstruction = *(uint16_t*)*pPC;
 2938              		.loc 1 1511 5 view .LVU731
 2939              		.loc 1 1511 48 is_stmt 0 view .LVU732
 2940 0004 8569     		ldr	r5, [r0, #24]
 2941              	.LVL227:
1512:mri/architectures/armv7-m/armv7-m.c ****     if (isInstruction32Bit(currentInstruction)) {
 2942              		.loc 1 1512 5 is_stmt 1 view .LVU733
 2943              		.loc 1 1512 9 is_stmt 0 view .LVU734
 2944 0006 2888     		ldrh	r0, [r5]
ARM GAS  /tmp/ccXppZcm.s 			page 146


 2945              	.LVL228:
 2946              		.loc 1 1512 9 view .LVU735
 2947 0008 FFF7FEFF 		bl	isInstruction32Bit
 2948              	.LVL229:
 2949              		.loc 1 1512 8 view .LVU736
 2950 000c 10B1     		cbz	r0, .L250
1513:mri/architectures/armv7-m/armv7-m.c ****         *pPC += sizeof(uint32_t);
 2951              		.loc 1 1513 9 is_stmt 1 view .LVU737
 2952              		.loc 1 1513 14 is_stmt 0 view .LVU738
 2953 000e 0435     		adds	r5, r5, #4
 2954 0010 A561     		str	r5, [r4, #24]
 2955              	.L249:
1514:mri/architectures/armv7-m/armv7-m.c ****     } else {
1515:mri/architectures/armv7-m/armv7-m.c ****         *pPC += sizeof(uint16_t);
1516:mri/architectures/armv7-m/armv7-m.c ****     }
1517:mri/architectures/armv7-m/armv7-m.c **** }
 2956              		.loc 1 1517 1 view .LVU739
 2957 0012 38BD     		pop	{r3, r4, r5, pc}
 2958              	.LVL230:
 2959              	.L250:
1515:mri/architectures/armv7-m/armv7-m.c ****     }
 2960              		.loc 1 1515 9 is_stmt 1 view .LVU740
1515:mri/architectures/armv7-m/armv7-m.c ****     }
 2961              		.loc 1 1515 14 is_stmt 0 view .LVU741
 2962 0014 0235     		adds	r5, r5, #2
 2963 0016 A561     		str	r5, [r4, #24]
 2964              		.loc 1 1517 1 view .LVU742
 2965 0018 FBE7     		b	.L249
 2966              		.cfi_endproc
 2967              	.LFE316:
 2969              		.section	.text.clearFaultStatusBits,"ax",%progbits
 2970              		.align	1
 2971              		.syntax unified
 2972              		.thumb
 2973              		.thumb_func
 2975              	clearFaultStatusBits:
 2976              	.LFB317:
1518:mri/architectures/armv7-m/armv7-m.c **** 
1519:mri/architectures/armv7-m/armv7-m.c **** static void clearFaultStatusBits(void)
1520:mri/architectures/armv7-m/armv7-m.c **** {
 2977              		.loc 1 1520 1 is_stmt 1 view -0
 2978              		.cfi_startproc
 2979              		@ args = 0, pretend = 0, frame = 0
 2980              		@ frame_needed = 0, uses_anonymous_args = 0
 2981              		@ link register save eliminated.
1521:mri/architectures/armv7-m/armv7-m.c ****     /* Clear fault status bits by writing 1s to bits that are already set. */
1522:mri/architectures/armv7-m/armv7-m.c ****     SCB->DFSR = SCB->DFSR;
 2982              		.loc 1 1522 5 view .LVU744
 2983              		.loc 1 1522 20 is_stmt 0 view .LVU745
 2984 0000 034B     		ldr	r3, .L254
 2985 0002 1A6B     		ldr	r2, [r3, #48]
 2986              		.loc 1 1522 15 view .LVU746
 2987 0004 1A63     		str	r2, [r3, #48]
1523:mri/architectures/armv7-m/armv7-m.c ****     SCB->HFSR = SCB->HFSR;
 2988              		.loc 1 1523 5 is_stmt 1 view .LVU747
 2989              		.loc 1 1523 20 is_stmt 0 view .LVU748
 2990 0006 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccXppZcm.s 			page 147


 2991              		.loc 1 1523 15 view .LVU749
 2992 0008 DA62     		str	r2, [r3, #44]
1524:mri/architectures/armv7-m/armv7-m.c ****     SCB->CFSR = SCB->CFSR;
 2993              		.loc 1 1524 5 is_stmt 1 view .LVU750
 2994              		.loc 1 1524 20 is_stmt 0 view .LVU751
 2995 000a 9A6A     		ldr	r2, [r3, #40]
 2996              		.loc 1 1524 15 view .LVU752
 2997 000c 9A62     		str	r2, [r3, #40]
1525:mri/architectures/armv7-m/armv7-m.c **** }
 2998              		.loc 1 1525 1 view .LVU753
 2999 000e 7047     		bx	lr
 3000              	.L255:
 3001              		.align	2
 3002              	.L254:
 3003 0010 00ED00E0 		.word	-536810240
 3004              		.cfi_endproc
 3005              	.LFE317:
 3007              		.section	.text.recordAndClearFaultStatusBits,"ax",%progbits
 3008              		.align	1
 3009              		.syntax unified
 3010              		.thumb
 3011              		.thumb_func
 3013              	recordAndClearFaultStatusBits:
 3014              	.LVL231:
 3015              	.LFB320:
1526:mri/architectures/armv7-m/armv7-m.c **** 
1527:mri/architectures/armv7-m/armv7-m.c **** static int isExceptionPriorityLowEnoughToDebug(uint32_t exceptionNumber)
1528:mri/architectures/armv7-m/armv7-m.c **** {
1529:mri/architectures/armv7-m/armv7-m.c ****     if (hasDebugMonInterruptBeenDisabled())
1530:mri/architectures/armv7-m/armv7-m.c ****     {
1531:mri/architectures/armv7-m/armv7-m.c ****         /* User code has entered critical section using PRIMASK or BASEPRI which disables debug mon
1532:mri/architectures/armv7-m/armv7-m.c ****         return 0;
1533:mri/architectures/armv7-m/armv7-m.c ****     }
1534:mri/architectures/armv7-m/armv7-m.c ****     else if (exceptionNumber == 0)
1535:mri/architectures/armv7-m/armv7-m.c ****     {
1536:mri/architectures/armv7-m/armv7-m.c ****         /* Can always debug main thread as it has lowest priority. */
1537:mri/architectures/armv7-m/armv7-m.c ****         return 1;
1538:mri/architectures/armv7-m/armv7-m.c ****     }
1539:mri/architectures/armv7-m/armv7-m.c ****     else if (exceptionNumber >= 1 && exceptionNumber <= 3)
1540:mri/architectures/armv7-m/armv7-m.c ****     {
1541:mri/architectures/armv7-m/armv7-m.c ****         /* NMI & HardFault are always higher priority than DebugMon. */
1542:mri/architectures/armv7-m/armv7-m.c ****         return 0;
1543:mri/architectures/armv7-m/armv7-m.c ****     }
1544:mri/architectures/armv7-m/armv7-m.c ****     else
1545:mri/architectures/armv7-m/armv7-m.c ****     {
1546:mri/architectures/armv7-m/armv7-m.c ****         return mriCortexMGetPriority(-16+exceptionNumber) > mriCortexMGetPriority(DebugMonitor_IRQn
1547:mri/architectures/armv7-m/armv7-m.c ****     }
1548:mri/architectures/armv7-m/armv7-m.c **** }
1549:mri/architectures/armv7-m/armv7-m.c **** 
1550:mri/architectures/armv7-m/armv7-m.c **** static int hasDebugMonInterruptBeenDisabled()
1551:mri/architectures/armv7-m/armv7-m.c **** {
1552:mri/architectures/armv7-m/armv7-m.c ****     /* Was user code in a critical section that disabled DebugMon interrupt when debug event occurr
1553:mri/architectures/armv7-m/armv7-m.c ****     uint32_t primask = __get_PRIMASK();
1554:mri/architectures/armv7-m/armv7-m.c ****     uint32_t basepri = __get_BASEPRI();
1555:mri/architectures/armv7-m/armv7-m.c ****     uint32_t debugMonPriority = mriCortexMGetPriority(DebugMonitor_IRQn);
1556:mri/architectures/armv7-m/armv7-m.c **** 
1557:mri/architectures/armv7-m/armv7-m.c ****     if (primask != 0 && debugMonPriority > 0)
ARM GAS  /tmp/ccXppZcm.s 			page 148


1558:mri/architectures/armv7-m/armv7-m.c ****     {
1559:mri/architectures/armv7-m/armv7-m.c ****         /* All interrupts have been masked and if DebugMon is running at priority lower than 0 then
1560:mri/architectures/armv7-m/armv7-m.c ****            to safely pend a transition to the DebugMon handler. */
1561:mri/architectures/armv7-m/armv7-m.c ****         return 1;
1562:mri/architectures/armv7-m/armv7-m.c ****     }
1563:mri/architectures/armv7-m/armv7-m.c ****     else if (basepri != 0x00 && (basepri >> mriCortexMState.priorityBitShift) <= debugMonPriority)
1564:mri/architectures/armv7-m/armv7-m.c ****     {
1565:mri/architectures/armv7-m/armv7-m.c ****         return 1;
1566:mri/architectures/armv7-m/armv7-m.c ****     }
1567:mri/architectures/armv7-m/armv7-m.c ****     else
1568:mri/architectures/armv7-m/armv7-m.c ****     {
1569:mri/architectures/armv7-m/armv7-m.c ****         return 0;
1570:mri/architectures/armv7-m/armv7-m.c ****     }
1571:mri/architectures/armv7-m/armv7-m.c **** }
1572:mri/architectures/armv7-m/armv7-m.c **** 
1573:mri/architectures/armv7-m/armv7-m.c **** static void recordAndClearFaultStatusBits(uint32_t exceptionNumber)
1574:mri/architectures/armv7-m/armv7-m.c **** {
 3016              		.loc 1 1574 1 is_stmt 1 view -0
 3017              		.cfi_startproc
 3018              		@ args = 0, pretend = 0, frame = 0
 3019              		@ frame_needed = 0, uses_anonymous_args = 0
 3020              		@ link register save eliminated.
 3021              		.loc 1 1574 1 is_stmt 0 view .LVU755
 3022 0000 30B4     		push	{r4, r5}
 3023              	.LCFI14:
 3024              		.cfi_def_cfa_offset 8
 3025              		.cfi_offset 4, -8
 3026              		.cfi_offset 5, -4
1575:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.exceptionNumber = exceptionNumber;
 3027              		.loc 1 1575 5 is_stmt 1 view .LVU756
 3028              		.loc 1 1575 37 is_stmt 0 view .LVU757
 3029 0002 094A     		ldr	r2, .L258
 3030 0004 9061     		str	r0, [r2, #24]
1576:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.dfsr = SCB->DFSR;
 3031              		.loc 1 1576 5 is_stmt 1 view .LVU758
 3032              		.loc 1 1576 31 is_stmt 0 view .LVU759
 3033 0006 094B     		ldr	r3, .L258+4
 3034 0008 1C6B     		ldr	r4, [r3, #48]
 3035              		.loc 1 1576 26 view .LVU760
 3036 000a D461     		str	r4, [r2, #28]
1577:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.hfsr = SCB->HFSR;
 3037              		.loc 1 1577 5 is_stmt 1 view .LVU761
 3038              		.loc 1 1577 31 is_stmt 0 view .LVU762
 3039 000c D86A     		ldr	r0, [r3, #44]
 3040              	.LVL232:
 3041              		.loc 1 1577 26 view .LVU763
 3042 000e 1062     		str	r0, [r2, #32]
1578:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.cfsr = SCB->CFSR;
 3043              		.loc 1 1578 5 is_stmt 1 view .LVU764
 3044              		.loc 1 1578 31 is_stmt 0 view .LVU765
 3045 0010 996A     		ldr	r1, [r3, #40]
 3046              		.loc 1 1578 26 view .LVU766
 3047 0012 5162     		str	r1, [r2, #36]
1579:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.mmfar = SCB->MMFAR;
 3048              		.loc 1 1579 5 is_stmt 1 view .LVU767
 3049              		.loc 1 1579 32 is_stmt 0 view .LVU768
 3050 0014 5D6B     		ldr	r5, [r3, #52]
ARM GAS  /tmp/ccXppZcm.s 			page 149


 3051              		.loc 1 1579 27 view .LVU769
 3052 0016 9562     		str	r5, [r2, #40]
1580:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.bfar = SCB->BFAR;
 3053              		.loc 1 1580 5 is_stmt 1 view .LVU770
 3054              		.loc 1 1580 31 is_stmt 0 view .LVU771
 3055 0018 9D6B     		ldr	r5, [r3, #56]
 3056              		.loc 1 1580 26 view .LVU772
 3057 001a D562     		str	r5, [r2, #44]
1581:mri/architectures/armv7-m/armv7-m.c **** 
1582:mri/architectures/armv7-m/armv7-m.c ****     /* Clear fault status bits by writing 1s to bits that are already set. */
1583:mri/architectures/armv7-m/armv7-m.c ****     SCB->DFSR = mriCortexMState.dfsr;
 3058              		.loc 1 1583 5 is_stmt 1 view .LVU773
 3059              		.loc 1 1583 15 is_stmt 0 view .LVU774
 3060 001c 1C63     		str	r4, [r3, #48]
1584:mri/architectures/armv7-m/armv7-m.c ****     SCB->HFSR = mriCortexMState.hfsr;
 3061              		.loc 1 1584 5 is_stmt 1 view .LVU775
 3062              		.loc 1 1584 15 is_stmt 0 view .LVU776
 3063 001e D862     		str	r0, [r3, #44]
1585:mri/architectures/armv7-m/armv7-m.c ****     SCB->CFSR = mriCortexMState.cfsr;
 3064              		.loc 1 1585 5 is_stmt 1 view .LVU777
 3065              		.loc 1 1585 15 is_stmt 0 view .LVU778
 3066 0020 9962     		str	r1, [r3, #40]
1586:mri/architectures/armv7-m/armv7-m.c **** }
 3067              		.loc 1 1586 1 view .LVU779
 3068 0022 30BC     		pop	{r4, r5}
 3069              	.LCFI15:
 3070              		.cfi_restore 5
 3071              		.cfi_restore 4
 3072              		.cfi_def_cfa_offset 0
 3073 0024 7047     		bx	lr
 3074              	.L259:
 3075 0026 00BF     		.align	2
 3076              	.L258:
 3077 0028 00000000 		.word	mriCortexMState
 3078 002c 00ED00E0 		.word	-536810240
 3079              		.cfi_endproc
 3080              	.LFE320:
 3082              		.section	.text.disableInterruptMaskingIfNecessary,"ax",%progbits
 3083              		.align	1
 3084              		.syntax unified
 3085              		.thumb
 3086              		.thumb_func
 3088              	disableInterruptMaskingIfNecessary:
 3089              	.LFB321:
1587:mri/architectures/armv7-m/armv7-m.c **** 
1588:mri/architectures/armv7-m/armv7-m.c **** static void disableInterruptMaskingIfNecessary(void)
1589:mri/architectures/armv7-m/armv7-m.c **** {
 3090              		.loc 1 1589 1 is_stmt 1 view -0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 0
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 3094 0000 08B5     		push	{r3, lr}
 3095              	.LCFI16:
 3096              		.cfi_def_cfa_offset 8
 3097              		.cfi_offset 3, -8
 3098              		.cfi_offset 14, -4
1590:mri/architectures/armv7-m/armv7-m.c ****     /* When DebugMon is running at priority level 0 then can re-enable interrupts and pend DebugMon
ARM GAS  /tmp/ccXppZcm.s 			page 150


1591:mri/architectures/armv7-m/armv7-m.c ****        the fact that PRIMASK was set so that it can be restored when leaving debugger. */
1592:mri/architectures/armv7-m/armv7-m.c ****     uint32_t primask = __get_PRIMASK();
 3099              		.loc 1 1592 5 view .LVU781
 3100              	.LBB299:
 3101              	.LBI299:
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 3102              		.loc 3 382 31 view .LVU782
 3103              	.LBB300:
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 3104              		.loc 3 384 3 view .LVU783
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 3105              		.loc 3 386 3 view .LVU784
 3106              		.syntax unified
 3107              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3108 0002 EFF31083 		MRS r3, primask
 3109              	@ 0 "" 2
 3110              	.LVL233:
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3111              		.loc 3 387 3 view .LVU785
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3112              		.loc 3 387 3 is_stmt 0 view .LVU786
 3113              		.thumb
 3114              		.syntax unified
 3115              	.LBE300:
 3116              	.LBE299:
1593:mri/architectures/armv7-m/armv7-m.c ****     uint32_t basepri = __get_BASEPRI();
 3117              		.loc 1 1593 5 is_stmt 1 view .LVU787
 3118              	.LBB301:
 3119              	.LBI301:
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 3120              		.loc 3 461 31 view .LVU788
 3121              	.LBB302:
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 3122              		.loc 3 463 3 view .LVU789
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 3123              		.loc 3 465 3 view .LVU790
 3124              		.syntax unified
 3125              	@ 465 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3126 0006 EFF31182 		MRS r2, basepri
 3127              	@ 0 "" 2
 3128              	.LVL234:
 466:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3129              		.loc 3 466 3 view .LVU791
 466:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3130              		.loc 3 466 3 is_stmt 0 view .LVU792
 3131              		.thumb
 3132              		.syntax unified
 3133              	.LBE302:
 3134              	.LBE301:
1594:mri/architectures/armv7-m/armv7-m.c **** 
1595:mri/architectures/armv7-m/armv7-m.c ****     if (primask != 0)
 3135              		.loc 1 1595 5 is_stmt 1 view .LVU793
 3136              		.loc 1 1595 8 is_stmt 0 view .LVU794
 3137 000a 03B9     		cbnz	r3, .L263
 3138              	.LVL235:
 3139              	.L260:
1596:mri/architectures/armv7-m/armv7-m.c ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 151


1597:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.primask = primask;
1598:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.basepri = basepri;
1599:mri/architectures/armv7-m/armv7-m.c ****         setRestorePriorityRegsFlag();
1600:mri/architectures/armv7-m/armv7-m.c ****         __set_PRIMASK(0);
1601:mri/architectures/armv7-m/armv7-m.c ****     }
1602:mri/architectures/armv7-m/armv7-m.c **** }
 3140              		.loc 1 1602 1 view .LVU795
 3141 000c 08BD     		pop	{r3, pc}
 3142              	.LVL236:
 3143              	.L263:
1597:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.basepri = basepri;
 3144              		.loc 1 1597 9 is_stmt 1 view .LVU796
1597:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.basepri = basepri;
 3145              		.loc 1 1597 33 is_stmt 0 view .LVU797
 3146 000e 0449     		ldr	r1, .L264
 3147 0010 8B63     		str	r3, [r1, #56]
1598:mri/architectures/armv7-m/armv7-m.c ****         setRestorePriorityRegsFlag();
 3148              		.loc 1 1598 9 is_stmt 1 view .LVU798
1598:mri/architectures/armv7-m/armv7-m.c ****         setRestorePriorityRegsFlag();
 3149              		.loc 1 1598 33 is_stmt 0 view .LVU799
 3150 0012 4A63     		str	r2, [r1, #52]
1599:mri/architectures/armv7-m/armv7-m.c ****         __set_PRIMASK(0);
 3151              		.loc 1 1599 9 is_stmt 1 view .LVU800
 3152 0014 FFF7FEFF 		bl	setRestorePriorityRegsFlag
 3153              	.LVL237:
1600:mri/architectures/armv7-m/armv7-m.c ****     }
 3154              		.loc 1 1600 9 view .LVU801
 3155              	.LBB303:
 3156              	.LBI303:
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 3157              		.loc 3 412 27 view .LVU802
 3158              	.LBB304:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3159              		.loc 3 414 3 view .LVU803
 3160 0018 0023     		movs	r3, #0
 3161              		.syntax unified
 3162              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3163 001a 83F31088 		MSR primask, r3
 3164              	@ 0 "" 2
 3165              	.LVL238:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3166              		.loc 3 414 3 is_stmt 0 view .LVU804
 3167              		.thumb
 3168              		.syntax unified
 3169              	.LBE304:
 3170              	.LBE303:
 3171              		.loc 1 1602 1 view .LVU805
 3172 001e F5E7     		b	.L260
 3173              	.L265:
 3174              		.align	2
 3175              	.L264:
 3176 0020 00000000 		.word	mriCortexMState
 3177              		.cfi_endproc
 3178              	.LFE321:
 3180              		.section	.text.treatDebugEventHardFaultAsDebugMonInterrupt,"ax",%progbits
 3181              		.align	1
 3182              		.syntax unified
ARM GAS  /tmp/ccXppZcm.s 			page 152


 3183              		.thumb
 3184              		.thumb_func
 3186              	treatDebugEventHardFaultAsDebugMonInterrupt:
 3187              	.LFB322:
1603:mri/architectures/armv7-m/armv7-m.c **** 
1604:mri/architectures/armv7-m/armv7-m.c **** static void treatDebugEventHardFaultAsDebugMonInterrupt(void)
1605:mri/architectures/armv7-m/armv7-m.c **** {
 3188              		.loc 1 1605 1 is_stmt 1 view -0
 3189              		.cfi_startproc
 3190              		@ args = 0, pretend = 0, frame = 0
 3191              		@ frame_needed = 0, uses_anonymous_args = 0
 3192              		@ link register save eliminated.
1606:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t debugEventBit = 1 << 31;
 3193              		.loc 1 1606 5 view .LVU807
1607:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t debugMonExceptionNumber = 12;
 3194              		.loc 1 1607 5 view .LVU808
1608:mri/architectures/armv7-m/armv7-m.c **** 
1609:mri/architectures/armv7-m/armv7-m.c ****     /* Treat as DebugMon interrupt if only the DEBUGEVT bit is set in the HFSR. */
1610:mri/architectures/armv7-m/armv7-m.c ****     if (mriCortexMState.hfsr == debugEventBit)
 3195              		.loc 1 1610 5 view .LVU809
 3196              		.loc 1 1610 24 is_stmt 0 view .LVU810
 3197 0000 044B     		ldr	r3, .L269
 3198 0002 1B6A     		ldr	r3, [r3, #32]
 3199              		.loc 1 1610 8 view .LVU811
 3200 0004 B3F1004F 		cmp	r3, #-2147483648
 3201 0008 00D0     		beq	.L268
 3202              	.L266:
1611:mri/architectures/armv7-m/armv7-m.c ****     {
1612:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.exceptionNumber = debugMonExceptionNumber;
1613:mri/architectures/armv7-m/armv7-m.c ****     }
1614:mri/architectures/armv7-m/armv7-m.c **** }
 3203              		.loc 1 1614 1 view .LVU812
 3204 000a 7047     		bx	lr
 3205              	.L268:
1612:mri/architectures/armv7-m/armv7-m.c ****     }
 3206              		.loc 1 1612 9 is_stmt 1 view .LVU813
1612:mri/architectures/armv7-m/armv7-m.c ****     }
 3207              		.loc 1 1612 41 is_stmt 0 view .LVU814
 3208 000c 014B     		ldr	r3, .L269
 3209 000e 0C22     		movs	r2, #12
 3210 0010 9A61     		str	r2, [r3, #24]
 3211              		.loc 1 1614 1 view .LVU815
 3212 0012 FAE7     		b	.L266
 3213              	.L270:
 3214              		.align	2
 3215              	.L269:
 3216 0014 00000000 		.word	mriCortexMState
 3217              		.cfi_endproc
 3218              	.LFE322:
 3220              		.section	.text.setPendedFromFaultBit,"ax",%progbits
 3221              		.align	1
 3222              		.syntax unified
 3223              		.thumb
 3224              		.thumb_func
 3226              	setPendedFromFaultBit:
 3227              	.LFB323:
1615:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 153


1616:mri/architectures/armv7-m/armv7-m.c **** 
1617:mri/architectures/armv7-m/armv7-m.c **** static void setPendedFromFaultBit(void)
1618:mri/architectures/armv7-m/armv7-m.c **** {
 3228              		.loc 1 1618 1 is_stmt 1 view -0
 3229              		.cfi_startproc
 3230              		@ args = 0, pretend = 0, frame = 0
 3231              		@ frame_needed = 0, uses_anonymous_args = 0
 3232              		@ link register save eliminated.
1619:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMFlags |= CORTEXM_FLAGS_PEND_FROM_FAULT;
 3233              		.loc 1 1619 5 view .LVU817
 3234              		.loc 1 1619 21 is_stmt 0 view .LVU818
 3235 0000 024A     		ldr	r2, .L272
 3236 0002 1368     		ldr	r3, [r2]
 3237 0004 43F08003 		orr	r3, r3, #128
 3238 0008 1360     		str	r3, [r2]
1620:mri/architectures/armv7-m/armv7-m.c **** }
 3239              		.loc 1 1620 1 view .LVU819
 3240 000a 7047     		bx	lr
 3241              	.L273:
 3242              		.align	2
 3243              	.L272:
 3244 000c 00000000 		.word	mriCortexMFlags
 3245              		.cfi_endproc
 3246              	.LFE323:
 3248              		.section	.text.wasPendedFromFault,"ax",%progbits
 3249              		.align	1
 3250              		.syntax unified
 3251              		.thumb
 3252              		.thumb_func
 3254              	wasPendedFromFault:
 3255              	.LFB326:
1621:mri/architectures/armv7-m/armv7-m.c **** 
1622:mri/architectures/armv7-m/armv7-m.c **** 
1623:mri/architectures/armv7-m/armv7-m.c **** __attribute__((weak)) void Platform_HandleFaultFromHighPriorityCode(void)
1624:mri/architectures/armv7-m/armv7-m.c **** {
1625:mri/architectures/armv7-m/armv7-m.c ****     /* This weak implemention does nothing and just returns to allow a jump directly to mriExceptio
1626:mri/architectures/armv7-m/armv7-m.c ****        A platform may want to provide a strong implementation to generate a crash dump in this scen
1627:mri/architectures/armv7-m/armv7-m.c ****        safely communicate with GDB from the HardFault priority level.
1628:mri/architectures/armv7-m/armv7-m.c ****     */
1629:mri/architectures/armv7-m/armv7-m.c **** }
1630:mri/architectures/armv7-m/armv7-m.c **** 
1631:mri/architectures/armv7-m/armv7-m.c **** 
1632:mri/architectures/armv7-m/armv7-m.c **** 
1633:mri/architectures/armv7-m/armv7-m.c **** static ExceptionStack* getExceptionStack(uint32_t excReturn, uint32_t psp, uint32_t msp);
1634:mri/architectures/armv7-m/armv7-m.c **** static int wasPendedFromFault(void);
1635:mri/architectures/armv7-m/armv7-m.c **** static uint32_t encounteredStackingException(void);
1636:mri/architectures/armv7-m/armv7-m.c **** static int prepareThreadContext(ExceptionStack* pExceptionStack, IntegerRegisters* pIntegerRegs, ui
1637:mri/architectures/armv7-m/armv7-m.c **** static void allocateFakeFloatRegAndCallMriDebugException(void);
1638:mri/architectures/armv7-m/armv7-m.c **** void mriCortexMExceptionHandler(IntegerRegisters* pIntegerRegs, uint32_t* pFloatingRegs)
1639:mri/architectures/armv7-m/armv7-m.c **** {
1640:mri/architectures/armv7-m/armv7-m.c ****     uint32_t excReturn = pIntegerRegs->excReturn;
1641:mri/architectures/armv7-m/armv7-m.c ****     uint32_t msp = pIntegerRegs->msp;
1642:mri/architectures/armv7-m/armv7-m.c ****     uint32_t psp = pIntegerRegs->psp;
1643:mri/architectures/armv7-m/armv7-m.c ****     ExceptionStack* pExceptionStack = getExceptionStack(excReturn, psp, msp);
1644:mri/architectures/armv7-m/armv7-m.c ****     int needToFakeFloatRegs = 0;
1645:mri/architectures/armv7-m/armv7-m.c **** 
1646:mri/architectures/armv7-m/armv7-m.c ****     /* If we know that DebugMon was pended from a fault handler then it wasn't a comm channel inter
ARM GAS  /tmp/ccXppZcm.s 			page 154


1647:mri/architectures/armv7-m/armv7-m.c ****     /* is no need to record/clear the fault status bits as this was done before pending DebugMon. *
1648:mri/architectures/armv7-m/armv7-m.c ****     if (!wasPendedFromFault())
1649:mri/architectures/armv7-m/armv7-m.c ****     {
1650:mri/architectures/armv7-m/armv7-m.c ****         uint32_t exceptionNumber = getCurrentlyExecutingExceptionNumber();
1651:mri/architectures/armv7-m/armv7-m.c ****         if (isExternalInterrupt(exceptionNumber) && !Platform_CommHasReceiveData())
1652:mri/architectures/armv7-m/armv7-m.c ****         {
1653:mri/architectures/armv7-m/armv7-m.c ****             /* Just return if communication channel had a pending interrupt when last debug session
1654:mri/architectures/armv7-m/armv7-m.c ****             return;
1655:mri/architectures/armv7-m/armv7-m.c ****         }
1656:mri/architectures/armv7-m/armv7-m.c **** 
1657:mri/architectures/armv7-m/armv7-m.c ****         recordAndClearFaultStatusBits(exceptionNumber);
1658:mri/architectures/armv7-m/armv7-m.c ****     }
1659:mri/architectures/armv7-m/armv7-m.c **** 
1660:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.taskSP = (uint32_t)pExceptionStack;
1661:mri/architectures/armv7-m/armv7-m.c ****     if (encounteredStackingException())
1662:mri/architectures/armv7-m/armv7-m.c ****         pExceptionStack = (ExceptionStack*)g_fakeStack;
1663:mri/architectures/armv7-m/armv7-m.c **** 
1664:mri/architectures/armv7-m/armv7-m.c ****     /* Setup scatter gather list for context. */
1665:mri/architectures/armv7-m/armv7-m.c ****     needToFakeFloatRegs = prepareThreadContext(pExceptionStack, pIntegerRegs, pFloatingRegs);
1666:mri/architectures/armv7-m/armv7-m.c **** 
1667:mri/architectures/armv7-m/armv7-m.c ****     /* Record some stats about the exception stack to help move it later if the user changes the SP
1668:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionStackSize = mriCortexMState.sp - mriCortexMState.taskSP;
1669:mri/architectures/armv7-m/armv7-m.c ****     int isExceptionStackMSP = msp == (uint32_t)pExceptionStack;
1670:mri/architectures/armv7-m/armv7-m.c ****     int isExceptionStackPSP = psp == (uint32_t)pExceptionStack;
1671:mri/architectures/armv7-m/armv7-m.c ****     uint32_t origSP = mriCortexMState.sp;
1672:mri/architectures/armv7-m/armv7-m.c **** 
1673:mri/architectures/armv7-m/armv7-m.c ****     if (needToFakeFloatRegs)
1674:mri/architectures/armv7-m/armv7-m.c ****         allocateFakeFloatRegAndCallMriDebugException();
1675:mri/architectures/armv7-m/armv7-m.c ****     else
1676:mri/architectures/armv7-m/armv7-m.c ****         mriDebugException(&mriCortexMState.context);
1677:mri/architectures/armv7-m/armv7-m.c **** 
1678:mri/architectures/armv7-m/armv7-m.c ****     /* If exception stack has been modified by user then will need to move exception record. */
1679:mri/architectures/armv7-m/armv7-m.c ****     if (mriCortexMState.sp != origSP)
1680:mri/architectures/armv7-m/armv7-m.c ****     {
1681:mri/architectures/armv7-m/armv7-m.c ****         if (isExceptionStackMSP)
1682:mri/architectures/armv7-m/armv7-m.c ****         {
1683:mri/architectures/armv7-m/armv7-m.c ****             Context_Set(&mriCortexMState.context, MSP, mriCortexMState.sp - exceptionStackSize);
1684:mri/architectures/armv7-m/armv7-m.c ****         }
1685:mri/architectures/armv7-m/armv7-m.c ****         if (isExceptionStackPSP)
1686:mri/architectures/armv7-m/armv7-m.c ****         {
1687:mri/architectures/armv7-m/armv7-m.c ****             Context_Set(&mriCortexMState.context, PSP, mriCortexMState.sp - exceptionStackSize);
1688:mri/architectures/armv7-m/armv7-m.c ****         }
1689:mri/architectures/armv7-m/armv7-m.c ****     }
1690:mri/architectures/armv7-m/armv7-m.c **** 
1691:mri/architectures/armv7-m/armv7-m.c ****     uint32_t newMSP = Context_Get(&mriCortexMState.context, MSP);
1692:mri/architectures/armv7-m/armv7-m.c ****     uint32_t newPSP = Context_Get(&mriCortexMState.context, PSP);
1693:mri/architectures/armv7-m/armv7-m.c ****     uint32_t oldSP = 0x00000000;
1694:mri/architectures/armv7-m/armv7-m.c ****     uint32_t newSP = 0x00000000;
1695:mri/architectures/armv7-m/armv7-m.c ****     if (isExceptionStackMSP && msp != newMSP)
1696:mri/architectures/armv7-m/armv7-m.c ****     {
1697:mri/architectures/armv7-m/armv7-m.c ****         oldSP = msp;
1698:mri/architectures/armv7-m/armv7-m.c ****         newSP = newMSP;
1699:mri/architectures/armv7-m/armv7-m.c ****     }
1700:mri/architectures/armv7-m/armv7-m.c ****     else if (isExceptionStackPSP && psp != newPSP)
1701:mri/architectures/armv7-m/armv7-m.c ****     {
1702:mri/architectures/armv7-m/armv7-m.c ****         oldSP = psp;
1703:mri/architectures/armv7-m/armv7-m.c ****         newSP = newPSP;
ARM GAS  /tmp/ccXppZcm.s 			page 155


1704:mri/architectures/armv7-m/armv7-m.c ****     }
1705:mri/architectures/armv7-m/armv7-m.c ****     if (oldSP != newSP)
1706:mri/architectures/armv7-m/armv7-m.c ****     {
1707:mri/architectures/armv7-m/armv7-m.c ****         mri_memmove((void*)newSP, (void*)oldSP, exceptionStackSize);
1708:mri/architectures/armv7-m/armv7-m.c ****     }
1709:mri/architectures/armv7-m/armv7-m.c **** }
1710:mri/architectures/armv7-m/armv7-m.c **** 
1711:mri/architectures/armv7-m/armv7-m.c **** static int wasPendedFromFault(void)
1712:mri/architectures/armv7-m/armv7-m.c **** {
 3256              		.loc 1 1712 1 is_stmt 1 view -0
 3257              		.cfi_startproc
 3258              		@ args = 0, pretend = 0, frame = 0
 3259              		@ frame_needed = 0, uses_anonymous_args = 0
 3260              		@ link register save eliminated.
1713:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMFlags & CORTEXM_FLAGS_PEND_FROM_FAULT;
 3261              		.loc 1 1713 5 view .LVU821
 3262              		.loc 1 1713 28 is_stmt 0 view .LVU822
 3263 0000 024B     		ldr	r3, .L275
 3264 0002 1868     		ldr	r0, [r3]
1714:mri/architectures/armv7-m/armv7-m.c **** }
 3265              		.loc 1 1714 1 view .LVU823
 3266 0004 00F08000 		and	r0, r0, #128
 3267 0008 7047     		bx	lr
 3268              	.L276:
 3269 000a 00BF     		.align	2
 3270              	.L275:
 3271 000c 00000000 		.word	mriCortexMFlags
 3272              		.cfi_endproc
 3273              	.LFE326:
 3275              		.section	.text.encounteredStackingException,"ax",%progbits
 3276              		.align	1
 3277              		.syntax unified
 3278              		.thumb
 3279              		.thumb_func
 3281              	encounteredStackingException:
 3282              	.LFB327:
1715:mri/architectures/armv7-m/armv7-m.c **** 
1716:mri/architectures/armv7-m/armv7-m.c **** static uint32_t encounteredStackingException(void)
1717:mri/architectures/armv7-m/armv7-m.c **** {
 3283              		.loc 1 1717 1 is_stmt 1 view -0
 3284              		.cfi_startproc
 3285              		@ args = 0, pretend = 0, frame = 0
 3286              		@ frame_needed = 0, uses_anonymous_args = 0
 3287              		@ link register save eliminated.
1718:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMState.cfsr & CFSR_STACK_ERROR_BITS;
 3288              		.loc 1 1718 5 view .LVU825
 3289              		.loc 1 1718 27 is_stmt 0 view .LVU826
 3290 0000 044B     		ldr	r3, .L278
 3291 0002 586A     		ldr	r0, [r3, #36]
1719:mri/architectures/armv7-m/armv7-m.c **** }
 3292              		.loc 1 1719 1 view .LVU827
 3293 0004 20F4FC60 		bic	r0, r0, #2016
 3294 0008 20F00700 		bic	r0, r0, #7
 3295 000c C004     		lsls	r0, r0, #19
 3296 000e C00C     		lsrs	r0, r0, #19
 3297 0010 7047     		bx	lr
 3298              	.L279:
ARM GAS  /tmp/ccXppZcm.s 			page 156


 3299 0012 00BF     		.align	2
 3300              	.L278:
 3301 0014 00000000 		.word	mriCortexMState
 3302              		.cfi_endproc
 3303              	.LFE327:
 3305              		.section	.text.clearState,"ax",%progbits
 3306              		.align	1
 3307              		.syntax unified
 3308              		.thumb
 3309              		.thumb_func
 3311              	clearState:
 3312              	.LFB220:
 186:mri/architectures/armv7-m/armv7-m.c ****     mri_memset(&mriCortexMState, 0, sizeof(mriCortexMState));
 3313              		.loc 1 186 1 is_stmt 1 view -0
 3314              		.cfi_startproc
 3315              		@ args = 0, pretend = 0, frame = 0
 3316              		@ frame_needed = 0, uses_anonymous_args = 0
 3317 0000 08B5     		push	{r3, lr}
 3318              	.LCFI17:
 3319              		.cfi_def_cfa_offset 8
 3320              		.cfi_offset 3, -8
 3321              		.cfi_offset 14, -4
 187:mri/architectures/armv7-m/armv7-m.c **** }
 3322              		.loc 1 187 5 view .LVU829
 3323 0002 4FF40372 		mov	r2, #524
 3324 0006 0021     		movs	r1, #0
 3325 0008 0148     		ldr	r0, .L282
 3326 000a FFF7FEFF 		bl	mri_memset
 3327              	.LVL239:
 188:mri/architectures/armv7-m/armv7-m.c **** 
 3328              		.loc 1 188 1 is_stmt 0 view .LVU830
 3329 000e 08BD     		pop	{r3, pc}
 3330              	.L283:
 3331              		.align	2
 3332              	.L282:
 3333 0010 00000000 		.word	mriCortexMState
 3334              		.cfi_endproc
 3335              	.LFE220:
 3337              		.section	.text.determinePriorityBitShift,"ax",%progbits
 3338              		.align	1
 3339              		.syntax unified
 3340              		.thumb
 3341              		.thumb_func
 3343              	determinePriorityBitShift:
 3344              	.LFB221:
 196:mri/architectures/armv7-m/armv7-m.c ****     const uint32_t debugMonExceptionNumber = 12;
 3345              		.loc 1 196 1 is_stmt 1 view -0
 3346              		.cfi_startproc
 3347              		@ args = 0, pretend = 0, frame = 0
 3348              		@ frame_needed = 0, uses_anonymous_args = 0
 3349              		@ link register save eliminated.
 197:mri/architectures/armv7-m/armv7-m.c ****     uint32_t zeroBitCount;
 3350              		.loc 1 197 5 view .LVU832
 3351              	.LVL240:
 198:mri/architectures/armv7-m/armv7-m.c ****     uint32_t priorityBitShift;
 3352              		.loc 1 198 5 view .LVU833
 199:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 157


 3353              		.loc 1 199 5 view .LVU834
 203:mri/architectures/armv7-m/armv7-m.c ****     zeroBitCount = 32 - (uint32_t)__CLZ(~(SCB->SHP[debugMonExceptionNumber-4] | 0xFFFFFF00));
 3354              		.loc 1 203 5 view .LVU835
 203:mri/architectures/armv7-m/armv7-m.c ****     zeroBitCount = 32 - (uint32_t)__CLZ(~(SCB->SHP[debugMonExceptionNumber-4] | 0xFFFFFF00));
 3355              		.loc 1 203 41 is_stmt 0 view .LVU836
 3356 0000 0B4A     		ldr	r2, .L286
 3357 0002 FF23     		movs	r3, #255
 3358 0004 82F82030 		strb	r3, [r2, #32]
 204:mri/architectures/armv7-m/armv7-m.c ****     priorityBitShift = NVIC_GetPriorityGrouping() + 1;
 3359              		.loc 1 204 5 is_stmt 1 view .LVU837
 204:mri/architectures/armv7-m/armv7-m.c ****     priorityBitShift = NVIC_GetPriorityGrouping() + 1;
 3360              		.loc 1 204 51 is_stmt 0 view .LVU838
 3361 0008 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
 204:mri/architectures/armv7-m/armv7-m.c ****     priorityBitShift = NVIC_GetPriorityGrouping() + 1;
 3362              		.loc 1 204 79 view .LVU839
 3363 000c 63F0FF03 		orn	r3, r3, #255
 204:mri/architectures/armv7-m/armv7-m.c ****     priorityBitShift = NVIC_GetPriorityGrouping() + 1;
 3364              		.loc 1 204 35 view .LVU840
 3365 0010 DB43     		mvns	r3, r3
 204:mri/architectures/armv7-m/armv7-m.c ****     priorityBitShift = NVIC_GetPriorityGrouping() + 1;
 3366              		.loc 1 204 25 view .LVU841
 3367 0012 B3FA83F3 		clz	r3, r3
 204:mri/architectures/armv7-m/armv7-m.c ****     priorityBitShift = NVIC_GetPriorityGrouping() + 1;
 3368              		.loc 1 204 18 view .LVU842
 3369 0016 C3F12003 		rsb	r3, r3, #32
 3370              	.LVL241:
 205:mri/architectures/armv7-m/armv7-m.c ****     if (zeroBitCount > priorityBitShift)
 3371              		.loc 1 205 5 is_stmt 1 view .LVU843
 3372              	.LBB305:
 3373              	.LBI305:
1676:Drivers/CMSIS/Include/core_cm4.h **** {
 3374              		.loc 2 1676 26 view .LVU844
 3375              	.LBB306:
1678:Drivers/CMSIS/Include/core_cm4.h **** }
 3376              		.loc 2 1678 3 view .LVU845
1678:Drivers/CMSIS/Include/core_cm4.h **** }
 3377              		.loc 2 1678 26 is_stmt 0 view .LVU846
 3378 001a D268     		ldr	r2, [r2, #12]
1678:Drivers/CMSIS/Include/core_cm4.h **** }
 3379              		.loc 2 1678 11 view .LVU847
 3380 001c C2F30222 		ubfx	r2, r2, #8, #3
 3381              	.LBE306:
 3382              	.LBE305:
 205:mri/architectures/armv7-m/armv7-m.c ****     if (zeroBitCount > priorityBitShift)
 3383              		.loc 1 205 22 view .LVU848
 3384 0020 0132     		adds	r2, r2, #1
 3385              	.LVL242:
 206:mri/architectures/armv7-m/armv7-m.c ****         priorityBitShift = zeroBitCount;
 3386              		.loc 1 206 5 is_stmt 1 view .LVU849
 206:mri/architectures/armv7-m/armv7-m.c ****         priorityBitShift = zeroBitCount;
 3387              		.loc 1 206 8 is_stmt 0 view .LVU850
 3388 0022 9342     		cmp	r3, r2
 3389 0024 00D8     		bhi	.L285
 205:mri/architectures/armv7-m/armv7-m.c ****     if (zeroBitCount > priorityBitShift)
 3390              		.loc 1 205 22 view .LVU851
 3391 0026 1346     		mov	r3, r2
 3392              	.LVL243:
ARM GAS  /tmp/ccXppZcm.s 			page 158


 3393              	.L285:
 208:mri/architectures/armv7-m/armv7-m.c **** }
 3394              		.loc 1 208 5 is_stmt 1 view .LVU852
 208:mri/architectures/armv7-m/armv7-m.c **** }
 3395              		.loc 1 208 38 is_stmt 0 view .LVU853
 3396 0028 024A     		ldr	r2, .L286+4
 3397 002a D363     		str	r3, [r2, #60]
 209:mri/architectures/armv7-m/armv7-m.c **** 
 3398              		.loc 1 209 1 view .LVU854
 3399 002c 7047     		bx	lr
 3400              	.L287:
 3401 002e 00BF     		.align	2
 3402              	.L286:
 3403 0030 00ED00E0 		.word	-536810240
 3404 0034 00000000 		.word	mriCortexMState
 3405              		.cfi_endproc
 3406              	.LFE221:
 3408              		.section	.text.restorePriorityRegsIfNeeded,"ax",%progbits
 3409              		.align	1
 3410              		.syntax unified
 3411              		.thumb
 3412              		.thumb_func
 3414              	restorePriorityRegsIfNeeded:
 3415              	.LFB230:
 285:mri/architectures/armv7-m/armv7-m.c ****     if (shouldRestorePriorityRegs())
 3416              		.loc 1 285 1 is_stmt 1 view -0
 3417              		.cfi_startproc
 3418              		@ args = 0, pretend = 0, frame = 0
 3419              		@ frame_needed = 0, uses_anonymous_args = 0
 3420 0000 10B5     		push	{r4, lr}
 3421              	.LCFI18:
 3422              		.cfi_def_cfa_offset 8
 3423              		.cfi_offset 4, -8
 3424              		.cfi_offset 14, -4
 286:mri/architectures/armv7-m/armv7-m.c ****     {
 3425              		.loc 1 286 5 view .LVU856
 286:mri/architectures/armv7-m/armv7-m.c ****     {
 3426              		.loc 1 286 9 is_stmt 0 view .LVU857
 3427 0002 FFF7FEFF 		bl	shouldRestorePriorityRegs
 3428              	.LVL244:
 286:mri/architectures/armv7-m/armv7-m.c ****     {
 3429              		.loc 1 286 8 view .LVU858
 3430 0006 00B9     		cbnz	r0, .L291
 3431              	.L288:
 294:mri/architectures/armv7-m/armv7-m.c **** 
 3432              		.loc 1 294 1 view .LVU859
 3433 0008 10BD     		pop	{r4, pc}
 3434              	.L291:
 288:mri/architectures/armv7-m/armv7-m.c ****         Context_Set(&mriCortexMState.context, PRIMASK, mriCortexMState.primask);
 3435              		.loc 1 288 9 is_stmt 1 view .LVU860
 3436 000a FFF7FEFF 		bl	clearPriorityRestoreFlag
 3437              	.LVL245:
 289:mri/architectures/armv7-m/armv7-m.c ****         Context_Set(&mriCortexMState.context, BASEPRI, mriCortexMState.basepri);
 3438              		.loc 1 289 9 view .LVU861
 3439 000e 074C     		ldr	r4, .L292
 3440 0010 A26B     		ldr	r2, [r4, #56]
 3441 0012 1321     		movs	r1, #19
ARM GAS  /tmp/ccXppZcm.s 			page 159


 3442 0014 2046     		mov	r0, r4
 3443 0016 FFF7FEFF 		bl	mriContext_Set
 3444              	.LVL246:
 290:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.primask = 0;
 3445              		.loc 1 290 9 view .LVU862
 3446 001a 626B     		ldr	r2, [r4, #52]
 3447 001c 1421     		movs	r1, #20
 3448 001e 2046     		mov	r0, r4
 3449 0020 FFF7FEFF 		bl	mriContext_Set
 3450              	.LVL247:
 291:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.basepri = 0;
 3451              		.loc 1 291 9 view .LVU863
 291:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMState.basepri = 0;
 3452              		.loc 1 291 33 is_stmt 0 view .LVU864
 3453 0024 0023     		movs	r3, #0
 3454 0026 A363     		str	r3, [r4, #56]
 292:mri/architectures/armv7-m/armv7-m.c ****     }
 3455              		.loc 1 292 9 is_stmt 1 view .LVU865
 292:mri/architectures/armv7-m/armv7-m.c ****     }
 3456              		.loc 1 292 33 is_stmt 0 view .LVU866
 3457 0028 6363     		str	r3, [r4, #52]
 294:mri/architectures/armv7-m/armv7-m.c **** 
 3458              		.loc 1 294 1 view .LVU867
 3459 002a EDE7     		b	.L288
 3460              	.L293:
 3461              		.align	2
 3462              	.L292:
 3463 002c 00000000 		.word	mriCortexMState
 3464              		.cfi_endproc
 3465              	.LFE230:
 3467              		.section	.text.processInstructionCPS,"ax",%progbits
 3468              		.align	1
 3469              		.syntax unified
 3470              		.thumb
 3471              		.thumb_func
 3473              	processInstructionCPS:
 3474              	.LVL248:
 3475              	.LFB252:
 532:mri/architectures/armv7-m/armv7-m.c ****     uint16_t enable = (firstWord & 0x0010) >> 4;
 3476              		.loc 1 532 1 is_stmt 1 view -0
 3477              		.cfi_startproc
 3478              		@ args = 0, pretend = 0, frame = 0
 3479              		@ frame_needed = 0, uses_anonymous_args = 0
 533:mri/architectures/armv7-m/armv7-m.c ****     uint16_t I = firstWord & 0x0002;
 3480              		.loc 1 533 5 view .LVU869
 533:mri/architectures/armv7-m/armv7-m.c ****     uint16_t I = firstWord & 0x0002;
 3481              		.loc 1 533 14 is_stmt 0 view .LVU870
 3482 0000 C0F30012 		ubfx	r2, r0, #4, #1
 3483              	.LVL249:
 534:mri/architectures/armv7-m/armv7-m.c **** 
 3484              		.loc 1 534 5 is_stmt 1 view .LVU871
 536:mri/architectures/armv7-m/armv7-m.c ****     {
 3485              		.loc 1 536 5 view .LVU872
 536:mri/architectures/armv7-m/armv7-m.c ****     {
 3486              		.loc 1 536 8 is_stmt 0 view .LVU873
 3487 0004 10F0020F 		tst	r0, #2
 3488 0008 01D1     		bne	.L301
ARM GAS  /tmp/ccXppZcm.s 			page 160


 541:mri/architectures/armv7-m/armv7-m.c **** }
 3489              		.loc 1 541 12 view .LVU874
 3490 000a 0020     		movs	r0, #0
 3491              	.LVL250:
 542:mri/architectures/armv7-m/armv7-m.c **** 
 3492              		.loc 1 542 1 view .LVU875
 3493 000c 7047     		bx	lr
 3494              	.LVL251:
 3495              	.L301:
 532:mri/architectures/armv7-m/armv7-m.c ****     uint16_t enable = (firstWord & 0x0010) >> 4;
 3496              		.loc 1 532 1 view .LVU876
 3497 000e 08B5     		push	{r3, lr}
 3498              	.LCFI19:
 3499              		.cfi_def_cfa_offset 8
 3500              		.cfi_offset 3, -8
 3501              		.cfi_offset 14, -4
 538:mri/architectures/armv7-m/armv7-m.c ****         return 1;
 3502              		.loc 1 538 9 is_stmt 1 view .LVU877
 3503 0010 1321     		movs	r1, #19
 3504 0012 0248     		ldr	r0, .L302
 3505              	.LVL252:
 538:mri/architectures/armv7-m/armv7-m.c ****         return 1;
 3506              		.loc 1 538 9 is_stmt 0 view .LVU878
 3507 0014 FFF7FEFF 		bl	mriContext_Set
 3508              	.LVL253:
 539:mri/architectures/armv7-m/armv7-m.c ****     }
 3509              		.loc 1 539 9 is_stmt 1 view .LVU879
 539:mri/architectures/armv7-m/armv7-m.c ****     }
 3510              		.loc 1 539 16 is_stmt 0 view .LVU880
 3511 0018 0120     		movs	r0, #1
 542:mri/architectures/armv7-m/armv7-m.c **** 
 3512              		.loc 1 542 1 view .LVU881
 3513 001a 08BD     		pop	{r3, pc}
 3514              	.L303:
 3515              		.align	2
 3516              	.L302:
 3517 001c 00000000 		.word	mriCortexMState
 3518              		.cfi_endproc
 3519              	.LFE252:
 3521              		.section	.text.processInstructionMSR,"ax",%progbits
 3522              		.align	1
 3523              		.syntax unified
 3524              		.thumb
 3525              		.thumb_func
 3527              	processInstructionMSR:
 3528              	.LVL254:
 3529              	.LFB250:
 499:mri/architectures/armv7-m/armv7-m.c ****     uint16_t Rn = firstWord & 0x000F;
 3530              		.loc 1 499 1 is_stmt 1 view -0
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 0
 3533              		@ frame_needed = 0, uses_anonymous_args = 0
 499:mri/architectures/armv7-m/armv7-m.c ****     uint16_t Rn = firstWord & 0x000F;
 3534              		.loc 1 499 1 is_stmt 0 view .LVU883
 3535 0000 70B5     		push	{r4, r5, r6, lr}
 3536              	.LCFI20:
 3537              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccXppZcm.s 			page 161


 3538              		.cfi_offset 4, -16
 3539              		.cfi_offset 5, -12
 3540              		.cfi_offset 6, -8
 3541              		.cfi_offset 14, -4
 500:mri/architectures/armv7-m/armv7-m.c ****     uint16_t SYSm = secondWord & 0x00FF;
 3542              		.loc 1 500 5 is_stmt 1 view .LVU884
 500:mri/architectures/armv7-m/armv7-m.c ****     uint16_t SYSm = secondWord & 0x00FF;
 3543              		.loc 1 500 14 is_stmt 0 view .LVU885
 3544 0002 00F00F04 		and	r4, r0, #15
 3545              	.LVL255:
 501:mri/architectures/armv7-m/armv7-m.c **** 
 3546              		.loc 1 501 5 is_stmt 1 view .LVU886
 501:mri/architectures/armv7-m/armv7-m.c **** 
 3547              		.loc 1 501 14 is_stmt 0 view .LVU887
 3548 0006 C9B2     		uxtb	r1, r1
 3549              	.LVL256:
 503:mri/architectures/armv7-m/armv7-m.c ****     {
 3550              		.loc 1 503 5 is_stmt 1 view .LVU888
 3551 0008 1129     		cmp	r1, #17
 3552 000a 11D0     		beq	.L305
 3553 000c 1229     		cmp	r1, #18
 3554 000e 1BD0     		beq	.L306
 3555 0010 1029     		cmp	r1, #16
 3556 0012 01D0     		beq	.L312
 3557 0014 0020     		movs	r0, #0
 3558              	.LVL257:
 3559              	.L304:
 524:mri/architectures/armv7-m/armv7-m.c **** 
 3560              		.loc 1 524 1 is_stmt 0 view .LVU889
 3561 0016 70BD     		pop	{r4, r5, r6, pc}
 3562              	.LVL258:
 3563              	.L312:
 506:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3564              		.loc 1 506 13 is_stmt 1 view .LVU890
 3565 0018 164D     		ldr	r5, .L313
 3566 001a 2146     		mov	r1, r4
 3567              	.LVL259:
 506:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3568              		.loc 1 506 13 is_stmt 0 view .LVU891
 3569 001c 2846     		mov	r0, r5
 3570              	.LVL260:
 506:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3571              		.loc 1 506 13 view .LVU892
 3572 001e FFF7FEFF 		bl	mriContext_Get
 3573              	.LVL261:
 3574 0022 0246     		mov	r2, r0
 3575 0024 1321     		movs	r1, #19
 3576 0026 2846     		mov	r0, r5
 3577 0028 FFF7FEFF 		bl	mriContext_Set
 3578              	.LVL262:
 507:mri/architectures/armv7-m/armv7-m.c ****         case 17: // BASEPRI
 3579              		.loc 1 507 13 is_stmt 1 view .LVU893
 507:mri/architectures/armv7-m/armv7-m.c ****         case 17: // BASEPRI
 3580              		.loc 1 507 20 is_stmt 0 view .LVU894
 3581 002c 0120     		movs	r0, #1
 3582 002e F2E7     		b	.L304
 3583              	.LVL263:
ARM GAS  /tmp/ccXppZcm.s 			page 162


 3584              	.L305:
 509:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3585              		.loc 1 509 13 is_stmt 1 view .LVU895
 3586 0030 104D     		ldr	r5, .L313
 3587 0032 2146     		mov	r1, r4
 3588              	.LVL264:
 509:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3589              		.loc 1 509 13 is_stmt 0 view .LVU896
 3590 0034 2846     		mov	r0, r5
 3591              	.LVL265:
 509:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3592              		.loc 1 509 13 view .LVU897
 3593 0036 FFF7FEFF 		bl	mriContext_Get
 3594              	.LVL266:
 3595 003a 0246     		mov	r2, r0
 3596 003c 1421     		movs	r1, #20
 3597 003e 2846     		mov	r0, r5
 3598 0040 FFF7FEFF 		bl	mriContext_Set
 3599              	.LVL267:
 510:mri/architectures/armv7-m/armv7-m.c ****         case 18: // BASEPRI_MAX
 3600              		.loc 1 510 13 is_stmt 1 view .LVU898
 510:mri/architectures/armv7-m/armv7-m.c ****         case 18: // BASEPRI_MAX
 3601              		.loc 1 510 20 is_stmt 0 view .LVU899
 3602 0044 0120     		movs	r0, #1
 3603 0046 E6E7     		b	.L304
 3604              	.LVL268:
 3605              	.L306:
 3606              	.LBB307:
 513:mri/architectures/armv7-m/armv7-m.c ****             uint32_t RnVal = Context_Get(&mriCortexMState.context, Rn);
 3607              		.loc 1 513 13 is_stmt 1 view .LVU900
 513:mri/architectures/armv7-m/armv7-m.c ****             uint32_t RnVal = Context_Get(&mriCortexMState.context, Rn);
 3608              		.loc 1 513 35 is_stmt 0 view .LVU901
 3609 0048 0A4E     		ldr	r6, .L313
 3610 004a 1421     		movs	r1, #20
 3611              	.LVL269:
 513:mri/architectures/armv7-m/armv7-m.c ****             uint32_t RnVal = Context_Get(&mriCortexMState.context, Rn);
 3612              		.loc 1 513 35 view .LVU902
 3613 004c 3046     		mov	r0, r6
 3614              	.LVL270:
 513:mri/architectures/armv7-m/armv7-m.c ****             uint32_t RnVal = Context_Get(&mriCortexMState.context, Rn);
 3615              		.loc 1 513 35 view .LVU903
 3616 004e FFF7FEFF 		bl	mriContext_Get
 3617              	.LVL271:
 3618 0052 0546     		mov	r5, r0
 3619              	.LVL272:
 514:mri/architectures/armv7-m/armv7-m.c ****             if (basepriVal == 0 || RnVal < basepriVal)
 3620              		.loc 1 514 13 is_stmt 1 view .LVU904
 514:mri/architectures/armv7-m/armv7-m.c ****             if (basepriVal == 0 || RnVal < basepriVal)
 3621              		.loc 1 514 30 is_stmt 0 view .LVU905
 3622 0054 2146     		mov	r1, r4
 3623 0056 3046     		mov	r0, r6
 3624              	.LVL273:
 514:mri/architectures/armv7-m/armv7-m.c ****             if (basepriVal == 0 || RnVal < basepriVal)
 3625              		.loc 1 514 30 view .LVU906
 3626 0058 FFF7FEFF 		bl	mriContext_Get
 3627              	.LVL274:
 3628 005c 0246     		mov	r2, r0
ARM GAS  /tmp/ccXppZcm.s 			page 163


 3629              	.LVL275:
 515:mri/architectures/armv7-m/armv7-m.c ****             {
 3630              		.loc 1 515 13 is_stmt 1 view .LVU907
 515:mri/architectures/armv7-m/armv7-m.c ****             {
 3631              		.loc 1 515 16 is_stmt 0 view .LVU908
 3632 005e 0DB1     		cbz	r5, .L308
 515:mri/architectures/armv7-m/armv7-m.c ****             {
 3633              		.loc 1 515 33 discriminator 1 view .LVU909
 3634 0060 8542     		cmp	r5, r0
 3635 0062 05D9     		bls	.L310
 3636              	.L308:
 517:mri/architectures/armv7-m/armv7-m.c ****             }
 3637              		.loc 1 517 17 is_stmt 1 view .LVU910
 3638 0064 1421     		movs	r1, #20
 3639 0066 0348     		ldr	r0, .L313
 3640              	.LVL276:
 517:mri/architectures/armv7-m/armv7-m.c ****             }
 3641              		.loc 1 517 17 is_stmt 0 view .LVU911
 3642 0068 FFF7FEFF 		bl	mriContext_Set
 3643              	.LVL277:
 519:mri/architectures/armv7-m/armv7-m.c ****         }
 3644              		.loc 1 519 20 view .LVU912
 3645 006c 0120     		movs	r0, #1
 3646 006e D2E7     		b	.L304
 3647              	.LVL278:
 3648              	.L310:
 519:mri/architectures/armv7-m/armv7-m.c ****         }
 3649              		.loc 1 519 20 view .LVU913
 3650 0070 0120     		movs	r0, #1
 3651              	.LVL279:
 519:mri/architectures/armv7-m/armv7-m.c ****         }
 3652              		.loc 1 519 20 view .LVU914
 3653 0072 D0E7     		b	.L304
 3654              	.L314:
 3655              		.align	2
 3656              	.L313:
 3657 0074 00000000 		.word	mriCortexMState
 3658              	.LBE307:
 3659              		.cfi_endproc
 3660              	.LFE250:
 3662              		.section	.text.processInstructionMRS,"ax",%progbits
 3663              		.align	1
 3664              		.syntax unified
 3665              		.thumb
 3666              		.thumb_func
 3668              	processInstructionMRS:
 3669              	.LVL280:
 3670              	.LFB254:
 550:mri/architectures/armv7-m/armv7-m.c ****     uint16_t Rn = (secondWord & 0x0F00) >> 8;
 3671              		.loc 1 550 1 is_stmt 1 view -0
 3672              		.cfi_startproc
 3673              		@ args = 0, pretend = 0, frame = 0
 3674              		@ frame_needed = 0, uses_anonymous_args = 0
 550:mri/architectures/armv7-m/armv7-m.c ****     uint16_t Rn = (secondWord & 0x0F00) >> 8;
 3675              		.loc 1 550 1 is_stmt 0 view .LVU916
 3676 0000 38B5     		push	{r3, r4, r5, lr}
 3677              	.LCFI21:
ARM GAS  /tmp/ccXppZcm.s 			page 164


 3678              		.cfi_def_cfa_offset 16
 3679              		.cfi_offset 3, -16
 3680              		.cfi_offset 4, -12
 3681              		.cfi_offset 5, -8
 3682              		.cfi_offset 14, -4
 551:mri/architectures/armv7-m/armv7-m.c ****     uint16_t SYSm = secondWord & 0x00FF;
 3683              		.loc 1 551 5 is_stmt 1 view .LVU917
 551:mri/architectures/armv7-m/armv7-m.c ****     uint16_t SYSm = secondWord & 0x00FF;
 3684              		.loc 1 551 14 is_stmt 0 view .LVU918
 3685 0002 C1F30324 		ubfx	r4, r1, #8, #4
 3686              	.LVL281:
 552:mri/architectures/armv7-m/armv7-m.c **** 
 3687              		.loc 1 552 5 is_stmt 1 view .LVU919
 552:mri/architectures/armv7-m/armv7-m.c **** 
 3688              		.loc 1 552 14 is_stmt 0 view .LVU920
 3689 0006 C9B2     		uxtb	r1, r1
 3690              	.LVL282:
 554:mri/architectures/armv7-m/armv7-m.c ****     {
 3691              		.loc 1 554 5 is_stmt 1 view .LVU921
 3692 0008 1029     		cmp	r1, #16
 3693 000a 10D0     		beq	.L316
 3694 000c 1BD3     		bcc	.L319
 3695 000e 1139     		subs	r1, r1, #17
 3696              	.LVL283:
 554:mri/architectures/armv7-m/armv7-m.c ****     {
 3697              		.loc 1 554 5 is_stmt 0 view .LVU922
 3698 0010 89B2     		uxth	r1, r1
 3699              	.LVL284:
 554:mri/architectures/armv7-m/armv7-m.c ****     {
 3700              		.loc 1 554 5 view .LVU923
 3701 0012 0129     		cmp	r1, #1
 3702 0014 19D8     		bhi	.L323
 561:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3703              		.loc 1 561 13 is_stmt 1 view .LVU924
 3704 0016 0E4D     		ldr	r5, .L324
 3705 0018 1421     		movs	r1, #20
 3706 001a 2846     		mov	r0, r5
 3707              	.LVL285:
 561:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3708              		.loc 1 561 13 is_stmt 0 view .LVU925
 3709 001c FFF7FEFF 		bl	mriContext_Get
 3710              	.LVL286:
 3711 0020 0246     		mov	r2, r0
 3712 0022 2146     		mov	r1, r4
 3713 0024 2846     		mov	r0, r5
 3714 0026 FFF7FEFF 		bl	mriContext_Set
 3715              	.LVL287:
 562:mri/architectures/armv7-m/armv7-m.c ****         default:
 3716              		.loc 1 562 13 is_stmt 1 view .LVU926
 562:mri/architectures/armv7-m/armv7-m.c ****         default:
 3717              		.loc 1 562 20 is_stmt 0 view .LVU927
 3718 002a 0120     		movs	r0, #1
 3719 002c 0AE0     		b	.L315
 3720              	.LVL288:
 3721              	.L316:
 557:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3722              		.loc 1 557 13 is_stmt 1 view .LVU928
ARM GAS  /tmp/ccXppZcm.s 			page 165


 3723 002e 084D     		ldr	r5, .L324
 3724 0030 1321     		movs	r1, #19
 3725              	.LVL289:
 557:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3726              		.loc 1 557 13 is_stmt 0 view .LVU929
 3727 0032 2846     		mov	r0, r5
 3728              	.LVL290:
 557:mri/architectures/armv7-m/armv7-m.c ****             return 1;
 3729              		.loc 1 557 13 view .LVU930
 3730 0034 FFF7FEFF 		bl	mriContext_Get
 3731              	.LVL291:
 3732 0038 0246     		mov	r2, r0
 3733 003a 2146     		mov	r1, r4
 3734 003c 2846     		mov	r0, r5
 3735 003e FFF7FEFF 		bl	mriContext_Set
 3736              	.LVL292:
 558:mri/architectures/armv7-m/armv7-m.c ****         case 17: // BASEPRI
 3737              		.loc 1 558 13 is_stmt 1 view .LVU931
 558:mri/architectures/armv7-m/armv7-m.c ****         case 17: // BASEPRI
 3738              		.loc 1 558 20 is_stmt 0 view .LVU932
 3739 0042 0120     		movs	r0, #1
 3740              	.L315:
 566:mri/architectures/armv7-m/armv7-m.c **** 
 3741              		.loc 1 566 1 view .LVU933
 3742 0044 38BD     		pop	{r3, r4, r5, pc}
 3743              	.LVL293:
 3744              	.L319:
 554:mri/architectures/armv7-m/armv7-m.c ****     {
 3745              		.loc 1 554 5 view .LVU934
 3746 0046 0020     		movs	r0, #0
 3747              	.LVL294:
 554:mri/architectures/armv7-m/armv7-m.c ****     {
 3748              		.loc 1 554 5 view .LVU935
 3749 0048 FCE7     		b	.L315
 3750              	.LVL295:
 3751              	.L323:
 554:mri/architectures/armv7-m/armv7-m.c ****     {
 3752              		.loc 1 554 5 view .LVU936
 3753 004a 0020     		movs	r0, #0
 3754              	.LVL296:
 554:mri/architectures/armv7-m/armv7-m.c ****     {
 3755              		.loc 1 554 5 view .LVU937
 3756 004c FAE7     		b	.L315
 3757              	.L325:
 3758 004e 00BF     		.align	2
 3759              	.L324:
 3760 0050 00000000 		.word	mriCortexMState
 3761              		.cfi_endproc
 3762              	.LFE254:
 3764              		.section	.text.recordCurrentPriorityRegs,"ax",%progbits
 3765              		.align	1
 3766              		.syntax unified
 3767              		.thumb
 3768              		.thumb_func
 3770              	recordCurrentPriorityRegs:
 3771              	.LFB256:
 577:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.primask = Context_Get(&mriCortexMState.context, PRIMASK);
ARM GAS  /tmp/ccXppZcm.s 			page 166


 3772              		.loc 1 577 1 is_stmt 1 view -0
 3773              		.cfi_startproc
 3774              		@ args = 0, pretend = 0, frame = 0
 3775              		@ frame_needed = 0, uses_anonymous_args = 0
 3776 0000 10B5     		push	{r4, lr}
 3777              	.LCFI22:
 3778              		.cfi_def_cfa_offset 8
 3779              		.cfi_offset 4, -8
 3780              		.cfi_offset 14, -4
 578:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.basepri = Context_Get(&mriCortexMState.context, BASEPRI);
 3781              		.loc 1 578 5 view .LVU939
 578:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.basepri = Context_Get(&mriCortexMState.context, BASEPRI);
 3782              		.loc 1 578 31 is_stmt 0 view .LVU940
 3783 0002 074C     		ldr	r4, .L328
 3784 0004 1321     		movs	r1, #19
 3785 0006 2046     		mov	r0, r4
 3786 0008 FFF7FEFF 		bl	mriContext_Get
 3787              	.LVL297:
 578:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.basepri = Context_Get(&mriCortexMState.context, BASEPRI);
 3788              		.loc 1 578 29 view .LVU941
 3789 000c A063     		str	r0, [r4, #56]
 579:mri/architectures/armv7-m/armv7-m.c ****     setRestorePriorityRegsFlag();
 3790              		.loc 1 579 5 is_stmt 1 view .LVU942
 579:mri/architectures/armv7-m/armv7-m.c ****     setRestorePriorityRegsFlag();
 3791              		.loc 1 579 31 is_stmt 0 view .LVU943
 3792 000e 1421     		movs	r1, #20
 3793 0010 2046     		mov	r0, r4
 3794 0012 FFF7FEFF 		bl	mriContext_Get
 3795              	.LVL298:
 579:mri/architectures/armv7-m/armv7-m.c ****     setRestorePriorityRegsFlag();
 3796              		.loc 1 579 29 view .LVU944
 3797 0016 6063     		str	r0, [r4, #52]
 580:mri/architectures/armv7-m/armv7-m.c **** }
 3798              		.loc 1 580 5 is_stmt 1 view .LVU945
 3799 0018 FFF7FEFF 		bl	setRestorePriorityRegsFlag
 3800              	.LVL299:
 581:mri/architectures/armv7-m/armv7-m.c **** 
 3801              		.loc 1 581 1 is_stmt 0 view .LVU946
 3802 001c 10BD     		pop	{r4, pc}
 3803              	.L329:
 3804 001e 00BF     		.align	2
 3805              	.L328:
 3806 0020 00000000 		.word	mriCortexMState
 3807              		.cfi_endproc
 3808              	.LFE256:
 3810              		.section	.rodata.displayMemFaultCauseToGdbConsole.str1.4,"aMS",%progbits,1
 3811              		.align	2
 3812              	.LC0:
 3813 0000 0A2A2A4D 		.ascii	"\012**MPU Fault**\000"
 3813      50552046 
 3813      61756C74 
 3813      2A2A00
 3814 000f 00       		.align	2
 3815              	.LC1:
 3816 0010 0A202053 		.ascii	"\012  Status Register: \000"
 3816      74617475 
 3816      73205265 
ARM GAS  /tmp/ccXppZcm.s 			page 167


 3816      67697374 
 3816      65723A20 
 3817 0025 000000   		.align	2
 3818              	.LC2:
 3819 0028 0A202020 		.ascii	"\012    Fault Address: \000"
 3819      20466175 
 3819      6C742041 
 3819      64647265 
 3819      73733A20 
 3820 003d 000000   		.align	2
 3821              	.LC3:
 3822 0040 0A202020 		.ascii	"\012    FP Lazy Preservation\000"
 3822      20465020 
 3822      4C617A79 
 3822      20507265 
 3822      73657276 
 3823 005a 0000     		.align	2
 3824              	.LC4:
 3825 005c 0A202020 		.ascii	"\012    Stacking Error w/ SP = \000"
 3825      20537461 
 3825      636B696E 
 3825      67204572 
 3825      726F7220 
 3826 0079 000000   		.align	2
 3827              	.LC5:
 3828 007c 0A202020 		.ascii	"\012    Unstacking Error w/ SP = \000"
 3828      20556E73 
 3828      7461636B 
 3828      696E6720 
 3828      4572726F 
 3829 009b 00       		.align	2
 3830              	.LC6:
 3831 009c 0A202020 		.ascii	"\012    Data Access\000"
 3831      20446174 
 3831      61204163 
 3831      63657373 
 3831      00
 3832 00ad 000000   		.align	2
 3833              	.LC7:
 3834 00b0 0A202020 		.ascii	"\012    Instruction Fetch\000"
 3834      20496E73 
 3834      74727563 
 3834      74696F6E 
 3834      20466574 
 3835              		.section	.text.displayMemFaultCauseToGdbConsole,"ax",%progbits
 3836              		.align	1
 3837              		.syntax unified
 3838              		.thumb
 3839              		.thumb_func
 3841              	displayMemFaultCauseToGdbConsole:
 3842              	.LFB272:
 828:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t MMARValidBit = 1 << 7;
 3843              		.loc 1 828 1 is_stmt 1 view -0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 0, uses_anonymous_args = 0
 3847 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccXppZcm.s 			page 168


 3848              	.LCFI23:
 3849              		.cfi_def_cfa_offset 16
 3850              		.cfi_offset 3, -16
 3851              		.cfi_offset 4, -12
 3852              		.cfi_offset 5, -8
 3853              		.cfi_offset 14, -4
 829:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t FPLazyStatePreservationBit = 1 << 5;
 3854              		.loc 1 829 5 view .LVU948
 830:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t stackingErrorBit = 1 << 4;
 3855              		.loc 1 830 5 view .LVU949
 831:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t unstackingErrorBit = 1 << 3;
 3856              		.loc 1 831 5 view .LVU950
 832:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t dataAccess = 1 << 1;
 3857              		.loc 1 832 5 view .LVU951
 833:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t instructionFetch = 1;
 3858              		.loc 1 833 5 view .LVU952
 834:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              memManageFaultStatusRegister = mriCortexMState.cfsr & 0xFF;
 3859              		.loc 1 834 5 view .LVU953
 835:mri/architectures/armv7-m/armv7-m.c **** 
 3860              		.loc 1 835 5 view .LVU954
 835:mri/architectures/armv7-m/armv7-m.c **** 
 3861              		.loc 1 835 73 is_stmt 0 view .LVU955
 3862 0002 224B     		ldr	r3, .L344
 3863 0004 5C6A     		ldr	r4, [r3, #36]
 3864              	.LVL300:
 838:mri/architectures/armv7-m/armv7-m.c ****         return;
 3865              		.loc 1 838 5 is_stmt 1 view .LVU956
 838:mri/architectures/armv7-m/armv7-m.c ****         return;
 3866              		.loc 1 838 8 is_stmt 0 view .LVU957
 3867 0006 14F0FF05 		ands	r5, r4, #255
 3868 000a 00D1     		bne	.L338
 3869              	.L330:
 868:mri/architectures/armv7-m/armv7-m.c **** 
 3870              		.loc 1 868 1 view .LVU958
 3871 000c 38BD     		pop	{r3, r4, r5, pc}
 3872              	.LVL301:
 3873              	.L338:
 841:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 3874              		.loc 1 841 5 is_stmt 1 view .LVU959
 3875 000e 2048     		ldr	r0, .L344+4
 3876 0010 FFF7FEFF 		bl	mriGdbConsole_WriteString
 3877              	.LVL302:
 842:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(memManageFaultStatusRegister);
 3878              		.loc 1 842 5 view .LVU960
 3879 0014 1F48     		ldr	r0, .L344+8
 3880 0016 FFF7FEFF 		bl	mriGdbConsole_WriteString
 3881              	.LVL303:
 843:mri/architectures/armv7-m/armv7-m.c **** 
 3882              		.loc 1 843 5 view .LVU961
 3883 001a 2846     		mov	r0, r5
 3884 001c FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 3885              	.LVL304:
 845:mri/architectures/armv7-m/armv7-m.c ****     {
 3886              		.loc 1 845 5 view .LVU962
 845:mri/architectures/armv7-m/armv7-m.c ****     {
 3887              		.loc 1 845 8 is_stmt 0 view .LVU963
 3888 0020 14F0800F 		tst	r4, #128
ARM GAS  /tmp/ccXppZcm.s 			page 169


 3889 0024 12D1     		bne	.L339
 3890              	.L332:
 850:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    FP Lazy Preservation");
 3891              		.loc 1 850 5 is_stmt 1 view .LVU964
 850:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    FP Lazy Preservation");
 3892              		.loc 1 850 8 is_stmt 0 view .LVU965
 3893 0026 14F0200F 		tst	r4, #32
 3894 002a 17D1     		bne	.L340
 3895              	.L333:
 853:mri/architectures/armv7-m/armv7-m.c ****     {
 3896              		.loc 1 853 5 is_stmt 1 view .LVU966
 853:mri/architectures/armv7-m/armv7-m.c ****     {
 3897              		.loc 1 853 8 is_stmt 0 view .LVU967
 3898 002c 14F0100F 		tst	r4, #16
 3899 0030 18D1     		bne	.L341
 3900              	.L334:
 858:mri/architectures/armv7-m/armv7-m.c ****     {
 3901              		.loc 1 858 5 is_stmt 1 view .LVU968
 858:mri/architectures/armv7-m/armv7-m.c ****     {
 3902              		.loc 1 858 8 is_stmt 0 view .LVU969
 3903 0032 14F0080F 		tst	r4, #8
 3904 0036 1DD1     		bne	.L342
 3905              	.L335:
 863:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Data Access");
 3906              		.loc 1 863 5 is_stmt 1 view .LVU970
 863:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Data Access");
 3907              		.loc 1 863 8 is_stmt 0 view .LVU971
 3908 0038 14F0020F 		tst	r4, #2
 3909 003c 22D1     		bne	.L343
 3910              	.L336:
 866:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Instruction Fetch");
 3911              		.loc 1 866 5 is_stmt 1 view .LVU972
 866:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Instruction Fetch");
 3912              		.loc 1 866 8 is_stmt 0 view .LVU973
 3913 003e 14F0010F 		tst	r4, #1
 3914 0042 E3D0     		beq	.L330
 867:mri/architectures/armv7-m/armv7-m.c **** }
 3915              		.loc 1 867 9 is_stmt 1 view .LVU974
 3916 0044 1448     		ldr	r0, .L344+12
 3917 0046 FFF7FEFF 		bl	mriGdbConsole_WriteString
 3918              	.LVL305:
 3919 004a DFE7     		b	.L330
 3920              	.L339:
 847:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.mmfar);
 3921              		.loc 1 847 9 view .LVU975
 3922 004c 1348     		ldr	r0, .L344+16
 3923 004e FFF7FEFF 		bl	mriGdbConsole_WriteString
 3924              	.LVL306:
 848:mri/architectures/armv7-m/armv7-m.c ****     }
 3925              		.loc 1 848 9 view .LVU976
 3926 0052 0E4B     		ldr	r3, .L344
 3927 0054 986A     		ldr	r0, [r3, #40]
 3928 0056 FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 3929              	.LVL307:
 3930 005a E4E7     		b	.L332
 3931              	.L340:
 851:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 170


 3932              		.loc 1 851 9 view .LVU977
 3933 005c 1048     		ldr	r0, .L344+20
 3934 005e FFF7FEFF 		bl	mriGdbConsole_WriteString
 3935              	.LVL308:
 3936 0062 E3E7     		b	.L333
 3937              	.L341:
 855:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 3938              		.loc 1 855 9 view .LVU978
 3939 0064 0F48     		ldr	r0, .L344+24
 3940 0066 FFF7FEFF 		bl	mriGdbConsole_WriteString
 3941              	.LVL309:
 856:mri/architectures/armv7-m/armv7-m.c ****     }
 3942              		.loc 1 856 9 view .LVU979
 3943 006a 084B     		ldr	r3, .L344
 3944 006c 1869     		ldr	r0, [r3, #16]
 3945 006e FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 3946              	.LVL310:
 3947 0072 DEE7     		b	.L334
 3948              	.L342:
 860:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 3949              		.loc 1 860 9 view .LVU980
 3950 0074 0C48     		ldr	r0, .L344+28
 3951 0076 FFF7FEFF 		bl	mriGdbConsole_WriteString
 3952              	.LVL311:
 861:mri/architectures/armv7-m/armv7-m.c ****     }
 3953              		.loc 1 861 9 view .LVU981
 3954 007a 044B     		ldr	r3, .L344
 3955 007c 1869     		ldr	r0, [r3, #16]
 3956 007e FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 3957              	.LVL312:
 3958 0082 D9E7     		b	.L335
 3959              	.L343:
 864:mri/architectures/armv7-m/armv7-m.c **** 
 3960              		.loc 1 864 9 view .LVU982
 3961 0084 0948     		ldr	r0, .L344+32
 3962 0086 FFF7FEFF 		bl	mriGdbConsole_WriteString
 3963              	.LVL313:
 3964 008a D8E7     		b	.L336
 3965              	.L345:
 3966              		.align	2
 3967              	.L344:
 3968 008c 00000000 		.word	mriCortexMState
 3969 0090 00000000 		.word	.LC0
 3970 0094 10000000 		.word	.LC1
 3971 0098 B0000000 		.word	.LC7
 3972 009c 28000000 		.word	.LC2
 3973 00a0 40000000 		.word	.LC3
 3974 00a4 5C000000 		.word	.LC4
 3975 00a8 7C000000 		.word	.LC5
 3976 00ac 9C000000 		.word	.LC6
 3977              		.cfi_endproc
 3978              	.LFE272:
 3980              		.section	.rodata.displayBusFaultCauseToGdbConsole.str1.4,"aMS",%progbits,1
 3981              		.align	2
 3982              	.LC8:
 3983 0000 0A2A2A42 		.ascii	"\012**Bus Fault**\000"
 3983      75732046 
ARM GAS  /tmp/ccXppZcm.s 			page 171


 3983      61756C74 
 3983      2A2A00
 3984 000f 00       		.align	2
 3985              	.LC9:
 3986 0010 0A202020 		.ascii	"\012    Imprecise Data Access\000"
 3986      20496D70 
 3986      72656369 
 3986      73652044 
 3986      61746120 
 3987 002b 00       		.align	2
 3988              	.LC10:
 3989 002c 0A202020 		.ascii	"\012    Precise Data Access\000"
 3989      20507265 
 3989      63697365 
 3989      20446174 
 3989      61204163 
 3990 0045 000000   		.align	2
 3991              	.LC11:
 3992 0048 0A202020 		.ascii	"\012    Instruction Prefetch\000"
 3992      20496E73 
 3992      74727563 
 3992      74696F6E 
 3992      20507265 
 3993              		.section	.text.displayBusFaultCauseToGdbConsole,"ax",%progbits
 3994              		.align	1
 3995              		.syntax unified
 3996              		.thumb
 3997              		.thumb_func
 3999              	displayBusFaultCauseToGdbConsole:
 4000              	.LFB273:
 871:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t BFARValidBit = 1 << 7;
 4001              		.loc 1 871 1 view -0
 4002              		.cfi_startproc
 4003              		@ args = 0, pretend = 0, frame = 0
 4004              		@ frame_needed = 0, uses_anonymous_args = 0
 4005 0000 38B5     		push	{r3, r4, r5, lr}
 4006              	.LCFI24:
 4007              		.cfi_def_cfa_offset 16
 4008              		.cfi_offset 3, -16
 4009              		.cfi_offset 4, -12
 4010              		.cfi_offset 5, -8
 4011              		.cfi_offset 14, -4
 872:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t FPLazyStatePreservationBit = 1 << 5;
 4012              		.loc 1 872 5 view .LVU984
 873:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t stackingErrorBit = 1 << 4;
 4013              		.loc 1 873 5 view .LVU985
 874:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t unstackingErrorBit = 1 << 3;
 4014              		.loc 1 874 5 view .LVU986
 875:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t impreciseDataAccessBit = 1 << 2;
 4015              		.loc 1 875 5 view .LVU987
 876:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t preciseDataAccessBit = 1 << 1;
 4016              		.loc 1 876 5 view .LVU988
 877:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t instructionPrefetch = 1;
 4017              		.loc 1 877 5 view .LVU989
 878:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              busFaultStatusRegister = (mriCortexMState.cfsr >> 8) & 0xFF;
 4018              		.loc 1 878 5 view .LVU990
 879:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 172


 4019              		.loc 1 879 5 view .LVU991
 879:mri/architectures/armv7-m/armv7-m.c **** 
 4020              		.loc 1 879 68 is_stmt 0 view .LVU992
 4021 0002 274B     		ldr	r3, .L362
 4022 0004 5B6A     		ldr	r3, [r3, #36]
 879:mri/architectures/armv7-m/armv7-m.c **** 
 4023              		.loc 1 879 27 view .LVU993
 4024 0006 C3F30725 		ubfx	r5, r3, #8, #8
 4025              	.LVL314:
 882:mri/architectures/armv7-m/armv7-m.c ****         return;
 4026              		.loc 1 882 5 is_stmt 1 view .LVU994
 882:mri/architectures/armv7-m/armv7-m.c ****         return;
 4027              		.loc 1 882 8 is_stmt 0 view .LVU995
 4028 000a 13F47F4F 		tst	r3, #65280
 4029 000e 00D1     		bne	.L355
 4030              	.L346:
 915:mri/architectures/armv7-m/armv7-m.c **** 
 4031              		.loc 1 915 1 view .LVU996
 4032 0010 38BD     		pop	{r3, r4, r5, pc}
 4033              	.LVL315:
 4034              	.L355:
 915:mri/architectures/armv7-m/armv7-m.c **** 
 4035              		.loc 1 915 1 view .LVU997
 4036 0012 1C0A     		lsrs	r4, r3, #8
 885:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 4037              		.loc 1 885 5 is_stmt 1 view .LVU998
 4038 0014 2348     		ldr	r0, .L362+4
 4039 0016 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4040              	.LVL316:
 886:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(busFaultStatusRegister);
 4041              		.loc 1 886 5 view .LVU999
 4042 001a 2348     		ldr	r0, .L362+8
 4043 001c FFF7FEFF 		bl	mriGdbConsole_WriteString
 4044              	.LVL317:
 887:mri/architectures/armv7-m/armv7-m.c **** 
 4045              		.loc 1 887 5 view .LVU1000
 4046 0020 2846     		mov	r0, r5
 4047 0022 FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 4048              	.LVL318:
 889:mri/architectures/armv7-m/armv7-m.c ****     {
 4049              		.loc 1 889 5 view .LVU1001
 889:mri/architectures/armv7-m/armv7-m.c ****     {
 4050              		.loc 1 889 8 is_stmt 0 view .LVU1002
 4051 0026 14F0800F 		tst	r4, #128
 4052 002a 15D1     		bne	.L356
 4053              	.L348:
 894:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    FP Lazy Preservation");
 4054              		.loc 1 894 5 is_stmt 1 view .LVU1003
 894:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    FP Lazy Preservation");
 4055              		.loc 1 894 8 is_stmt 0 view .LVU1004
 4056 002c 14F0200F 		tst	r4, #32
 4057 0030 1AD1     		bne	.L357
 4058              	.L349:
 897:mri/architectures/armv7-m/armv7-m.c ****     {
 4059              		.loc 1 897 5 is_stmt 1 view .LVU1005
 897:mri/architectures/armv7-m/armv7-m.c ****     {
 4060              		.loc 1 897 8 is_stmt 0 view .LVU1006
ARM GAS  /tmp/ccXppZcm.s 			page 173


 4061 0032 14F0100F 		tst	r4, #16
 4062 0036 1BD1     		bne	.L358
 4063              	.L350:
 902:mri/architectures/armv7-m/armv7-m.c ****     {
 4064              		.loc 1 902 5 is_stmt 1 view .LVU1007
 902:mri/architectures/armv7-m/armv7-m.c ****     {
 4065              		.loc 1 902 8 is_stmt 0 view .LVU1008
 4066 0038 14F0080F 		tst	r4, #8
 4067 003c 20D1     		bne	.L359
 4068              	.L351:
 907:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Imprecise Data Access");
 4069              		.loc 1 907 5 is_stmt 1 view .LVU1009
 907:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Imprecise Data Access");
 4070              		.loc 1 907 8 is_stmt 0 view .LVU1010
 4071 003e 14F0040F 		tst	r4, #4
 4072 0042 25D1     		bne	.L360
 4073              	.L352:
 910:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Precise Data Access");
 4074              		.loc 1 910 5 is_stmt 1 view .LVU1011
 910:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Precise Data Access");
 4075              		.loc 1 910 8 is_stmt 0 view .LVU1012
 4076 0044 14F0020F 		tst	r4, #2
 4077 0048 26D1     		bne	.L361
 4078              	.L353:
 913:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Instruction Prefetch");
 4079              		.loc 1 913 5 is_stmt 1 view .LVU1013
 913:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Instruction Prefetch");
 4080              		.loc 1 913 8 is_stmt 0 view .LVU1014
 4081 004a 14F0010F 		tst	r4, #1
 4082 004e DFD0     		beq	.L346
 914:mri/architectures/armv7-m/armv7-m.c **** }
 4083              		.loc 1 914 9 is_stmt 1 view .LVU1015
 4084 0050 1648     		ldr	r0, .L362+12
 4085 0052 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4086              	.LVL319:
 4087 0056 DBE7     		b	.L346
 4088              	.L356:
 891:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.bfar);
 4089              		.loc 1 891 9 view .LVU1016
 4090 0058 1548     		ldr	r0, .L362+16
 4091 005a FFF7FEFF 		bl	mriGdbConsole_WriteString
 4092              	.LVL320:
 892:mri/architectures/armv7-m/armv7-m.c ****     }
 4093              		.loc 1 892 9 view .LVU1017
 4094 005e 104B     		ldr	r3, .L362
 4095 0060 D86A     		ldr	r0, [r3, #44]
 4096 0062 FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 4097              	.LVL321:
 4098 0066 E1E7     		b	.L348
 4099              	.L357:
 895:mri/architectures/armv7-m/armv7-m.c **** 
 4100              		.loc 1 895 9 view .LVU1018
 4101 0068 1248     		ldr	r0, .L362+20
 4102 006a FFF7FEFF 		bl	mriGdbConsole_WriteString
 4103              	.LVL322:
 4104 006e E0E7     		b	.L349
 4105              	.L358:
ARM GAS  /tmp/ccXppZcm.s 			page 174


 899:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 4106              		.loc 1 899 9 view .LVU1019
 4107 0070 1148     		ldr	r0, .L362+24
 4108 0072 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4109              	.LVL323:
 900:mri/architectures/armv7-m/armv7-m.c ****     }
 4110              		.loc 1 900 9 view .LVU1020
 4111 0076 0A4B     		ldr	r3, .L362
 4112 0078 1869     		ldr	r0, [r3, #16]
 4113 007a FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 4114              	.LVL324:
 4115 007e DBE7     		b	.L350
 4116              	.L359:
 904:mri/architectures/armv7-m/armv7-m.c ****         WriteHexValueToGdbConsole(mriCortexMState.taskSP);
 4117              		.loc 1 904 9 view .LVU1021
 4118 0080 0E48     		ldr	r0, .L362+28
 4119 0082 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4120              	.LVL325:
 905:mri/architectures/armv7-m/armv7-m.c ****     }
 4121              		.loc 1 905 9 view .LVU1022
 4122 0086 064B     		ldr	r3, .L362
 4123 0088 1869     		ldr	r0, [r3, #16]
 4124 008a FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 4125              	.LVL326:
 4126 008e D6E7     		b	.L351
 4127              	.L360:
 908:mri/architectures/armv7-m/armv7-m.c **** 
 4128              		.loc 1 908 9 view .LVU1023
 4129 0090 0B48     		ldr	r0, .L362+32
 4130 0092 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4131              	.LVL327:
 4132 0096 D5E7     		b	.L352
 4133              	.L361:
 911:mri/architectures/armv7-m/armv7-m.c **** 
 4134              		.loc 1 911 9 view .LVU1024
 4135 0098 0A48     		ldr	r0, .L362+36
 4136 009a FFF7FEFF 		bl	mriGdbConsole_WriteString
 4137              	.LVL328:
 4138 009e D4E7     		b	.L353
 4139              	.L363:
 4140              		.align	2
 4141              	.L362:
 4142 00a0 00000000 		.word	mriCortexMState
 4143 00a4 00000000 		.word	.LC8
 4144 00a8 10000000 		.word	.LC1
 4145 00ac 48000000 		.word	.LC11
 4146 00b0 28000000 		.word	.LC2
 4147 00b4 40000000 		.word	.LC3
 4148 00b8 5C000000 		.word	.LC4
 4149 00bc 7C000000 		.word	.LC5
 4150 00c0 10000000 		.word	.LC9
 4151 00c4 2C000000 		.word	.LC10
 4152              		.cfi_endproc
 4153              	.LFE273:
 4155              		.section	.rodata.displayUsageFaultCauseToGdbConsole.str1.4,"aMS",%progbits,1
 4156              		.align	2
 4157              	.LC12:
ARM GAS  /tmp/ccXppZcm.s 			page 175


 4158 0000 0A2A2A55 		.ascii	"\012**Usage Fault**\000"
 4158      73616765 
 4158      20466175 
 4158      6C742A2A 
 4158      00
 4159 0011 000000   		.align	2
 4160              	.LC13:
 4161 0014 0A202020 		.ascii	"\012    Divide by Zero\000"
 4161      20446976 
 4161      69646520 
 4161      6279205A 
 4161      65726F00 
 4162              		.align	2
 4163              	.LC14:
 4164 0028 0A202020 		.ascii	"\012    Unaligned Access\000"
 4164      20556E61 
 4164      6C69676E 
 4164      65642041 
 4164      63636573 
 4165 003e 0000     		.align	2
 4166              	.LC15:
 4167 0040 0A202020 		.ascii	"\012    Coprocessor Access\000"
 4167      20436F70 
 4167      726F6365 
 4167      73736F72 
 4167      20416363 
 4168              		.align	2
 4169              	.LC16:
 4170 0058 0A202020 		.ascii	"\012    Invalid Exception Return State\000"
 4170      20496E76 
 4170      616C6964 
 4170      20457863 
 4170      65707469 
 4171              		.align	2
 4172              	.LC17:
 4173 007c 0A202020 		.ascii	"\012    Invalid State\000"
 4173      20496E76 
 4173      616C6964 
 4173      20537461 
 4173      746500
 4174 008f 00       		.align	2
 4175              	.LC18:
 4176 0090 0A202020 		.ascii	"\012    Undefined Instruction\000"
 4176      20556E64 
 4176      6566696E 
 4176      65642049 
 4176      6E737472 
 4177              		.section	.text.displayUsageFaultCauseToGdbConsole,"ax",%progbits
 4178              		.align	1
 4179              		.syntax unified
 4180              		.thumb
 4181              		.thumb_func
 4183              	displayUsageFaultCauseToGdbConsole:
 4184              	.LFB274:
 918:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t divideByZeroBit = 1 << 9;
 4185              		.loc 1 918 1 view -0
 4186              		.cfi_startproc
ARM GAS  /tmp/ccXppZcm.s 			page 176


 4187              		@ args = 0, pretend = 0, frame = 0
 4188              		@ frame_needed = 0, uses_anonymous_args = 0
 4189 0000 10B5     		push	{r4, lr}
 4190              	.LCFI25:
 4191              		.cfi_def_cfa_offset 8
 4192              		.cfi_offset 4, -8
 4193              		.cfi_offset 14, -4
 919:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t unalignedBit = 1 << 8;
 4194              		.loc 1 919 5 view .LVU1026
 920:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t coProcessorAccessBit = 1 << 3;
 4195              		.loc 1 920 5 view .LVU1027
 921:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t invalidPCBit = 1 << 2;
 4196              		.loc 1 921 5 view .LVU1028
 922:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t invalidStateBit = 1 << 1;
 4197              		.loc 1 922 5 view .LVU1029
 923:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t undefinedInstructionBit = 1;
 4198              		.loc 1 923 5 view .LVU1030
 924:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              usageFaultStatusRegister = mriCortexMState.cfsr >> 16;
 4199              		.loc 1 924 5 view .LVU1031
 925:mri/architectures/armv7-m/armv7-m.c **** 
 4200              		.loc 1 925 5 view .LVU1032
 925:mri/architectures/armv7-m/armv7-m.c **** 
 4201              		.loc 1 925 27 is_stmt 0 view .LVU1033
 4202 0002 1B4B     		ldr	r3, .L378
 4203 0004 DC8C     		ldrh	r4, [r3, #38]
 4204              	.LVL329:
 928:mri/architectures/armv7-m/armv7-m.c ****         return;
 4205              		.loc 1 928 5 is_stmt 1 view .LVU1034
 928:mri/architectures/armv7-m/armv7-m.c ****         return;
 4206              		.loc 1 928 8 is_stmt 0 view .LVU1035
 4207 0006 04B9     		cbnz	r4, .L372
 4208              	.L364:
 952:mri/architectures/armv7-m/armv7-m.c **** 
 4209              		.loc 1 952 1 view .LVU1036
 4210 0008 10BD     		pop	{r4, pc}
 4211              	.LVL330:
 4212              	.L372:
 931:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 4213              		.loc 1 931 5 is_stmt 1 view .LVU1037
 4214 000a 1A48     		ldr	r0, .L378+4
 4215 000c FFF7FEFF 		bl	mriGdbConsole_WriteString
 4216              	.LVL331:
 932:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(usageFaultStatusRegister);
 4217              		.loc 1 932 5 view .LVU1038
 4218 0010 1948     		ldr	r0, .L378+8
 4219 0012 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4220              	.LVL332:
 933:mri/architectures/armv7-m/armv7-m.c **** 
 4221              		.loc 1 933 5 view .LVU1039
 4222 0016 2046     		mov	r0, r4
 4223 0018 FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 4224              	.LVL333:
 935:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Divide by Zero");
 4225              		.loc 1 935 5 view .LVU1040
 935:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Divide by Zero");
 4226              		.loc 1 935 8 is_stmt 0 view .LVU1041
 4227 001c 14F4007F 		tst	r4, #512
ARM GAS  /tmp/ccXppZcm.s 			page 177


 4228 0020 12D1     		bne	.L373
 4229              	.L366:
 938:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Unaligned Access");
 4230              		.loc 1 938 5 is_stmt 1 view .LVU1042
 938:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Unaligned Access");
 4231              		.loc 1 938 8 is_stmt 0 view .LVU1043
 4232 0022 14F4807F 		tst	r4, #256
 4233 0026 13D1     		bne	.L374
 4234              	.L367:
 941:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Coprocessor Access");
 4235              		.loc 1 941 5 is_stmt 1 view .LVU1044
 941:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Coprocessor Access");
 4236              		.loc 1 941 8 is_stmt 0 view .LVU1045
 4237 0028 14F0080F 		tst	r4, #8
 4238 002c 14D1     		bne	.L375
 4239              	.L368:
 944:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Invalid Exception Return State");
 4240              		.loc 1 944 5 is_stmt 1 view .LVU1046
 944:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Invalid Exception Return State");
 4241              		.loc 1 944 8 is_stmt 0 view .LVU1047
 4242 002e 14F0040F 		tst	r4, #4
 4243 0032 15D1     		bne	.L376
 4244              	.L369:
 947:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Invalid State");
 4245              		.loc 1 947 5 is_stmt 1 view .LVU1048
 947:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Invalid State");
 4246              		.loc 1 947 8 is_stmt 0 view .LVU1049
 4247 0034 14F0020F 		tst	r4, #2
 4248 0038 16D1     		bne	.L377
 4249              	.L370:
 950:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Undefined Instruction");
 4250              		.loc 1 950 5 is_stmt 1 view .LVU1050
 950:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Undefined Instruction");
 4251              		.loc 1 950 8 is_stmt 0 view .LVU1051
 4252 003a 14F0010F 		tst	r4, #1
 4253 003e E3D0     		beq	.L364
 951:mri/architectures/armv7-m/armv7-m.c **** }
 4254              		.loc 1 951 9 is_stmt 1 view .LVU1052
 4255 0040 0E48     		ldr	r0, .L378+12
 4256 0042 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4257              	.LVL334:
 4258 0046 DFE7     		b	.L364
 4259              	.L373:
 936:mri/architectures/armv7-m/armv7-m.c **** 
 4260              		.loc 1 936 9 view .LVU1053
 4261 0048 0D48     		ldr	r0, .L378+16
 4262 004a FFF7FEFF 		bl	mriGdbConsole_WriteString
 4263              	.LVL335:
 4264 004e E8E7     		b	.L366
 4265              	.L374:
 939:mri/architectures/armv7-m/armv7-m.c **** 
 4266              		.loc 1 939 9 view .LVU1054
 4267 0050 0C48     		ldr	r0, .L378+20
 4268 0052 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4269              	.LVL336:
 4270 0056 E7E7     		b	.L367
 4271              	.L375:
ARM GAS  /tmp/ccXppZcm.s 			page 178


 942:mri/architectures/armv7-m/armv7-m.c **** 
 4272              		.loc 1 942 9 view .LVU1055
 4273 0058 0B48     		ldr	r0, .L378+24
 4274 005a FFF7FEFF 		bl	mriGdbConsole_WriteString
 4275              	.LVL337:
 4276 005e E6E7     		b	.L368
 4277              	.L376:
 945:mri/architectures/armv7-m/armv7-m.c **** 
 4278              		.loc 1 945 9 view .LVU1056
 4279 0060 0A48     		ldr	r0, .L378+28
 4280 0062 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4281              	.LVL338:
 4282 0066 E5E7     		b	.L369
 4283              	.L377:
 948:mri/architectures/armv7-m/armv7-m.c **** 
 4284              		.loc 1 948 9 view .LVU1057
 4285 0068 0948     		ldr	r0, .L378+32
 4286 006a FFF7FEFF 		bl	mriGdbConsole_WriteString
 4287              	.LVL339:
 4288 006e E4E7     		b	.L370
 4289              	.L379:
 4290              		.align	2
 4291              	.L378:
 4292 0070 00000000 		.word	mriCortexMState
 4293 0074 00000000 		.word	.LC12
 4294 0078 10000000 		.word	.LC1
 4295 007c 90000000 		.word	.LC18
 4296 0080 14000000 		.word	.LC13
 4297 0084 28000000 		.word	.LC14
 4298 0088 40000000 		.word	.LC15
 4299 008c 58000000 		.word	.LC16
 4300 0090 7C000000 		.word	.LC17
 4301              		.cfi_endproc
 4302              	.LFE274:
 4304              		.section	.rodata.displayHardFaultCauseToGdbConsole.str1.4,"aMS",%progbits,1
 4305              		.align	2
 4306              	.LC19:
 4307 0000 0A2A2A48 		.ascii	"\012**Hard Fault**\000"
 4307      61726420 
 4307      4661756C 
 4307      742A2A00 
 4308              		.align	2
 4309              	.LC20:
 4310 0010 0A202020 		.ascii	"\012    Debug Event\000"
 4310      20446562 
 4310      75672045 
 4310      76656E74 
 4310      00
 4311 0021 000000   		.align	2
 4312              	.LC21:
 4313 0024 0A202020 		.ascii	"\012    Vector Table Read\000"
 4313      20566563 
 4313      746F7220 
 4313      5461626C 
 4313      65205265 
 4314 003b 00       		.align	2
 4315              	.LC22:
ARM GAS  /tmp/ccXppZcm.s 			page 179


 4316 003c 0A202020 		.ascii	"\012    Forced\000"
 4316      20466F72 
 4316      63656400 
 4317              		.section	.text.displayHardFaultCauseToGdbConsole,"ax",%progbits
 4318              		.align	1
 4319              		.syntax unified
 4320              		.thumb
 4321              		.thumb_func
 4323              	displayHardFaultCauseToGdbConsole:
 4324              	.LFB271:
 802:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t debugEventBit = 1 << 31;
 4325              		.loc 1 802 1 view -0
 4326              		.cfi_startproc
 4327              		@ args = 0, pretend = 0, frame = 0
 4328              		@ frame_needed = 0, uses_anonymous_args = 0
 4329 0000 10B5     		push	{r4, lr}
 4330              	.LCFI26:
 4331              		.cfi_def_cfa_offset 8
 4332              		.cfi_offset 4, -8
 4333              		.cfi_offset 14, -4
 803:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t forcedBit = 1 << 30;
 4334              		.loc 1 803 5 view .LVU1059
 804:mri/architectures/armv7-m/armv7-m.c ****     static const uint32_t vectorTableReadBit = 1 << 1;
 4335              		.loc 1 804 5 view .LVU1060
 805:mri/architectures/armv7-m/armv7-m.c ****     uint32_t              hardFaultStatusRegister = mriCortexMState.hfsr;
 4336              		.loc 1 805 5 view .LVU1061
 806:mri/architectures/armv7-m/armv7-m.c **** 
 4337              		.loc 1 806 5 view .LVU1062
 806:mri/architectures/armv7-m/armv7-m.c **** 
 4338              		.loc 1 806 27 is_stmt 0 view .LVU1063
 4339 0002 134B     		ldr	r3, .L388
 4340 0004 1C6A     		ldr	r4, [r3, #32]
 4341              	.LVL340:
 808:mri/architectures/armv7-m/armv7-m.c ****     WriteStringToGdbConsole("\n  Status Register: ");
 4342              		.loc 1 808 5 is_stmt 1 view .LVU1064
 4343 0006 1348     		ldr	r0, .L388+4
 4344 0008 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4345              	.LVL341:
 809:mri/architectures/armv7-m/armv7-m.c ****     WriteHexValueToGdbConsole(hardFaultStatusRegister);
 4346              		.loc 1 809 5 view .LVU1065
 4347 000c 1248     		ldr	r0, .L388+8
 4348 000e FFF7FEFF 		bl	mriGdbConsole_WriteString
 4349              	.LVL342:
 810:mri/architectures/armv7-m/armv7-m.c **** 
 4350              		.loc 1 810 5 view .LVU1066
 4351 0012 2046     		mov	r0, r4
 4352 0014 FFF7FEFF 		bl	mriGdbConsole_WriteHexValue
 4353              	.LVL343:
 812:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Debug Event");
 4354              		.loc 1 812 5 view .LVU1067
 812:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Debug Event");
 4355              		.loc 1 812 8 is_stmt 0 view .LVU1068
 4356 0018 002C     		cmp	r4, #0
 4357 001a 06DB     		blt	.L385
 4358              	.L381:
 815:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Vector Table Read");
 4359              		.loc 1 815 5 is_stmt 1 view .LVU1069
ARM GAS  /tmp/ccXppZcm.s 			page 180


 815:mri/architectures/armv7-m/armv7-m.c ****         WriteStringToGdbConsole("\n    Vector Table Read");
 4360              		.loc 1 815 8 is_stmt 0 view .LVU1070
 4361 001c 14F0020F 		tst	r4, #2
 4362 0020 07D1     		bne	.L386
 4363              	.L382:
 818:mri/architectures/armv7-m/armv7-m.c ****     {
 4364              		.loc 1 818 5 is_stmt 1 view .LVU1071
 818:mri/architectures/armv7-m/armv7-m.c ****     {
 4365              		.loc 1 818 8 is_stmt 0 view .LVU1072
 4366 0022 14F0804F 		tst	r4, #1073741824
 4367 0026 08D1     		bne	.L387
 4368              	.L380:
 825:mri/architectures/armv7-m/armv7-m.c **** 
 4369              		.loc 1 825 1 view .LVU1073
 4370 0028 10BD     		pop	{r4, pc}
 4371              	.LVL344:
 4372              	.L385:
 813:mri/architectures/armv7-m/armv7-m.c **** 
 4373              		.loc 1 813 9 is_stmt 1 view .LVU1074
 4374 002a 0C48     		ldr	r0, .L388+12
 4375 002c FFF7FEFF 		bl	mriGdbConsole_WriteString
 4376              	.LVL345:
 4377 0030 F4E7     		b	.L381
 4378              	.L386:
 816:mri/architectures/armv7-m/armv7-m.c **** 
 4379              		.loc 1 816 9 view .LVU1075
 4380 0032 0B48     		ldr	r0, .L388+16
 4381 0034 FFF7FEFF 		bl	mriGdbConsole_WriteString
 4382              	.LVL346:
 4383 0038 F3E7     		b	.L382
 4384              	.L387:
 820:mri/architectures/armv7-m/armv7-m.c ****         displayMemFaultCauseToGdbConsole();
 4385              		.loc 1 820 9 view .LVU1076
 4386 003a 0A48     		ldr	r0, .L388+20
 4387 003c FFF7FEFF 		bl	mriGdbConsole_WriteString
 4388              	.LVL347:
 821:mri/architectures/armv7-m/armv7-m.c ****         displayBusFaultCauseToGdbConsole();
 4389              		.loc 1 821 9 view .LVU1077
 4390 0040 FFF7FEFF 		bl	displayMemFaultCauseToGdbConsole
 4391              	.LVL348:
 822:mri/architectures/armv7-m/armv7-m.c ****         displayUsageFaultCauseToGdbConsole();
 4392              		.loc 1 822 9 view .LVU1078
 4393 0044 FFF7FEFF 		bl	displayBusFaultCauseToGdbConsole
 4394              	.LVL349:
 823:mri/architectures/armv7-m/armv7-m.c ****     }
 4395              		.loc 1 823 9 view .LVU1079
 4396 0048 FFF7FEFF 		bl	displayUsageFaultCauseToGdbConsole
 4397              	.LVL350:
 825:mri/architectures/armv7-m/armv7-m.c **** 
 4398              		.loc 1 825 1 is_stmt 0 view .LVU1080
 4399 004c ECE7     		b	.L380
 4400              	.L389:
 4401 004e 00BF     		.align	2
 4402              	.L388:
 4403 0050 00000000 		.word	mriCortexMState
 4404 0054 00000000 		.word	.LC19
 4405 0058 10000000 		.word	.LC1
ARM GAS  /tmp/ccXppZcm.s 			page 181


 4406 005c 10000000 		.word	.LC20
 4407 0060 24000000 		.word	.LC21
 4408 0064 3C000000 		.word	.LC22
 4409              		.cfi_endproc
 4410              	.LFE271:
 4412              		.section	.text.writeBytesToBufferAsHex,"ax",%progbits
 4413              		.align	1
 4414              		.syntax unified
 4415              		.thumb
 4416              		.thumb_func
 4418              	writeBytesToBufferAsHex:
 4419              	.LVL351:
 4420              	.LFB299:
1194:mri/architectures/armv7-m/armv7-m.c ****     uint8_t* pByte = (uint8_t*)pBytes;
 4421              		.loc 1 1194 1 is_stmt 1 view -0
 4422              		.cfi_startproc
 4423              		@ args = 0, pretend = 0, frame = 0
 4424              		@ frame_needed = 0, uses_anonymous_args = 0
1194:mri/architectures/armv7-m/armv7-m.c ****     uint8_t* pByte = (uint8_t*)pBytes;
 4425              		.loc 1 1194 1 is_stmt 0 view .LVU1082
 4426 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4427              	.LCFI27:
 4428              		.cfi_def_cfa_offset 24
 4429              		.cfi_offset 3, -24
 4430              		.cfi_offset 4, -20
 4431              		.cfi_offset 5, -16
 4432              		.cfi_offset 6, -12
 4433              		.cfi_offset 7, -8
 4434              		.cfi_offset 14, -4
 4435 0002 0746     		mov	r7, r0
 4436 0004 0C46     		mov	r4, r1
 4437 0006 1646     		mov	r6, r2
1195:mri/architectures/armv7-m/armv7-m.c ****     size_t   i;
 4438              		.loc 1 1195 5 is_stmt 1 view .LVU1083
 4439              	.LVL352:
1196:mri/architectures/armv7-m/armv7-m.c **** 
 4440              		.loc 1 1196 5 view .LVU1084
1198:mri/architectures/armv7-m/armv7-m.c ****         Buffer_WriteByteAsHex(pBuffer, *pByte++);
 4441              		.loc 1 1198 5 view .LVU1085
1198:mri/architectures/armv7-m/armv7-m.c ****         Buffer_WriteByteAsHex(pBuffer, *pByte++);
 4442              		.loc 1 1198 12 is_stmt 0 view .LVU1086
 4443 0008 0025     		movs	r5, #0
1198:mri/architectures/armv7-m/armv7-m.c ****         Buffer_WriteByteAsHex(pBuffer, *pByte++);
 4444              		.loc 1 1198 5 view .LVU1087
 4445 000a 05E0     		b	.L391
 4446              	.LVL353:
 4447              	.L392:
1199:mri/architectures/armv7-m/armv7-m.c **** }
 4448              		.loc 1 1199 9 is_stmt 1 discriminator 3 view .LVU1088
1199:mri/architectures/armv7-m/armv7-m.c **** }
 4449              		.loc 1 1199 9 is_stmt 0 discriminator 3 view .LVU1089
 4450 000c 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 4451              	.LVL354:
1199:mri/architectures/armv7-m/armv7-m.c **** }
 4452              		.loc 1 1199 9 discriminator 3 view .LVU1090
 4453 0010 3846     		mov	r0, r7
 4454 0012 FFF7FEFF 		bl	mriBuffer_WriteByteAsHex
ARM GAS  /tmp/ccXppZcm.s 			page 182


 4455              	.LVL355:
1198:mri/architectures/armv7-m/armv7-m.c ****         Buffer_WriteByteAsHex(pBuffer, *pByte++);
 4456              		.loc 1 1198 35 is_stmt 1 discriminator 3 view .LVU1091
 4457 0016 0135     		adds	r5, r5, #1
 4458              	.LVL356:
 4459              	.L391:
1198:mri/architectures/armv7-m/armv7-m.c ****         Buffer_WriteByteAsHex(pBuffer, *pByte++);
 4460              		.loc 1 1198 20 discriminator 1 view .LVU1092
 4461 0018 B542     		cmp	r5, r6
 4462 001a F7D3     		bcc	.L392
1200:mri/architectures/armv7-m/armv7-m.c **** 
 4463              		.loc 1 1200 1 is_stmt 0 view .LVU1093
 4464 001c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
1200:mri/architectures/armv7-m/armv7-m.c **** 
 4465              		.loc 1 1200 1 view .LVU1094
 4466              		.cfi_endproc
 4467              	.LFE299:
 4469              		.section	.text.sendRegisterForTResponse,"ax",%progbits
 4470              		.align	1
 4471              		.syntax unified
 4472              		.thumb
 4473              		.thumb_func
 4475              	sendRegisterForTResponse:
 4476              	.LVL357:
 4477              	.LFB298:
1186:mri/architectures/armv7-m/armv7-m.c ****     Buffer_WriteByteAsHex(pBuffer, registerOffset);
 4478              		.loc 1 1186 1 is_stmt 1 view -0
 4479              		.cfi_startproc
 4480              		@ args = 0, pretend = 0, frame = 8
 4481              		@ frame_needed = 0, uses_anonymous_args = 0
1186:mri/architectures/armv7-m/armv7-m.c ****     Buffer_WriteByteAsHex(pBuffer, registerOffset);
 4482              		.loc 1 1186 1 is_stmt 0 view .LVU1096
 4483 0000 10B5     		push	{r4, lr}
 4484              	.LCFI28:
 4485              		.cfi_def_cfa_offset 8
 4486              		.cfi_offset 4, -8
 4487              		.cfi_offset 14, -4
 4488 0002 82B0     		sub	sp, sp, #8
 4489              	.LCFI29:
 4490              		.cfi_def_cfa_offset 16
 4491 0004 0446     		mov	r4, r0
 4492 0006 0192     		str	r2, [sp, #4]
1187:mri/architectures/armv7-m/armv7-m.c ****     Buffer_WriteChar(pBuffer, ':');
 4493              		.loc 1 1187 5 is_stmt 1 view .LVU1097
 4494 0008 FFF7FEFF 		bl	mriBuffer_WriteByteAsHex
 4495              	.LVL358:
1188:mri/architectures/armv7-m/armv7-m.c ****     writeBytesToBufferAsHex(pBuffer, &registerValue, sizeof(registerValue));
 4496              		.loc 1 1188 5 view .LVU1098
 4497 000c 3A21     		movs	r1, #58
 4498 000e 2046     		mov	r0, r4
 4499 0010 FFF7FEFF 		bl	mriBuffer_WriteChar
 4500              	.LVL359:
1189:mri/architectures/armv7-m/armv7-m.c ****     Buffer_WriteChar(pBuffer, ';');
 4501              		.loc 1 1189 5 view .LVU1099
 4502 0014 0422     		movs	r2, #4
 4503 0016 0DEB0201 		add	r1, sp, r2
 4504 001a 2046     		mov	r0, r4
ARM GAS  /tmp/ccXppZcm.s 			page 183


 4505 001c FFF7FEFF 		bl	writeBytesToBufferAsHex
 4506              	.LVL360:
1190:mri/architectures/armv7-m/armv7-m.c **** }
 4507              		.loc 1 1190 5 view .LVU1100
 4508 0020 3B21     		movs	r1, #59
 4509 0022 2046     		mov	r0, r4
 4510 0024 FFF7FEFF 		bl	mriBuffer_WriteChar
 4511              	.LVL361:
1191:mri/architectures/armv7-m/armv7-m.c **** 
 4512              		.loc 1 1191 1 is_stmt 0 view .LVU1101
 4513 0028 02B0     		add	sp, sp, #8
 4514              	.LCFI30:
 4515              		.cfi_def_cfa_offset 8
 4516              		@ sp needed
 4517 002a 10BD     		pop	{r4, pc}
1191:mri/architectures/armv7-m/armv7-m.c **** 
 4518              		.loc 1 1191 1 view .LVU1102
 4519              		.cfi_endproc
 4520              	.LFE298:
 4522              		.section	.text.allocateFakeFloatRegAndCallMriDebugException,"ax",%progbits
 4523              		.align	1
 4524              		.syntax unified
 4525              		.thumb
 4526              		.thumb_func
 4528              	allocateFakeFloatRegAndCallMriDebugException:
 4529              	.LFB329:
1720:mri/architectures/armv7-m/armv7-m.c **** 
1721:mri/architectures/armv7-m/armv7-m.c **** static int prepareThreadContext(ExceptionStack* pExceptionStack, IntegerRegisters* pIntegerRegs, ui
1722:mri/architectures/armv7-m/armv7-m.c **** {
1723:mri/architectures/armv7-m/armv7-m.c ****     uint32_t excReturn = pIntegerRegs->excReturn;
1724:mri/architectures/armv7-m/armv7-m.c ****     uint32_t entryCount = 0;
1725:mri/architectures/armv7-m/armv7-m.c ****     size_t   fpuRegCount = (uint32_t*)pIntegerRegs - pFloatingRegs;
1726:mri/architectures/armv7-m/armv7-m.c **** 
1727:mri/architectures/armv7-m/armv7-m.c ****     uint32_t autoStackedFloats = 0;
1728:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_DEVICE_HAS_FPU && (excReturn & LR_FLOAT_STACK) == 0)
1729:mri/architectures/armv7-m/armv7-m.c ****     {
1730:mri/architectures/armv7-m/armv7-m.c ****         /* Auto stacked S0-S15, FPSCR, +1 extra word for alignment. */
1731:mri/architectures/armv7-m/armv7-m.c ****         autoStackedFloats = 18;
1732:mri/architectures/armv7-m/armv7-m.c ****     }
1733:mri/architectures/armv7-m/armv7-m.c ****     uint32_t autoStackedRegs = 8 + autoStackedFloats + ((pExceptionStack->xpsr >> PSR_STACK_ALIGN_B
1734:mri/architectures/armv7-m/armv7-m.c **** 
1735:mri/architectures/armv7-m/armv7-m.c ****     /* R0 - R3 */
1736:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[0].pValues = &pExceptionStack->r0;
1737:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[0].count = 4;
1738:mri/architectures/armv7-m/armv7-m.c ****     /* R4 - R11 */
1739:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[1].pValues = &pIntegerRegs->r4;
1740:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[1].count = 8;
1741:mri/architectures/armv7-m/armv7-m.c ****     /* R12 */
1742:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[2].pValues = &pExceptionStack->r12;
1743:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[2].count = 1;
1744:mri/architectures/armv7-m/armv7-m.c ****     /* SP - Point scatter gather context to correct location for SP but set it to correct value onc
1745:mri/architectures/armv7-m/armv7-m.c ****        fetched. */
1746:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[3].pValues = &mriCortexMState.sp;
1747:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[3].count = 1;
1748:mri/architectures/armv7-m/armv7-m.c ****     /* LR, PC, CPSR */
1749:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[4].pValues = &pExceptionStack->lr;
1750:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[4].count = 3;
ARM GAS  /tmp/ccXppZcm.s 			page 184


1751:mri/architectures/armv7-m/armv7-m.c ****     /* MSP, PSP, PRIMASK, BASEPRI, FAULTMASK, CONTROL */
1752:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[5].pValues = &pIntegerRegs->msp;
1753:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[5].count = 6;
1754:mri/architectures/armv7-m/armv7-m.c ****     /* Set SP to correct value using alignment bit in CPSR. Memory for SP is already tracked by con
1755:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.sp = (uint32_t)((uint32_t*)pExceptionStack + autoStackedRegs);
1756:mri/architectures/armv7-m/armv7-m.c ****     entryCount = 6;
1757:mri/architectures/armv7-m/armv7-m.c **** 
1758:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_DEVICE_HAS_FPU && fpuRegCount == 16)
1759:mri/architectures/armv7-m/armv7-m.c ****     {
1760:mri/architectures/armv7-m/armv7-m.c ****         /* S0 - S15 */
1761:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].pValues = &pExceptionStack->s0;
1762:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 16;
1763:mri/architectures/armv7-m/armv7-m.c ****         /* S16 - S31 */
1764:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[7].pValues = pFloatingRegs;
1765:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[7].count = 16;
1766:mri/architectures/armv7-m/armv7-m.c ****         /* FPSCR */
1767:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[8].pValues = &pExceptionStack->fpscr;
1768:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[8].count = 1;
1769:mri/architectures/armv7-m/armv7-m.c **** 
1770:mri/architectures/armv7-m/armv7-m.c ****         entryCount += 3;
1771:mri/architectures/armv7-m/armv7-m.c ****     }
1772:mri/architectures/armv7-m/armv7-m.c ****     else if (MRI_DEVICE_HAS_FPU && fpuRegCount == 33)
1773:mri/architectures/armv7-m/armv7-m.c ****     {
1774:mri/architectures/armv7-m/armv7-m.c ****         /* S0 - S31 & FPSCR */
1775:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].pValues = pFloatingRegs;
1776:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 33;
1777:mri/architectures/armv7-m/armv7-m.c **** 
1778:mri/architectures/armv7-m/armv7-m.c ****         entryCount += 1;
1779:mri/architectures/armv7-m/armv7-m.c ****     }
1780:mri/architectures/armv7-m/armv7-m.c ****     else if (MRI_DEVICE_HAS_FPU && fpuRegCount == 0)
1781:mri/architectures/armv7-m/armv7-m.c ****     {
1782:mri/architectures/armv7-m/armv7-m.c ****         /* Reserve an entry for zeroed out floating point registers that will be filled in later fr
1783:mri/architectures/armv7-m/armv7-m.c ****         entryCount += 1;
1784:mri/architectures/armv7-m/armv7-m.c ****     }
1785:mri/architectures/armv7-m/armv7-m.c **** 
1786:mri/architectures/armv7-m/armv7-m.c ****     Context_Init(&mriCortexMState.context, g_contextEntries, entryCount);
1787:mri/architectures/armv7-m/armv7-m.c **** 
1788:mri/architectures/armv7-m/armv7-m.c ****     /* Return true if we need to allocate space for floating point registers on stack. */
1789:mri/architectures/armv7-m/armv7-m.c ****     return (MRI_DEVICE_HAS_FPU && fpuRegCount == 0);
1790:mri/architectures/armv7-m/armv7-m.c **** }
1791:mri/architectures/armv7-m/armv7-m.c **** 
1792:mri/architectures/armv7-m/armv7-m.c **** static void allocateFakeFloatRegAndCallMriDebugException(void)
1793:mri/architectures/armv7-m/armv7-m.c **** {
 4530              		.loc 1 1793 1 is_stmt 1 view -0
 4531              		.cfi_startproc
 4532              		@ args = 0, pretend = 0, frame = 136
 4533              		@ frame_needed = 0, uses_anonymous_args = 0
 4534 0000 10B5     		push	{r4, lr}
 4535              	.LCFI31:
 4536              		.cfi_def_cfa_offset 8
 4537              		.cfi_offset 4, -8
 4538              		.cfi_offset 14, -4
 4539 0002 A2B0     		sub	sp, sp, #136
 4540              	.LCFI32:
 4541              		.cfi_def_cfa_offset 144
1794:mri/architectures/armv7-m/armv7-m.c ****     uint32_t fakeFloats[33];
 4542              		.loc 1 1794 5 view .LVU1104
ARM GAS  /tmp/ccXppZcm.s 			page 185


1795:mri/architectures/armv7-m/armv7-m.c **** 
1796:mri/architectures/armv7-m/armv7-m.c ****     mri_memset(&fakeFloats, 0, sizeof(fakeFloats));
 4543              		.loc 1 1796 5 view .LVU1105
 4544 0004 01AC     		add	r4, sp, #4
 4545 0006 8422     		movs	r2, #132
 4546 0008 0021     		movs	r1, #0
 4547 000a 2046     		mov	r0, r4
 4548 000c FFF7FEFF 		bl	mri_memset
 4549              	.LVL362:
1797:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[6].pValues = fakeFloats;
 4550              		.loc 1 1797 5 view .LVU1106
 4551              		.loc 1 1797 33 is_stmt 0 view .LVU1107
 4552 0010 044B     		ldr	r3, .L398
 4553 0012 1C63     		str	r4, [r3, #48]
1798:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[6].count = sizeof(fakeFloats)/sizeof(fakeFloats[0]);
 4554              		.loc 1 1798 5 is_stmt 1 view .LVU1108
 4555              		.loc 1 1798 31 is_stmt 0 view .LVU1109
 4556 0014 2122     		movs	r2, #33
 4557 0016 5A63     		str	r2, [r3, #52]
1799:mri/architectures/armv7-m/armv7-m.c **** 
1800:mri/architectures/armv7-m/armv7-m.c ****     mriDebugException(&mriCortexMState.context);
 4558              		.loc 1 1800 5 is_stmt 1 view .LVU1110
 4559 0018 0348     		ldr	r0, .L398+4
 4560 001a FFF7FEFF 		bl	mriDebugException
 4561              	.LVL363:
1801:mri/architectures/armv7-m/armv7-m.c **** }
 4562              		.loc 1 1801 1 is_stmt 0 view .LVU1111
 4563 001e 22B0     		add	sp, sp, #136
 4564              	.LCFI33:
 4565              		.cfi_def_cfa_offset 8
 4566              		@ sp needed
 4567 0020 10BD     		pop	{r4, pc}
 4568              	.L399:
 4569 0022 00BF     		.align	2
 4570              	.L398:
 4571 0024 00000000 		.word	g_contextEntries
 4572 0028 00000000 		.word	mriCortexMState
 4573              		.cfi_endproc
 4574              	.LFE329:
 4576              		.section	.text.prepareThreadContext,"ax",%progbits
 4577              		.align	1
 4578              		.syntax unified
 4579              		.thumb
 4580              		.thumb_func
 4582              	prepareThreadContext:
 4583              	.LVL364:
 4584              	.LFB328:
1722:mri/architectures/armv7-m/armv7-m.c ****     uint32_t excReturn = pIntegerRegs->excReturn;
 4585              		.loc 1 1722 1 is_stmt 1 view -0
 4586              		.cfi_startproc
 4587              		@ args = 0, pretend = 0, frame = 0
 4588              		@ frame_needed = 0, uses_anonymous_args = 0
1722:mri/architectures/armv7-m/armv7-m.c ****     uint32_t excReturn = pIntegerRegs->excReturn;
 4589              		.loc 1 1722 1 is_stmt 0 view .LVU1113
 4590 0000 70B5     		push	{r4, r5, r6, lr}
 4591              	.LCFI34:
 4592              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccXppZcm.s 			page 186


 4593              		.cfi_offset 4, -16
 4594              		.cfi_offset 5, -12
 4595              		.cfi_offset 6, -8
 4596              		.cfi_offset 14, -4
1723:mri/architectures/armv7-m/armv7-m.c ****     uint32_t entryCount = 0;
 4597              		.loc 1 1723 5 is_stmt 1 view .LVU1114
1723:mri/architectures/armv7-m/armv7-m.c ****     uint32_t entryCount = 0;
 4598              		.loc 1 1723 14 is_stmt 0 view .LVU1115
 4599 0002 8B6B     		ldr	r3, [r1, #56]
 4600              	.LVL365:
1724:mri/architectures/armv7-m/armv7-m.c ****     size_t   fpuRegCount = (uint32_t*)pIntegerRegs - pFloatingRegs;
 4601              		.loc 1 1724 5 is_stmt 1 view .LVU1116
1725:mri/architectures/armv7-m/armv7-m.c **** 
 4602              		.loc 1 1725 5 view .LVU1117
1725:mri/architectures/armv7-m/armv7-m.c **** 
 4603              		.loc 1 1725 52 is_stmt 0 view .LVU1118
 4604 0004 8C1A     		subs	r4, r1, r2
 4605 0006 A410     		asrs	r4, r4, #2
 4606              	.LVL366:
1727:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_DEVICE_HAS_FPU && (excReturn & LR_FLOAT_STACK) == 0)
 4607              		.loc 1 1727 5 is_stmt 1 view .LVU1119
1728:mri/architectures/armv7-m/armv7-m.c ****     {
 4608              		.loc 1 1728 5 view .LVU1120
1728:mri/architectures/armv7-m/armv7-m.c ****     {
 4609              		.loc 1 1728 8 is_stmt 0 view .LVU1121
 4610 0008 13F0100F 		tst	r3, #16
 4611 000c 29D0     		beq	.L405
1727:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_DEVICE_HAS_FPU && (excReturn & LR_FLOAT_STACK) == 0)
 4612              		.loc 1 1727 14 view .LVU1122
 4613 000e 0025     		movs	r5, #0
 4614              	.L401:
 4615              	.LVL367:
1733:mri/architectures/armv7-m/armv7-m.c **** 
 4616              		.loc 1 1733 5 is_stmt 1 view .LVU1123
1733:mri/architectures/armv7-m/armv7-m.c **** 
 4617              		.loc 1 1733 73 is_stmt 0 view .LVU1124
 4618 0010 C369     		ldr	r3, [r0, #28]
 4619              	.LVL368:
1733:mri/architectures/armv7-m/armv7-m.c **** 
 4620              		.loc 1 1733 108 view .LVU1125
 4621 0012 C3F34023 		ubfx	r3, r3, #9, #1
1733:mri/architectures/armv7-m/armv7-m.c **** 
 4622              		.loc 1 1733 54 view .LVU1126
 4623 0016 2B44     		add	r3, r3, r5
1733:mri/architectures/armv7-m/armv7-m.c **** 
 4624              		.loc 1 1733 14 view .LVU1127
 4625 0018 03F1080C 		add	ip, r3, #8
 4626              	.LVL369:
1736:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[0].count = 4;
 4627              		.loc 1 1736 5 is_stmt 1 view .LVU1128
1736:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[0].count = 4;
 4628              		.loc 1 1736 33 is_stmt 0 view .LVU1129
 4629 001c 204B     		ldr	r3, .L410
 4630 001e 1860     		str	r0, [r3]
1737:mri/architectures/armv7-m/armv7-m.c ****     /* R4 - R11 */
 4631              		.loc 1 1737 5 is_stmt 1 view .LVU1130
1737:mri/architectures/armv7-m/armv7-m.c ****     /* R4 - R11 */
ARM GAS  /tmp/ccXppZcm.s 			page 187


 4632              		.loc 1 1737 31 is_stmt 0 view .LVU1131
 4633 0020 0425     		movs	r5, #4
 4634              	.LVL370:
1737:mri/architectures/armv7-m/armv7-m.c ****     /* R4 - R11 */
 4635              		.loc 1 1737 31 view .LVU1132
 4636 0022 5D60     		str	r5, [r3, #4]
1739:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[1].count = 8;
 4637              		.loc 1 1739 5 is_stmt 1 view .LVU1133
1739:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[1].count = 8;
 4638              		.loc 1 1739 35 is_stmt 0 view .LVU1134
 4639 0024 01F11805 		add	r5, r1, #24
1739:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[1].count = 8;
 4640              		.loc 1 1739 33 view .LVU1135
 4641 0028 9D60     		str	r5, [r3, #8]
1740:mri/architectures/armv7-m/armv7-m.c ****     /* R12 */
 4642              		.loc 1 1740 5 is_stmt 1 view .LVU1136
1740:mri/architectures/armv7-m/armv7-m.c ****     /* R12 */
 4643              		.loc 1 1740 31 is_stmt 0 view .LVU1137
 4644 002a 0825     		movs	r5, #8
 4645 002c DD60     		str	r5, [r3, #12]
1742:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[2].count = 1;
 4646              		.loc 1 1742 5 is_stmt 1 view .LVU1138
1742:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[2].count = 1;
 4647              		.loc 1 1742 35 is_stmt 0 view .LVU1139
 4648 002e 00F11005 		add	r5, r0, #16
1742:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[2].count = 1;
 4649              		.loc 1 1742 33 view .LVU1140
 4650 0032 1D61     		str	r5, [r3, #16]
1743:mri/architectures/armv7-m/armv7-m.c ****     /* SP - Point scatter gather context to correct location for SP but set it to correct value onc
 4651              		.loc 1 1743 5 is_stmt 1 view .LVU1141
1743:mri/architectures/armv7-m/armv7-m.c ****     /* SP - Point scatter gather context to correct location for SP but set it to correct value onc
 4652              		.loc 1 1743 31 is_stmt 0 view .LVU1142
 4653 0034 0126     		movs	r6, #1
 4654 0036 5E61     		str	r6, [r3, #20]
1746:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[3].count = 1;
 4655              		.loc 1 1746 5 is_stmt 1 view .LVU1143
1746:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[3].count = 1;
 4656              		.loc 1 1746 33 is_stmt 0 view .LVU1144
 4657 0038 1A4D     		ldr	r5, .L410+4
 4658 003a 9D61     		str	r5, [r3, #24]
1747:mri/architectures/armv7-m/armv7-m.c ****     /* LR, PC, CPSR */
 4659              		.loc 1 1747 5 is_stmt 1 view .LVU1145
1747:mri/architectures/armv7-m/armv7-m.c ****     /* LR, PC, CPSR */
 4660              		.loc 1 1747 31 is_stmt 0 view .LVU1146
 4661 003c DE61     		str	r6, [r3, #28]
1749:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[4].count = 3;
 4662              		.loc 1 1749 5 is_stmt 1 view .LVU1147
1749:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[4].count = 3;
 4663              		.loc 1 1749 35 is_stmt 0 view .LVU1148
 4664 003e 00F11406 		add	r6, r0, #20
1749:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[4].count = 3;
 4665              		.loc 1 1749 33 view .LVU1149
 4666 0042 1E62     		str	r6, [r3, #32]
1750:mri/architectures/armv7-m/armv7-m.c ****     /* MSP, PSP, PRIMASK, BASEPRI, FAULTMASK, CONTROL */
 4667              		.loc 1 1750 5 is_stmt 1 view .LVU1150
1750:mri/architectures/armv7-m/armv7-m.c ****     /* MSP, PSP, PRIMASK, BASEPRI, FAULTMASK, CONTROL */
 4668              		.loc 1 1750 31 is_stmt 0 view .LVU1151
ARM GAS  /tmp/ccXppZcm.s 			page 188


 4669 0044 0326     		movs	r6, #3
 4670 0046 5E62     		str	r6, [r3, #36]
1752:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[5].count = 6;
 4671              		.loc 1 1752 5 is_stmt 1 view .LVU1152
1752:mri/architectures/armv7-m/armv7-m.c ****     g_contextEntries[5].count = 6;
 4672              		.loc 1 1752 33 is_stmt 0 view .LVU1153
 4673 0048 9962     		str	r1, [r3, #40]
1753:mri/architectures/armv7-m/armv7-m.c ****     /* Set SP to correct value using alignment bit in CPSR. Memory for SP is already tracked by con
 4674              		.loc 1 1753 5 is_stmt 1 view .LVU1154
1753:mri/architectures/armv7-m/armv7-m.c ****     /* Set SP to correct value using alignment bit in CPSR. Memory for SP is already tracked by con
 4675              		.loc 1 1753 31 is_stmt 0 view .LVU1155
 4676 004a 0621     		movs	r1, #6
 4677              	.LVL371:
1753:mri/architectures/armv7-m/armv7-m.c ****     /* Set SP to correct value using alignment bit in CPSR. Memory for SP is already tracked by con
 4678              		.loc 1 1753 31 view .LVU1156
 4679 004c D962     		str	r1, [r3, #44]
1755:mri/architectures/armv7-m/armv7-m.c ****     entryCount = 6;
 4680              		.loc 1 1755 5 is_stmt 1 view .LVU1157
1755:mri/architectures/armv7-m/armv7-m.c ****     entryCount = 6;
 4681              		.loc 1 1755 64 is_stmt 0 view .LVU1158
 4682 004e 00EB8C03 		add	r3, r0, ip, lsl #2
 4683              	.LVL372:
1755:mri/architectures/armv7-m/armv7-m.c ****     entryCount = 6;
 4684              		.loc 1 1755 24 view .LVU1159
 4685 0052 2B60     		str	r3, [r5]
1756:mri/architectures/armv7-m/armv7-m.c **** 
 4686              		.loc 1 1756 5 is_stmt 1 view .LVU1160
 4687              	.LVL373:
1758:mri/architectures/armv7-m/armv7-m.c ****     {
 4688              		.loc 1 1758 5 view .LVU1161
1758:mri/architectures/armv7-m/armv7-m.c ****     {
 4689              		.loc 1 1758 8 is_stmt 0 view .LVU1162
 4690 0054 102C     		cmp	r4, #16
 4691 0056 06D0     		beq	.L408
1772:mri/architectures/armv7-m/armv7-m.c ****     {
 4692              		.loc 1 1772 10 is_stmt 1 view .LVU1163
1772:mri/architectures/armv7-m/armv7-m.c ****     {
 4693              		.loc 1 1772 13 is_stmt 0 view .LVU1164
 4694 0058 212C     		cmp	r4, #33
 4695 005a 19D0     		beq	.L409
1780:mri/architectures/armv7-m/armv7-m.c ****     {
 4696              		.loc 1 1780 10 is_stmt 1 view .LVU1165
1780:mri/architectures/armv7-m/armv7-m.c ****     {
 4697              		.loc 1 1780 13 is_stmt 0 view .LVU1166
 4698 005c F4B1     		cbz	r4, .L406
1756:mri/architectures/armv7-m/armv7-m.c **** 
 4699              		.loc 1 1756 16 view .LVU1167
 4700 005e 0622     		movs	r2, #6
 4701              	.LVL374:
1756:mri/architectures/armv7-m/armv7-m.c **** 
 4702              		.loc 1 1756 16 view .LVU1168
 4703 0060 0EE0     		b	.L403
 4704              	.LVL375:
 4705              	.L405:
1731:mri/architectures/armv7-m/armv7-m.c ****     }
 4706              		.loc 1 1731 27 view .LVU1169
 4707 0062 1225     		movs	r5, #18
ARM GAS  /tmp/ccXppZcm.s 			page 189


 4708 0064 D4E7     		b	.L401
 4709              	.LVL376:
 4710              	.L408:
1761:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 16;
 4711              		.loc 1 1761 9 is_stmt 1 view .LVU1170
1761:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 16;
 4712              		.loc 1 1761 39 is_stmt 0 view .LVU1171
 4713 0066 00F12001 		add	r1, r0, #32
1761:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 16;
 4714              		.loc 1 1761 37 view .LVU1172
 4715 006a 0D4B     		ldr	r3, .L410
 4716              	.LVL377:
1761:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 16;
 4717              		.loc 1 1761 37 view .LVU1173
 4718 006c 1963     		str	r1, [r3, #48]
1762:mri/architectures/armv7-m/armv7-m.c ****         /* S16 - S31 */
 4719              		.loc 1 1762 9 is_stmt 1 view .LVU1174
1762:mri/architectures/armv7-m/armv7-m.c ****         /* S16 - S31 */
 4720              		.loc 1 1762 35 is_stmt 0 view .LVU1175
 4721 006e 1021     		movs	r1, #16
 4722 0070 5963     		str	r1, [r3, #52]
1764:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[7].count = 16;
 4723              		.loc 1 1764 9 is_stmt 1 view .LVU1176
1764:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[7].count = 16;
 4724              		.loc 1 1764 37 is_stmt 0 view .LVU1177
 4725 0072 9A63     		str	r2, [r3, #56]
 4726              	.LVL378:
1765:mri/architectures/armv7-m/armv7-m.c ****         /* FPSCR */
 4727              		.loc 1 1765 9 is_stmt 1 view .LVU1178
1765:mri/architectures/armv7-m/armv7-m.c ****         /* FPSCR */
 4728              		.loc 1 1765 35 is_stmt 0 view .LVU1179
 4729 0074 D963     		str	r1, [r3, #60]
1767:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[8].count = 1;
 4730              		.loc 1 1767 9 is_stmt 1 view .LVU1180
1767:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[8].count = 1;
 4731              		.loc 1 1767 39 is_stmt 0 view .LVU1181
 4732 0076 6030     		adds	r0, r0, #96
 4733              	.LVL379:
1767:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[8].count = 1;
 4734              		.loc 1 1767 37 view .LVU1182
 4735 0078 1864     		str	r0, [r3, #64]
1768:mri/architectures/armv7-m/armv7-m.c **** 
 4736              		.loc 1 1768 9 is_stmt 1 view .LVU1183
1768:mri/architectures/armv7-m/armv7-m.c **** 
 4737              		.loc 1 1768 35 is_stmt 0 view .LVU1184
 4738 007a 0122     		movs	r2, #1
 4739              	.LVL380:
1768:mri/architectures/armv7-m/armv7-m.c **** 
 4740              		.loc 1 1768 35 view .LVU1185
 4741 007c 5A64     		str	r2, [r3, #68]
1770:mri/architectures/armv7-m/armv7-m.c ****     }
 4742              		.loc 1 1770 9 is_stmt 1 view .LVU1186
 4743              	.LVL381:
1770:mri/architectures/armv7-m/armv7-m.c ****     }
 4744              		.loc 1 1770 20 is_stmt 0 view .LVU1187
 4745 007e 0922     		movs	r2, #9
 4746              	.LVL382:
ARM GAS  /tmp/ccXppZcm.s 			page 190


 4747              	.L403:
1786:mri/architectures/armv7-m/armv7-m.c **** 
 4748              		.loc 1 1786 5 is_stmt 1 view .LVU1188
 4749 0080 0749     		ldr	r1, .L410
1786:mri/architectures/armv7-m/armv7-m.c **** 
 4750              		.loc 1 1786 5 is_stmt 0 view .LVU1189
 4751 0082 0948     		ldr	r0, .L410+8
 4752 0084 FFF7FEFF 		bl	mriContext_Init
 4753              	.LVL383:
1789:mri/architectures/armv7-m/armv7-m.c **** }
 4754              		.loc 1 1789 5 is_stmt 1 view .LVU1190
1790:mri/architectures/armv7-m/armv7-m.c **** 
 4755              		.loc 1 1790 1 is_stmt 0 view .LVU1191
 4756 0088 B4FA84F0 		clz	r0, r4
 4757 008c 4009     		lsrs	r0, r0, #5
 4758 008e 70BD     		pop	{r4, r5, r6, pc}
 4759              	.LVL384:
 4760              	.L409:
1775:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 33;
 4761              		.loc 1 1775 9 is_stmt 1 view .LVU1192
1775:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 33;
 4762              		.loc 1 1775 37 is_stmt 0 view .LVU1193
 4763 0090 034B     		ldr	r3, .L410
 4764              	.LVL385:
1775:mri/architectures/armv7-m/armv7-m.c ****         g_contextEntries[6].count = 33;
 4765              		.loc 1 1775 37 view .LVU1194
 4766 0092 1A63     		str	r2, [r3, #48]
1776:mri/architectures/armv7-m/armv7-m.c **** 
 4767              		.loc 1 1776 9 is_stmt 1 view .LVU1195
1776:mri/architectures/armv7-m/armv7-m.c **** 
 4768              		.loc 1 1776 35 is_stmt 0 view .LVU1196
 4769 0094 2122     		movs	r2, #33
 4770              	.LVL386:
1776:mri/architectures/armv7-m/armv7-m.c **** 
 4771              		.loc 1 1776 35 view .LVU1197
 4772 0096 5A63     		str	r2, [r3, #52]
1778:mri/architectures/armv7-m/armv7-m.c ****     }
 4773              		.loc 1 1778 9 is_stmt 1 view .LVU1198
 4774              	.LVL387:
1778:mri/architectures/armv7-m/armv7-m.c ****     }
 4775              		.loc 1 1778 20 is_stmt 0 view .LVU1199
 4776 0098 0722     		movs	r2, #7
 4777 009a F1E7     		b	.L403
 4778              	.LVL388:
 4779              	.L406:
1783:mri/architectures/armv7-m/armv7-m.c ****     }
 4780              		.loc 1 1783 20 view .LVU1200
 4781 009c 0722     		movs	r2, #7
 4782              	.LVL389:
1783:mri/architectures/armv7-m/armv7-m.c ****     }
 4783              		.loc 1 1783 20 view .LVU1201
 4784 009e EFE7     		b	.L403
 4785              	.L411:
 4786              		.align	2
 4787              	.L410:
 4788 00a0 00000000 		.word	g_contextEntries
 4789 00a4 14000000 		.word	mriCortexMState+20
ARM GAS  /tmp/ccXppZcm.s 			page 191


 4790 00a8 00000000 		.word	mriCortexMState
 4791              		.cfi_endproc
 4792              	.LFE328:
 4794              		.section	.text.mriCortexMSetPriority,"ax",%progbits
 4795              		.align	1
 4796              		.global	mriCortexMSetPriority
 4797              		.syntax unified
 4798              		.thumb
 4799              		.thumb_func
 4801              	mriCortexMSetPriority:
 4802              	.LVL390:
 4803              	.LFB227:
 246:mri/architectures/armv7-m/armv7-m.c ****     uint8_t fullPriority = (priority << mriCortexMState.priorityBitShift) |
 4804              		.loc 1 246 1 is_stmt 1 view -0
 4805              		.cfi_startproc
 4806              		@ args = 0, pretend = 0, frame = 0
 4807              		@ frame_needed = 0, uses_anonymous_args = 0
 4808              		@ link register save eliminated.
 246:mri/architectures/armv7-m/armv7-m.c ****     uint8_t fullPriority = (priority << mriCortexMState.priorityBitShift) |
 4809              		.loc 1 246 1 is_stmt 0 view .LVU1203
 4810 0000 10B4     		push	{r4}
 4811              	.LCFI35:
 4812              		.cfi_def_cfa_offset 4
 4813              		.cfi_offset 4, -4
 247:mri/architectures/armv7-m/armv7-m.c ****                            (subPriority & ((1 << mriCortexMState.priorityBitShift) -1));
 4814              		.loc 1 247 5 is_stmt 1 view .LVU1204
 247:mri/architectures/armv7-m/armv7-m.c ****                            (subPriority & ((1 << mriCortexMState.priorityBitShift) -1));
 4815              		.loc 1 247 56 is_stmt 0 view .LVU1205
 4816 0002 0C4B     		ldr	r3, .L416
 4817 0004 DC6B     		ldr	r4, [r3, #60]
 247:mri/architectures/armv7-m/armv7-m.c ****                            (subPriority & ((1 << mriCortexMState.priorityBitShift) -1));
 4818              		.loc 1 247 38 view .LVU1206
 4819 0006 A140     		lsls	r1, r1, r4
 4820              	.LVL391:
 248:mri/architectures/armv7-m/armv7-m.c **** 
 4821              		.loc 1 248 47 view .LVU1207
 4822 0008 0123     		movs	r3, #1
 4823 000a A340     		lsls	r3, r3, r4
 248:mri/architectures/armv7-m/armv7-m.c **** 
 4824              		.loc 1 248 84 view .LVU1208
 4825 000c 013B     		subs	r3, r3, #1
 247:mri/architectures/armv7-m/armv7-m.c ****                            (subPriority & ((1 << mriCortexMState.priorityBitShift) -1));
 4826              		.loc 1 247 13 view .LVU1209
 4827 000e 1340     		ands	r3, r3, r2
 4828 0010 0B43     		orrs	r3, r3, r1
 4829 0012 DBB2     		uxtb	r3, r3
 4830              	.LVL392:
 250:mri/architectures/armv7-m/armv7-m.c ****     {
 4831              		.loc 1 250 5 is_stmt 1 view .LVU1210
 250:mri/architectures/armv7-m/armv7-m.c ****     {
 4832              		.loc 1 250 8 is_stmt 0 view .LVU1211
 4833 0014 0028     		cmp	r0, #0
 4834              	.LVL393:
 250:mri/architectures/armv7-m/armv7-m.c ****     {
 4835              		.loc 1 250 8 view .LVU1212
 4836 0016 08DB     		blt	.L413
 252:mri/architectures/armv7-m/armv7-m.c ****     }
ARM GAS  /tmp/ccXppZcm.s 			page 192


 4837              		.loc 1 252 9 is_stmt 1 view .LVU1213
 252:mri/architectures/armv7-m/armv7-m.c ****     }
 4838              		.loc 1 252 35 is_stmt 0 view .LVU1214
 4839 0018 00F16040 		add	r0, r0, #-536870912
 4840 001c 00F56140 		add	r0, r0, #57600
 4841 0020 80F80033 		strb	r3, [r0, #768]
 4842              	.LVL394:
 4843              	.L412:
 258:mri/architectures/armv7-m/armv7-m.c **** 
 4844              		.loc 1 258 1 view .LVU1215
 4845 0024 5DF8044B 		ldr	r4, [sp], #4
 4846              	.LCFI36:
 4847              		.cfi_remember_state
 4848              		.cfi_restore 4
 4849              		.cfi_def_cfa_offset 0
 4850 0028 7047     		bx	lr
 4851              	.LVL395:
 4852              	.L413:
 4853              	.LCFI37:
 4854              		.cfi_restore_state
 256:mri/architectures/armv7-m/armv7-m.c ****     }
 4855              		.loc 1 256 9 is_stmt 1 view .LVU1216
 256:mri/architectures/armv7-m/armv7-m.c ****     }
 4856              		.loc 1 256 35 is_stmt 0 view .LVU1217
 4857 002a 00F00F00 		and	r0, r0, #15
 256:mri/architectures/armv7-m/armv7-m.c ****     }
 4858              		.loc 1 256 45 view .LVU1218
 4859 002e 024A     		ldr	r2, .L416+4
 4860              	.LVL396:
 256:mri/architectures/armv7-m/armv7-m.c ****     }
 4861              		.loc 1 256 45 view .LVU1219
 4862 0030 1354     		strb	r3, [r2, r0]
 258:mri/architectures/armv7-m/armv7-m.c **** 
 4863              		.loc 1 258 1 view .LVU1220
 4864 0032 F7E7     		b	.L412
 4865              	.L417:
 4866              		.align	2
 4867              	.L416:
 4868 0034 00000000 		.word	mriCortexMState
 4869 0038 14ED00E0 		.word	-536810220
 4870              		.cfi_endproc
 4871              	.LFE227:
 4873              		.section	.text.defaultSvcAndSysTickInterruptsToLowerPriority,"ax",%progbits
 4874              		.align	1
 4875              		.syntax unified
 4876              		.thumb
 4877              		.thumb_func
 4879              	defaultSvcAndSysTickInterruptsToLowerPriority:
 4880              	.LVL397:
 4881              	.LFB223:
 219:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(SVCall_IRQn, priority, 0);
 4882              		.loc 1 219 1 is_stmt 1 view -0
 4883              		.cfi_startproc
 4884              		@ args = 0, pretend = 0, frame = 0
 4885              		@ frame_needed = 0, uses_anonymous_args = 0
 219:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(SVCall_IRQn, priority, 0);
 4886              		.loc 1 219 1 is_stmt 0 view .LVU1222
ARM GAS  /tmp/ccXppZcm.s 			page 193


 4887 0000 10B5     		push	{r4, lr}
 4888              	.LCFI38:
 4889              		.cfi_def_cfa_offset 8
 4890              		.cfi_offset 4, -8
 4891              		.cfi_offset 14, -4
 4892 0002 0446     		mov	r4, r0
 220:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(PendSV_IRQn, priority, 0);
 4893              		.loc 1 220 5 is_stmt 1 view .LVU1223
 4894 0004 0022     		movs	r2, #0
 4895 0006 0146     		mov	r1, r0
 4896 0008 6FF00400 		mvn	r0, #4
 4897              	.LVL398:
 220:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(PendSV_IRQn, priority, 0);
 4898              		.loc 1 220 5 is_stmt 0 view .LVU1224
 4899 000c FFF7FEFF 		bl	mriCortexMSetPriority
 4900              	.LVL399:
 221:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(SysTick_IRQn, priority, 0);
 4901              		.loc 1 221 5 is_stmt 1 view .LVU1225
 4902 0010 0022     		movs	r2, #0
 4903 0012 2146     		mov	r1, r4
 4904 0014 6FF00100 		mvn	r0, #1
 4905 0018 FFF7FEFF 		bl	mriCortexMSetPriority
 4906              	.LVL400:
 222:mri/architectures/armv7-m/armv7-m.c **** }
 4907              		.loc 1 222 5 view .LVU1226
 4908 001c 0022     		movs	r2, #0
 4909 001e 2146     		mov	r1, r4
 4910 0020 4FF0FF30 		mov	r0, #-1
 4911 0024 FFF7FEFF 		bl	mriCortexMSetPriority
 4912              	.LVL401:
 223:mri/architectures/armv7-m/armv7-m.c **** 
 4913              		.loc 1 223 1 is_stmt 0 view .LVU1227
 4914 0028 10BD     		pop	{r4, pc}
 4915              		.cfi_endproc
 4916              	.LFE223:
 4918              		.section	.text.defaultExternalInterruptsToLowerPriority,"ax",%progbits
 4919              		.align	1
 4920              		.syntax unified
 4921              		.thumb
 4922              		.thumb_func
 4924              	defaultExternalInterruptsToLowerPriority:
 4925              	.LVL402:
 4926              	.LFB224:
 226:mri/architectures/armv7-m/armv7-m.c ****     int irq;
 4927              		.loc 1 226 1 is_stmt 1 view -0
 4928              		.cfi_startproc
 4929              		@ args = 0, pretend = 0, frame = 0
 4930              		@ frame_needed = 0, uses_anonymous_args = 0
 226:mri/architectures/armv7-m/armv7-m.c ****     int irq;
 4931              		.loc 1 226 1 is_stmt 0 view .LVU1229
 4932 0000 70B5     		push	{r4, r5, r6, lr}
 4933              	.LCFI39:
 4934              		.cfi_def_cfa_offset 16
 4935              		.cfi_offset 4, -16
 4936              		.cfi_offset 5, -12
 4937              		.cfi_offset 6, -8
 4938              		.cfi_offset 14, -4
ARM GAS  /tmp/ccXppZcm.s 			page 194


 4939 0002 0646     		mov	r6, r0
 4940 0004 0D46     		mov	r5, r1
 227:mri/architectures/armv7-m/armv7-m.c **** 
 4941              		.loc 1 227 5 is_stmt 1 view .LVU1230
 229:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMSetPriority((IRQn_Type)irq, priority, 0);
 4942              		.loc 1 229 5 view .LVU1231
 4943              	.LVL403:
 229:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMSetPriority((IRQn_Type)irq, priority, 0);
 4944              		.loc 1 229 14 is_stmt 0 view .LVU1232
 4945 0006 0024     		movs	r4, #0
 229:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMSetPriority((IRQn_Type)irq, priority, 0);
 4946              		.loc 1 229 5 view .LVU1233
 4947 0008 05E0     		b	.L421
 4948              	.LVL404:
 4949              	.L422:
 230:mri/architectures/armv7-m/armv7-m.c **** }
 4950              		.loc 1 230 9 is_stmt 1 discriminator 3 view .LVU1234
 4951 000a 0022     		movs	r2, #0
 4952 000c 3146     		mov	r1, r6
 4953 000e 60B2     		sxtb	r0, r4
 4954 0010 FFF7FEFF 		bl	mriCortexMSetPriority
 4955              	.LVL405:
 229:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMSetPriority((IRQn_Type)irq, priority, 0);
 4956              		.loc 1 229 51 discriminator 3 view .LVU1235
 4957 0014 0134     		adds	r4, r4, #1
 4958              	.LVL406:
 4959              	.L421:
 229:mri/architectures/armv7-m/armv7-m.c ****         mriCortexMSetPriority((IRQn_Type)irq, priority, 0);
 4960              		.loc 1 229 24 discriminator 1 view .LVU1236
 4961 0016 A542     		cmp	r5, r4
 4962 0018 F7DA     		bge	.L422
 231:mri/architectures/armv7-m/armv7-m.c **** 
 4963              		.loc 1 231 1 is_stmt 0 view .LVU1237
 4964 001a 70BD     		pop	{r4, r5, r6, pc}
 231:mri/architectures/armv7-m/armv7-m.c **** 
 4965              		.loc 1 231 1 view .LVU1238
 4966              		.cfi_endproc
 4967              	.LFE224:
 4969              		.section	.text.enableDebugMonitorAtSpecifiedPriority,"ax",%progbits
 4970              		.align	1
 4971              		.syntax unified
 4972              		.thumb
 4973              		.thumb_func
 4975              	enableDebugMonitorAtSpecifiedPriority:
 4976              	.LVL407:
 4977              	.LFB226:
 239:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(DebugMonitor_IRQn, priority, priority);
 4978              		.loc 1 239 1 is_stmt 1 view -0
 4979              		.cfi_startproc
 4980              		@ args = 0, pretend = 0, frame = 0
 4981              		@ frame_needed = 0, uses_anonymous_args = 0
 239:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMSetPriority(DebugMonitor_IRQn, priority, priority);
 4982              		.loc 1 239 1 is_stmt 0 view .LVU1240
 4983 0000 08B5     		push	{r3, lr}
 4984              	.LCFI40:
 4985              		.cfi_def_cfa_offset 8
 4986              		.cfi_offset 3, -8
ARM GAS  /tmp/ccXppZcm.s 			page 195


 4987              		.cfi_offset 14, -4
 4988 0002 0146     		mov	r1, r0
 240:mri/architectures/armv7-m/armv7-m.c ****     enableDebugMonitor();
 4989              		.loc 1 240 5 is_stmt 1 view .LVU1241
 4990 0004 0246     		mov	r2, r0
 4991 0006 6FF00300 		mvn	r0, #3
 4992              	.LVL408:
 240:mri/architectures/armv7-m/armv7-m.c ****     enableDebugMonitor();
 4993              		.loc 1 240 5 is_stmt 0 view .LVU1242
 4994 000a FFF7FEFF 		bl	mriCortexMSetPriority
 4995              	.LVL409:
 241:mri/architectures/armv7-m/armv7-m.c **** }
 4996              		.loc 1 241 5 is_stmt 1 view .LVU1243
 4997              	.LBB308:
 4998              	.LBI308:
  94:mri/architectures/armv7-m/debug_cm3.h **** {
 4999              		.loc 4 94 22 view .LVU1244
 5000              	.LBB309:
  96:mri/architectures/armv7-m/debug_cm3.h **** }
 5001              		.loc 4 96 5 view .LVU1245
  96:mri/architectures/armv7-m/debug_cm3.h **** }
 5002              		.loc 4 96 14 is_stmt 0 view .LVU1246
 5003 000e 044A     		ldr	r2, .L426
 5004 0010 D2F8FC30 		ldr	r3, [r2, #252]
  96:mri/architectures/armv7-m/debug_cm3.h **** }
 5005              		.loc 4 96 22 view .LVU1247
 5006 0014 43F48033 		orr	r3, r3, #65536
 5007 0018 C2F8FC30 		str	r3, [r2, #252]
 5008              	.LBE309:
 5009              	.LBE308:
 242:mri/architectures/armv7-m/armv7-m.c **** 
 5010              		.loc 1 242 1 view .LVU1248
 5011 001c 08BD     		pop	{r3, pc}
 5012              	.L427:
 5013 001e 00BF     		.align	2
 5014              	.L426:
 5015 0020 00ED00E0 		.word	-536810240
 5016              		.cfi_endproc
 5017              	.LFE226:
 5019              		.section	.text.mriCortexMGetPriority,"ax",%progbits
 5020              		.align	1
 5021              		.global	mriCortexMGetPriority
 5022              		.syntax unified
 5023              		.thumb
 5024              		.thumb_func
 5026              	mriCortexMGetPriority:
 5027              	.LVL410:
 5028              	.LFB259:
 596:mri/architectures/armv7-m/armv7-m.c ****     uint8_t priority;
 5029              		.loc 1 596 1 is_stmt 1 view -0
 5030              		.cfi_startproc
 5031              		@ args = 0, pretend = 0, frame = 0
 5032              		@ frame_needed = 0, uses_anonymous_args = 0
 5033              		@ link register save eliminated.
 597:mri/architectures/armv7-m/armv7-m.c **** 
 5034              		.loc 1 597 5 view .LVU1250
 599:mri/architectures/armv7-m/armv7-m.c ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 196


 5035              		.loc 1 599 5 view .LVU1251
 599:mri/architectures/armv7-m/armv7-m.c ****     {
 5036              		.loc 1 599 8 is_stmt 0 view .LVU1252
 5037 0000 0028     		cmp	r0, #0
 5038              	.LVL411:
 599:mri/architectures/armv7-m/armv7-m.c ****     {
 5039              		.loc 1 599 8 view .LVU1253
 5040 0002 0BDB     		blt	.L429
 601:mri/architectures/armv7-m/armv7-m.c ****     }
 5041              		.loc 1 601 9 is_stmt 1 view .LVU1254
 601:mri/architectures/armv7-m/armv7-m.c ****     }
 5042              		.loc 1 601 18 is_stmt 0 view .LVU1255
 5043 0004 00F16040 		add	r0, r0, #-536870912
 5044 0008 00F56140 		add	r0, r0, #57600
 5045 000c 90F80003 		ldrb	r0, [r0, #768]	@ zero_extendqisi2
 5046 0010 C0B2     		uxtb	r0, r0
 5047              	.LVL412:
 5048              	.L430:
 607:mri/architectures/armv7-m/armv7-m.c **** }
 5049              		.loc 1 607 5 is_stmt 1 view .LVU1256
 607:mri/architectures/armv7-m/armv7-m.c **** }
 5050              		.loc 1 607 39 is_stmt 0 view .LVU1257
 5051 0012 054B     		ldr	r3, .L431
 5052 0014 DB6B     		ldr	r3, [r3, #60]
 607:mri/architectures/armv7-m/armv7-m.c **** }
 5053              		.loc 1 607 21 view .LVU1258
 5054 0016 1841     		asrs	r0, r0, r3
 5055              	.LVL413:
 608:mri/architectures/armv7-m/armv7-m.c **** 
 5056              		.loc 1 608 1 view .LVU1259
 5057 0018 C0B2     		uxtb	r0, r0
 5058 001a 7047     		bx	lr
 5059              	.LVL414:
 5060              	.L429:
 605:mri/architectures/armv7-m/armv7-m.c ****     }
 5061              		.loc 1 605 9 is_stmt 1 view .LVU1260
 605:mri/architectures/armv7-m/armv7-m.c ****     }
 5062              		.loc 1 605 44 is_stmt 0 view .LVU1261
 5063 001c 00F00F00 		and	r0, r0, #15
 605:mri/architectures/armv7-m/armv7-m.c ****     }
 5064              		.loc 1 605 18 view .LVU1262
 5065 0020 024B     		ldr	r3, .L431+4
 5066 0022 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 5067 0024 C0B2     		uxtb	r0, r0
 5068              	.LVL415:
 605:mri/architectures/armv7-m/armv7-m.c ****     }
 5069              		.loc 1 605 18 view .LVU1263
 5070 0026 F4E7     		b	.L430
 5071              	.L432:
 5072              		.align	2
 5073              	.L431:
 5074 0028 00000000 		.word	mriCortexMState
 5075 002c 14ED00E0 		.word	-536810220
 5076              		.cfi_endproc
 5077              	.LFE259:
 5079              		.section	.text.recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts,"ax",%progbits
 5080              		.align	1
ARM GAS  /tmp/ccXppZcm.s 			page 197


 5081              		.syntax unified
 5082              		.thumb
 5083              		.thumb_func
 5085              	recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts:
 5086              	.LFB255:
 569:mri/architectures/armv7-m/armv7-m.c ****     recordCurrentPriorityRegs();
 5087              		.loc 1 569 1 is_stmt 1 view -0
 5088              		.cfi_startproc
 5089              		@ args = 0, pretend = 0, frame = 0
 5090              		@ frame_needed = 0, uses_anonymous_args = 0
 5091 0000 10B5     		push	{r4, lr}
 5092              	.LCFI41:
 5093              		.cfi_def_cfa_offset 8
 5094              		.cfi_offset 4, -8
 5095              		.cfi_offset 14, -4
 570:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, PRIMASK, 0);
 5096              		.loc 1 570 5 view .LVU1265
 5097 0002 FFF7FEFF 		bl	recordCurrentPriorityRegs
 5098              	.LVL416:
 571:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, BASEPRI,
 5099              		.loc 1 571 5 view .LVU1266
 5100 0006 0A4C     		ldr	r4, .L435
 5101 0008 0022     		movs	r2, #0
 5102 000a 1321     		movs	r1, #19
 5103 000c 2046     		mov	r0, r4
 5104 000e FFF7FEFF 		bl	mriContext_Set
 5105              	.LVL417:
 572:mri/architectures/armv7-m/armv7-m.c ****                 calculateBasePriorityForThisCPU(mriCortexMGetPriority(DebugMonitor_IRQn) + 1));
 5106              		.loc 1 572 5 view .LVU1267
 573:mri/architectures/armv7-m/armv7-m.c **** }
 5107              		.loc 1 573 49 is_stmt 0 view .LVU1268
 5108 0012 6FF00300 		mvn	r0, #3
 5109 0016 FFF7FEFF 		bl	mriCortexMGetPriority
 5110              	.LVL418:
 573:mri/architectures/armv7-m/armv7-m.c **** }
 5111              		.loc 1 573 17 view .LVU1269
 5112 001a 0130     		adds	r0, r0, #1
 5113 001c C0B2     		uxtb	r0, r0
 5114 001e FFF7FEFF 		bl	calculateBasePriorityForThisCPU
 5115              	.LVL419:
 5116 0022 0246     		mov	r2, r0
 572:mri/architectures/armv7-m/armv7-m.c ****                 calculateBasePriorityForThisCPU(mriCortexMGetPriority(DebugMonitor_IRQn) + 1));
 5117              		.loc 1 572 5 view .LVU1270
 5118 0024 1421     		movs	r1, #20
 5119 0026 2046     		mov	r0, r4
 5120 0028 FFF7FEFF 		bl	mriContext_Set
 5121              	.LVL420:
 574:mri/architectures/armv7-m/armv7-m.c **** 
 5122              		.loc 1 574 1 view .LVU1271
 5123 002c 10BD     		pop	{r4, pc}
 5124              	.L436:
 5125 002e 00BF     		.align	2
 5126              	.L435:
 5127 0030 00000000 		.word	mriCortexMState
 5128              		.cfi_endproc
 5129              	.LFE255:
 5131              		.section	.text.hasDebugMonInterruptBeenDisabled,"ax",%progbits
ARM GAS  /tmp/ccXppZcm.s 			page 198


 5132              		.align	1
 5133              		.syntax unified
 5134              		.thumb
 5135              		.thumb_func
 5137              	hasDebugMonInterruptBeenDisabled:
 5138              	.LFB319:
1551:mri/architectures/armv7-m/armv7-m.c ****     /* Was user code in a critical section that disabled DebugMon interrupt when debug event occurr
 5139              		.loc 1 1551 1 is_stmt 1 view -0
 5140              		.cfi_startproc
 5141              		@ args = 0, pretend = 0, frame = 0
 5142              		@ frame_needed = 0, uses_anonymous_args = 0
 5143 0000 38B5     		push	{r3, r4, r5, lr}
 5144              	.LCFI42:
 5145              		.cfi_def_cfa_offset 16
 5146              		.cfi_offset 3, -16
 5147              		.cfi_offset 4, -12
 5148              		.cfi_offset 5, -8
 5149              		.cfi_offset 14, -4
1553:mri/architectures/armv7-m/armv7-m.c ****     uint32_t basepri = __get_BASEPRI();
 5150              		.loc 1 1553 5 view .LVU1273
 5151              	.LBB310:
 5152              	.LBI310:
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 5153              		.loc 3 382 31 view .LVU1274
 5154              	.LBB311:
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 5155              		.loc 3 384 3 view .LVU1275
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 5156              		.loc 3 386 3 view .LVU1276
 5157              		.syntax unified
 5158              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5159 0002 EFF31085 		MRS r5, primask
 5160              	@ 0 "" 2
 5161              	.LVL421:
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5162              		.loc 3 387 3 view .LVU1277
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5163              		.loc 3 387 3 is_stmt 0 view .LVU1278
 5164              		.thumb
 5165              		.syntax unified
 5166              	.LBE311:
 5167              	.LBE310:
1554:mri/architectures/armv7-m/armv7-m.c ****     uint32_t debugMonPriority = mriCortexMGetPriority(DebugMonitor_IRQn);
 5168              		.loc 1 1554 5 is_stmt 1 view .LVU1279
 5169              	.LBB312:
 5170              	.LBI312:
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 5171              		.loc 3 461 31 view .LVU1280
 5172              	.LBB313:
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 5173              		.loc 3 463 3 view .LVU1281
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 5174              		.loc 3 465 3 view .LVU1282
 5175              		.syntax unified
 5176              	@ 465 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5177 0006 EFF31184 		MRS r4, basepri
 5178              	@ 0 "" 2
ARM GAS  /tmp/ccXppZcm.s 			page 199


 5179              	.LVL422:
 466:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5180              		.loc 3 466 3 view .LVU1283
 466:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5181              		.loc 3 466 3 is_stmt 0 view .LVU1284
 5182              		.thumb
 5183              		.syntax unified
 5184              	.LBE313:
 5185              	.LBE312:
1555:mri/architectures/armv7-m/armv7-m.c **** 
 5186              		.loc 1 1555 5 is_stmt 1 view .LVU1285
1555:mri/architectures/armv7-m/armv7-m.c **** 
 5187              		.loc 1 1555 33 is_stmt 0 view .LVU1286
 5188 000a 6FF00300 		mvn	r0, #3
 5189 000e FFF7FEFF 		bl	mriCortexMGetPriority
 5190              	.LVL423:
1557:mri/architectures/armv7-m/armv7-m.c ****     {
 5191              		.loc 1 1557 5 is_stmt 1 view .LVU1287
1557:mri/architectures/armv7-m/armv7-m.c ****     {
 5192              		.loc 1 1557 8 is_stmt 0 view .LVU1288
 5193 0012 05B1     		cbz	r5, .L438
1557:mri/architectures/armv7-m/armv7-m.c ****     {
 5194              		.loc 1 1557 22 discriminator 1 view .LVU1289
 5195 0014 38B9     		cbnz	r0, .L440
 5196              	.L438:
1563:mri/architectures/armv7-m/armv7-m.c ****     {
 5197              		.loc 1 1563 10 is_stmt 1 view .LVU1290
1563:mri/architectures/armv7-m/armv7-m.c ****     {
 5198              		.loc 1 1563 13 is_stmt 0 view .LVU1291
 5199 0016 44B1     		cbz	r4, .L441
1563:mri/architectures/armv7-m/armv7-m.c ****     {
 5200              		.loc 1 1563 60 discriminator 1 view .LVU1292
 5201 0018 064B     		ldr	r3, .L444
 5202 001a DB6B     		ldr	r3, [r3, #60]
1563:mri/architectures/armv7-m/armv7-m.c ****     {
 5203              		.loc 1 1563 42 discriminator 1 view .LVU1293
 5204 001c DC40     		lsrs	r4, r4, r3
 5205              	.LVL424:
1563:mri/architectures/armv7-m/armv7-m.c ****     {
 5206              		.loc 1 1563 30 discriminator 1 view .LVU1294
 5207 001e 8442     		cmp	r4, r0
 5208 0020 05D9     		bls	.L442
1569:mri/architectures/armv7-m/armv7-m.c ****     }
 5209              		.loc 1 1569 16 view .LVU1295
 5210 0022 0020     		movs	r0, #0
 5211              	.LVL425:
1569:mri/architectures/armv7-m/armv7-m.c ****     }
 5212              		.loc 1 1569 16 view .LVU1296
 5213 0024 02E0     		b	.L437
 5214              	.LVL426:
 5215              	.L440:
1561:mri/architectures/armv7-m/armv7-m.c ****     }
 5216              		.loc 1 1561 16 view .LVU1297
 5217 0026 0120     		movs	r0, #1
 5218              	.LVL427:
1561:mri/architectures/armv7-m/armv7-m.c ****     }
 5219              		.loc 1 1561 16 view .LVU1298
ARM GAS  /tmp/ccXppZcm.s 			page 200


 5220 0028 00E0     		b	.L437
 5221              	.LVL428:
 5222              	.L441:
1569:mri/architectures/armv7-m/armv7-m.c ****     }
 5223              		.loc 1 1569 16 view .LVU1299
 5224 002a 0020     		movs	r0, #0
 5225              	.LVL429:
 5226              	.L437:
1571:mri/architectures/armv7-m/armv7-m.c **** 
 5227              		.loc 1 1571 1 view .LVU1300
 5228 002c 38BD     		pop	{r3, r4, r5, pc}
 5229              	.LVL430:
 5230              	.L442:
1565:mri/architectures/armv7-m/armv7-m.c ****     }
 5231              		.loc 1 1565 16 view .LVU1301
 5232 002e 0120     		movs	r0, #1
 5233              	.LVL431:
1565:mri/architectures/armv7-m/armv7-m.c ****     }
 5234              		.loc 1 1565 16 view .LVU1302
 5235 0030 FCE7     		b	.L437
 5236              	.L445:
 5237 0032 00BF     		.align	2
 5238              	.L444:
 5239 0034 00000000 		.word	mriCortexMState
 5240              		.cfi_endproc
 5241              	.LFE319:
 5243              		.section	.text.isExceptionPriorityLowEnoughToDebug,"ax",%progbits
 5244              		.align	1
 5245              		.syntax unified
 5246              		.thumb
 5247              		.thumb_func
 5249              	isExceptionPriorityLowEnoughToDebug:
 5250              	.LVL432:
 5251              	.LFB318:
1528:mri/architectures/armv7-m/armv7-m.c ****     if (hasDebugMonInterruptBeenDisabled())
 5252              		.loc 1 1528 1 is_stmt 1 view -0
 5253              		.cfi_startproc
 5254              		@ args = 0, pretend = 0, frame = 0
 5255              		@ frame_needed = 0, uses_anonymous_args = 0
1528:mri/architectures/armv7-m/armv7-m.c ****     if (hasDebugMonInterruptBeenDisabled())
 5256              		.loc 1 1528 1 is_stmt 0 view .LVU1304
 5257 0000 10B5     		push	{r4, lr}
 5258              	.LCFI43:
 5259              		.cfi_def_cfa_offset 8
 5260              		.cfi_offset 4, -8
 5261              		.cfi_offset 14, -4
 5262 0002 0446     		mov	r4, r0
1529:mri/architectures/armv7-m/armv7-m.c ****     {
 5263              		.loc 1 1529 5 is_stmt 1 view .LVU1305
1529:mri/architectures/armv7-m/armv7-m.c ****     {
 5264              		.loc 1 1529 9 is_stmt 0 view .LVU1306
 5265 0004 FFF7FEFF 		bl	hasDebugMonInterruptBeenDisabled
 5266              	.LVL433:
1529:mri/architectures/armv7-m/armv7-m.c ****     {
 5267              		.loc 1 1529 8 view .LVU1307
 5268 0008 90B9     		cbnz	r0, .L448
1534:mri/architectures/armv7-m/armv7-m.c ****     {
ARM GAS  /tmp/ccXppZcm.s 			page 201


 5269              		.loc 1 1534 10 is_stmt 1 view .LVU1308
1534:mri/architectures/armv7-m/armv7-m.c ****     {
 5270              		.loc 1 1534 13 is_stmt 0 view .LVU1309
 5271 000a 9CB1     		cbz	r4, .L449
1539:mri/architectures/armv7-m/armv7-m.c ****     {
 5272              		.loc 1 1539 10 is_stmt 1 view .LVU1310
1539:mri/architectures/armv7-m/armv7-m.c ****     {
 5273              		.loc 1 1539 35 is_stmt 0 view .LVU1311
 5274 000c 631E     		subs	r3, r4, #1
1539:mri/architectures/armv7-m/armv7-m.c ****     {
 5275              		.loc 1 1539 13 view .LVU1312
 5276 000e 022B     		cmp	r3, #2
 5277 0010 0FD9     		bls	.L446
1546:mri/architectures/armv7-m/armv7-m.c ****     }
 5278              		.loc 1 1546 9 is_stmt 1 view .LVU1313
1546:mri/architectures/armv7-m/armv7-m.c ****     }
 5279              		.loc 1 1546 41 is_stmt 0 view .LVU1314
 5280 0012 A4F11000 		sub	r0, r4, #16
1546:mri/architectures/armv7-m/armv7-m.c ****     }
 5281              		.loc 1 1546 16 view .LVU1315
 5282 0016 40B2     		sxtb	r0, r0
 5283 0018 FFF7FEFF 		bl	mriCortexMGetPriority
 5284              	.LVL434:
 5285 001c 0446     		mov	r4, r0
 5286              	.LVL435:
1546:mri/architectures/armv7-m/armv7-m.c ****     }
 5287              		.loc 1 1546 61 view .LVU1316
 5288 001e 6FF00300 		mvn	r0, #3
 5289 0022 FFF7FEFF 		bl	mriCortexMGetPriority
 5290              	.LVL436:
1546:mri/architectures/armv7-m/armv7-m.c ****     }
 5291              		.loc 1 1546 59 view .LVU1317
 5292 0026 8442     		cmp	r4, r0
 5293 0028 94BF     		ite	ls
 5294 002a 0020     		movls	r0, #0
 5295 002c 0120     		movhi	r0, #1
 5296 002e 00E0     		b	.L446
 5297              	.LVL437:
 5298              	.L448:
1532:mri/architectures/armv7-m/armv7-m.c ****     }
 5299              		.loc 1 1532 16 view .LVU1318
 5300 0030 0020     		movs	r0, #0
 5301              	.LVL438:
 5302              	.L446:
1548:mri/architectures/armv7-m/armv7-m.c **** 
 5303              		.loc 1 1548 1 view .LVU1319
 5304 0032 10BD     		pop	{r4, pc}
 5305              	.LVL439:
 5306              	.L449:
1537:mri/architectures/armv7-m/armv7-m.c ****     }
 5307              		.loc 1 1537 16 view .LVU1320
 5308 0034 0120     		movs	r0, #1
 5309 0036 FCE7     		b	.L446
 5310              		.cfi_endproc
 5311              	.LFE318:
 5313              		.section	.text.mriPlatform_IsSingleStepping,"ax",%progbits
 5314              		.align	1
ARM GAS  /tmp/ccXppZcm.s 			page 202


 5315              		.global	mriPlatform_IsSingleStepping
 5316              		.syntax unified
 5317              		.thumb
 5318              		.thumb_func
 5320              	mriPlatform_IsSingleStepping:
 5321              	.LFB260:
 612:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMFlags & CORTEXM_FLAGS_SINGLE_STEPPING;
 5322              		.loc 1 612 1 is_stmt 1 view -0
 5323              		.cfi_startproc
 5324              		@ args = 0, pretend = 0, frame = 0
 5325              		@ frame_needed = 0, uses_anonymous_args = 0
 5326              		@ link register save eliminated.
 613:mri/architectures/armv7-m/armv7-m.c **** }
 5327              		.loc 1 613 5 view .LVU1322
 613:mri/architectures/armv7-m/armv7-m.c **** }
 5328              		.loc 1 613 28 is_stmt 0 view .LVU1323
 5329 0000 024B     		ldr	r3, .L452
 5330 0002 1868     		ldr	r0, [r3]
 614:mri/architectures/armv7-m/armv7-m.c **** 
 5331              		.loc 1 614 1 view .LVU1324
 5332 0004 00F00400 		and	r0, r0, #4
 5333 0008 7047     		bx	lr
 5334              	.L453:
 5335 000a 00BF     		.align	2
 5336              	.L452:
 5337 000c 00000000 		.word	mriCortexMFlags
 5338              		.cfi_endproc
 5339              	.LFE260:
 5341              		.section	.text.mriPlatform_GetPacketBuffer,"ax",%progbits
 5342              		.align	1
 5343              		.global	mriPlatform_GetPacketBuffer
 5344              		.syntax unified
 5345              		.thumb
 5346              		.thumb_func
 5348              	mriPlatform_GetPacketBuffer:
 5349              	.LFB261:
 618:mri/architectures/armv7-m/armv7-m.c ****     return mriCortexMState.packetBuffer;
 5350              		.loc 1 618 1 is_stmt 1 view -0
 5351              		.cfi_startproc
 5352              		@ args = 0, pretend = 0, frame = 0
 5353              		@ frame_needed = 0, uses_anonymous_args = 0
 5354              		@ link register save eliminated.
 619:mri/architectures/armv7-m/armv7-m.c **** }
 5355              		.loc 1 619 5 view .LVU1326
 620:mri/architectures/armv7-m/armv7-m.c **** 
 5356              		.loc 1 620 1 is_stmt 0 view .LVU1327
 5357 0000 0048     		ldr	r0, .L455
 5358 0002 7047     		bx	lr
 5359              	.L456:
 5360              		.align	2
 5361              	.L455:
 5362 0004 44000000 		.word	mriCortexMState+68
 5363              		.cfi_endproc
 5364              	.LFE261:
 5366              		.section	.text.mriPlatform_GetPacketBufferSize,"ax",%progbits
 5367              		.align	1
 5368              		.global	mriPlatform_GetPacketBufferSize
ARM GAS  /tmp/ccXppZcm.s 			page 203


 5369              		.syntax unified
 5370              		.thumb
 5371              		.thumb_func
 5373              	mriPlatform_GetPacketBufferSize:
 5374              	.LFB262:
 624:mri/architectures/armv7-m/armv7-m.c ****     return sizeof(mriCortexMState.packetBuffer);
 5375              		.loc 1 624 1 is_stmt 1 view -0
 5376              		.cfi_startproc
 5377              		@ args = 0, pretend = 0, frame = 0
 5378              		@ frame_needed = 0, uses_anonymous_args = 0
 5379              		@ link register save eliminated.
 625:mri/architectures/armv7-m/armv7-m.c **** }
 5380              		.loc 1 625 5 view .LVU1329
 626:mri/architectures/armv7-m/armv7-m.c **** 
 5381              		.loc 1 626 1 is_stmt 0 view .LVU1330
 5382 0000 40F2C510 		movw	r0, #453
 5383 0004 7047     		bx	lr
 5384              		.cfi_endproc
 5385              	.LFE262:
 5387              		.section	.text.mriPlatform_GetTrapReason,"ax",%progbits
 5388              		.align	1
 5389              		.global	mriPlatform_GetTrapReason
 5390              		.syntax unified
 5391              		.thumb
 5392              		.thumb_func
 5394              	mriPlatform_GetTrapReason:
 5395              	.LVL440:
 5396              	.LFB269:
 764:mri/architectures/armv7-m/armv7-m.c ****     /* Return reason cached earlier by call to Platform_DetermineCauseOfException() so that findMat
 5397              		.loc 1 764 1 is_stmt 1 view -0
 5398              		.cfi_startproc
 5399              		@ args = 0, pretend = 0, frame = 0
 5400              		@ frame_needed = 0, uses_anonymous_args = 0
 5401              		@ link register save eliminated.
 764:mri/architectures/armv7-m/armv7-m.c ****     /* Return reason cached earlier by call to Platform_DetermineCauseOfException() so that findMat
 5402              		.loc 1 764 1 is_stmt 0 view .LVU1332
 5403 0000 0346     		mov	r3, r0
 767:mri/architectures/armv7-m/armv7-m.c **** }
 5404              		.loc 1 767 5 is_stmt 1 view .LVU1333
 767:mri/architectures/armv7-m/armv7-m.c **** }
 5405              		.loc 1 767 27 is_stmt 0 view .LVU1334
 5406 0002 034A     		ldr	r2, .L459
 5407 0004 92E80300 		ldm	r2, {r0, r1}
 5408              	.LVL441:
 767:mri/architectures/armv7-m/armv7-m.c **** }
 5409              		.loc 1 767 27 view .LVU1335
 5410 0008 83E80300 		stm	r3, {r0, r1}
 768:mri/architectures/armv7-m/armv7-m.c **** 
 5411              		.loc 1 768 1 view .LVU1336
 5412 000c 1846     		mov	r0, r3
 5413 000e 7047     		bx	lr
 5414              	.L460:
 5415              		.align	2
 5416              	.L459:
 5417 0010 08000000 		.word	mriCortexMState+8
 5418              		.cfi_endproc
 5419              	.LFE269:
ARM GAS  /tmp/ccXppZcm.s 			page 204


 5421              		.section	.rodata.mriPlatform_DisplayFaultCauseToGdbConsole.str1.4,"aMS",%progbits,1
 5422              		.align	2
 5423              	.LC23:
 5424 0000 0A00     		.ascii	"\012\000"
 5425              		.section	.text.mriPlatform_DisplayFaultCauseToGdbConsole,"ax",%progbits
 5426              		.align	1
 5427              		.global	mriPlatform_DisplayFaultCauseToGdbConsole
 5428              		.syntax unified
 5429              		.thumb
 5430              		.thumb_func
 5432              	mriPlatform_DisplayFaultCauseToGdbConsole:
 5433              	.LFB270:
 776:mri/architectures/armv7-m/armv7-m.c ****     switch (mriCortexMState.exceptionNumber)
 5434              		.loc 1 776 1 is_stmt 1 view -0
 5435              		.cfi_startproc
 5436              		@ args = 0, pretend = 0, frame = 0
 5437              		@ frame_needed = 0, uses_anonymous_args = 0
 5438 0000 08B5     		push	{r3, lr}
 5439              	.LCFI44:
 5440              		.cfi_def_cfa_offset 8
 5441              		.cfi_offset 3, -8
 5442              		.cfi_offset 14, -4
 777:mri/architectures/armv7-m/armv7-m.c ****     {
 5443              		.loc 1 777 5 view .LVU1338
 777:mri/architectures/armv7-m/armv7-m.c ****     {
 5444              		.loc 1 777 28 is_stmt 0 view .LVU1339
 5445 0002 0C4B     		ldr	r3, .L471
 5446 0004 9B69     		ldr	r3, [r3, #24]
 777:mri/architectures/armv7-m/armv7-m.c ****     {
 5447              		.loc 1 777 5 view .LVU1340
 5448 0006 033B     		subs	r3, r3, #3
 5449 0008 032B     		cmp	r3, #3
 5450 000a 08D8     		bhi	.L461
 5451 000c DFE803F0 		tbb	[pc, r3]
 5452              	.L464:
 5453 0010 02       		.byte	(.L467-.L464)/2
 5454 0011 08       		.byte	(.L466-.L464)/2
 5455 0012 0B       		.byte	(.L465-.L464)/2
 5456 0013 0E       		.byte	(.L463-.L464)/2
 5457              		.p2align 1
 5458              	.L467:
 781:mri/architectures/armv7-m/armv7-m.c ****         break;
 5459              		.loc 1 781 9 is_stmt 1 view .LVU1341
 5460 0014 FFF7FEFF 		bl	displayHardFaultCauseToGdbConsole
 5461              	.LVL442:
 782:mri/architectures/armv7-m/armv7-m.c ****     case 4:
 5462              		.loc 1 782 9 view .LVU1342
 5463              	.L468:
 798:mri/architectures/armv7-m/armv7-m.c **** }
 5464              		.loc 1 798 5 view .LVU1343
 5465 0018 0748     		ldr	r0, .L471+4
 5466 001a FFF7FEFF 		bl	mriGdbConsole_WriteString
 5467              	.LVL443:
 5468              	.L461:
 799:mri/architectures/armv7-m/armv7-m.c **** 
 5469              		.loc 1 799 1 is_stmt 0 view .LVU1344
 5470 001e 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccXppZcm.s 			page 205


 5471              	.L466:
 785:mri/architectures/armv7-m/armv7-m.c ****         break;
 5472              		.loc 1 785 9 is_stmt 1 view .LVU1345
 5473 0020 FFF7FEFF 		bl	displayMemFaultCauseToGdbConsole
 5474              	.LVL444:
 786:mri/architectures/armv7-m/armv7-m.c ****     case 5:
 5475              		.loc 1 786 9 view .LVU1346
 5476 0024 F8E7     		b	.L468
 5477              	.L465:
 789:mri/architectures/armv7-m/armv7-m.c ****         break;
 5478              		.loc 1 789 9 view .LVU1347
 5479 0026 FFF7FEFF 		bl	displayBusFaultCauseToGdbConsole
 5480              	.LVL445:
 790:mri/architectures/armv7-m/armv7-m.c ****     case 6:
 5481              		.loc 1 790 9 view .LVU1348
 5482 002a F5E7     		b	.L468
 5483              	.L463:
 793:mri/architectures/armv7-m/armv7-m.c ****         break;
 5484              		.loc 1 793 9 view .LVU1349
 5485 002c FFF7FEFF 		bl	displayUsageFaultCauseToGdbConsole
 5486              	.LVL446:
 794:mri/architectures/armv7-m/armv7-m.c ****     default:
 5487              		.loc 1 794 9 view .LVU1350
 5488 0030 F2E7     		b	.L468
 5489              	.L472:
 5490 0032 00BF     		.align	2
 5491              	.L471:
 5492 0034 00000000 		.word	mriCortexMState
 5493 0038 00000000 		.word	.LC23
 5494              		.cfi_endproc
 5495              	.LFE270:
 5497              		.section	.text.mriPlatform_LeavingDebugger,"ax",%progbits
 5498              		.align	1
 5499              		.global	mriPlatform_LeavingDebugger
 5500              		.syntax unified
 5501              		.thumb
 5502              		.thumb_func
 5504              	mriPlatform_LeavingDebugger:
 5505              	.LFB280:
 996:mri/architectures/armv7-m/armv7-m.c ****     checkStack();
 5506              		.loc 1 996 1 view -0
 5507              		.cfi_startproc
 5508              		@ args = 0, pretend = 0, frame = 0
 5509              		@ frame_needed = 0, uses_anonymous_args = 0
 5510 0000 08B5     		push	{r3, lr}
 5511              	.LCFI45:
 5512              		.cfi_def_cfa_offset 8
 5513              		.cfi_offset 3, -8
 5514              		.cfi_offset 14, -4
 997:mri/architectures/armv7-m/armv7-m.c ****     clearControlCFlag();
 5515              		.loc 1 997 5 view .LVU1352
 5516 0002 FFF7FEFF 		bl	checkStack
 5517              	.LVL447:
 998:mri/architectures/armv7-m/armv7-m.c ****     clearActiveDebugFlag();
 5518              		.loc 1 998 5 view .LVU1353
 5519 0006 FFF7FEFF 		bl	clearControlCFlag
 5520              	.LVL448:
ARM GAS  /tmp/ccXppZcm.s 			page 206


 999:mri/architectures/armv7-m/armv7-m.c ****     clearPendedFromFaultFlag();
 5521              		.loc 1 999 5 view .LVU1354
 5522 000a FFF7FEFF 		bl	clearActiveDebugFlag
 5523              	.LVL449:
1000:mri/architectures/armv7-m/armv7-m.c ****     clearMonitorPending();
 5524              		.loc 1 1000 5 view .LVU1355
 5525 000e FFF7FEFF 		bl	clearPendedFromFaultFlag
 5526              	.LVL450:
1001:mri/architectures/armv7-m/armv7-m.c **** }
 5527              		.loc 1 1001 5 view .LVU1356
 5528              	.LBB314:
 5529              	.LBI314:
 119:mri/architectures/armv7-m/debug_cm3.h **** {
 5530              		.loc 4 119 22 view .LVU1357
 5531              	.LBB315:
 121:mri/architectures/armv7-m/debug_cm3.h **** }
 5532              		.loc 4 121 5 view .LVU1358
 121:mri/architectures/armv7-m/debug_cm3.h **** }
 5533              		.loc 4 121 14 is_stmt 0 view .LVU1359
 5534 0012 044A     		ldr	r2, .L475
 5535 0014 D2F8FC30 		ldr	r3, [r2, #252]
 121:mri/architectures/armv7-m/debug_cm3.h **** }
 5536              		.loc 4 121 22 view .LVU1360
 5537 0018 23F40033 		bic	r3, r3, #131072
 5538 001c C2F8FC30 		str	r3, [r2, #252]
 5539              	.LBE315:
 5540              	.LBE314:
1002:mri/architectures/armv7-m/armv7-m.c **** 
 5541              		.loc 1 1002 1 view .LVU1361
 5542 0020 08BD     		pop	{r3, pc}
 5543              	.L476:
 5544 0022 00BF     		.align	2
 5545              	.L475:
 5546 0024 00ED00E0 		.word	-536810240
 5547              		.cfi_endproc
 5548              	.LFE280:
 5550              		.section	.text.mriPlatform_GetProgramCounter,"ax",%progbits
 5551              		.align	1
 5552              		.global	mriPlatform_GetProgramCounter
 5553              		.syntax unified
 5554              		.thumb
 5555              		.thumb_func
 5557              	mriPlatform_GetProgramCounter:
 5558              	.LFB285:
1035:mri/architectures/armv7-m/armv7-m.c ****     return Context_Get(&mriCortexMState.context, PC);
 5559              		.loc 1 1035 1 is_stmt 1 view -0
 5560              		.cfi_startproc
 5561              		@ args = 0, pretend = 0, frame = 0
 5562              		@ frame_needed = 0, uses_anonymous_args = 0
 5563 0000 08B5     		push	{r3, lr}
 5564              	.LCFI46:
 5565              		.cfi_def_cfa_offset 8
 5566              		.cfi_offset 3, -8
 5567              		.cfi_offset 14, -4
1036:mri/architectures/armv7-m/armv7-m.c **** }
 5568              		.loc 1 1036 5 view .LVU1363
1036:mri/architectures/armv7-m/armv7-m.c **** }
ARM GAS  /tmp/ccXppZcm.s 			page 207


 5569              		.loc 1 1036 12 is_stmt 0 view .LVU1364
 5570 0002 0F21     		movs	r1, #15
 5571 0004 0148     		ldr	r0, .L479
 5572 0006 FFF7FEFF 		bl	mriContext_Get
 5573              	.LVL451:
1037:mri/architectures/armv7-m/armv7-m.c **** 
 5574              		.loc 1 1037 1 view .LVU1365
 5575 000a 08BD     		pop	{r3, pc}
 5576              	.L480:
 5577              		.align	2
 5578              	.L479:
 5579 000c 00000000 		.word	mriCortexMState
 5580              		.cfi_endproc
 5581              	.LFE285:
 5583              		.section	.text.mriPlatform_SetProgramCounter,"ax",%progbits
 5584              		.align	1
 5585              		.global	mriPlatform_SetProgramCounter
 5586              		.syntax unified
 5587              		.thumb
 5588              		.thumb_func
 5590              	mriPlatform_SetProgramCounter:
 5591              	.LVL452:
 5592              	.LFB286:
1041:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, PC, newPC);
 5593              		.loc 1 1041 1 is_stmt 1 view -0
 5594              		.cfi_startproc
 5595              		@ args = 0, pretend = 0, frame = 0
 5596              		@ frame_needed = 0, uses_anonymous_args = 0
1041:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, PC, newPC);
 5597              		.loc 1 1041 1 is_stmt 0 view .LVU1367
 5598 0000 08B5     		push	{r3, lr}
 5599              	.LCFI47:
 5600              		.cfi_def_cfa_offset 8
 5601              		.cfi_offset 3, -8
 5602              		.cfi_offset 14, -4
 5603 0002 0246     		mov	r2, r0
1042:mri/architectures/armv7-m/armv7-m.c **** }
 5604              		.loc 1 1042 5 is_stmt 1 view .LVU1368
 5605 0004 0F21     		movs	r1, #15
 5606 0006 0248     		ldr	r0, .L483
 5607              	.LVL453:
1042:mri/architectures/armv7-m/armv7-m.c **** }
 5608              		.loc 1 1042 5 is_stmt 0 view .LVU1369
 5609 0008 FFF7FEFF 		bl	mriContext_Set
 5610              	.LVL454:
1043:mri/architectures/armv7-m/armv7-m.c **** 
 5611              		.loc 1 1043 1 view .LVU1370
 5612 000c 08BD     		pop	{r3, pc}
 5613              	.L484:
 5614 000e 00BF     		.align	2
 5615              	.L483:
 5616 0010 00000000 		.word	mriCortexMState
 5617              		.cfi_endproc
 5618              	.LFE286:
 5620              		.section	.text.mriPlatform_WasProgramCounterModifiedByUser,"ax",%progbits
 5621              		.align	1
 5622              		.global	mriPlatform_WasProgramCounterModifiedByUser
ARM GAS  /tmp/ccXppZcm.s 			page 208


 5623              		.syntax unified
 5624              		.thumb
 5625              		.thumb_func
 5627              	mriPlatform_WasProgramCounterModifiedByUser:
 5628              	.LFB289:
1087:mri/architectures/armv7-m/armv7-m.c ****     return Platform_GetProgramCounter() != mriCortexMState.originalPC;
 5629              		.loc 1 1087 1 is_stmt 1 view -0
 5630              		.cfi_startproc
 5631              		@ args = 0, pretend = 0, frame = 0
 5632              		@ frame_needed = 0, uses_anonymous_args = 0
 5633 0000 08B5     		push	{r3, lr}
 5634              	.LCFI48:
 5635              		.cfi_def_cfa_offset 8
 5636              		.cfi_offset 3, -8
 5637              		.cfi_offset 14, -4
1088:mri/architectures/armv7-m/armv7-m.c **** }
 5638              		.loc 1 1088 5 view .LVU1372
1088:mri/architectures/armv7-m/armv7-m.c **** }
 5639              		.loc 1 1088 12 is_stmt 0 view .LVU1373
 5640 0002 FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 5641              	.LVL455:
1088:mri/architectures/armv7-m/armv7-m.c **** }
 5642              		.loc 1 1088 59 view .LVU1374
 5643 0006 034B     		ldr	r3, .L487
 5644 0008 1B6B     		ldr	r3, [r3, #48]
1089:mri/architectures/armv7-m/armv7-m.c **** 
 5645              		.loc 1 1089 1 view .LVU1375
 5646 000a C01A     		subs	r0, r0, r3
 5647 000c 18BF     		it	ne
 5648 000e 0120     		movne	r0, #1
 5649 0010 08BD     		pop	{r3, pc}
 5650              	.L488:
 5651 0012 00BF     		.align	2
 5652              	.L487:
 5653 0014 00000000 		.word	mriCortexMState
 5654              		.cfi_endproc
 5655              	.LFE289:
 5657              		.section	.text.mriPlatform_GetSemihostCallParameters,"ax",%progbits
 5658              		.align	1
 5659              		.global	mriPlatform_GetSemihostCallParameters
 5660              		.syntax unified
 5661              		.thumb
 5662              		.thumb_func
 5664              	mriPlatform_GetSemihostCallParameters:
 5665              	.LVL456:
 5666              	.LFB294:
1145:mri/architectures/armv7-m/armv7-m.c ****     PlatformSemihostParameters parameters;
 5667              		.loc 1 1145 1 is_stmt 1 view -0
 5668              		.cfi_startproc
 5669              		@ args = 0, pretend = 0, frame = 0
 5670              		@ frame_needed = 0, uses_anonymous_args = 0
1145:mri/architectures/armv7-m/armv7-m.c ****     PlatformSemihostParameters parameters;
 5671              		.loc 1 1145 1 is_stmt 0 view .LVU1377
 5672 0000 38B5     		push	{r3, r4, r5, lr}
 5673              	.LCFI49:
 5674              		.cfi_def_cfa_offset 16
 5675              		.cfi_offset 3, -16
ARM GAS  /tmp/ccXppZcm.s 			page 209


 5676              		.cfi_offset 4, -12
 5677              		.cfi_offset 5, -8
 5678              		.cfi_offset 14, -4
 5679 0002 0446     		mov	r4, r0
1146:mri/architectures/armv7-m/armv7-m.c **** 
 5680              		.loc 1 1146 5 is_stmt 1 view .LVU1378
1148:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter2 = Context_Get(&mriCortexMState.context, R1);
 5681              		.loc 1 1148 5 view .LVU1379
1148:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter2 = Context_Get(&mriCortexMState.context, R1);
 5682              		.loc 1 1148 29 is_stmt 0 view .LVU1380
 5683 0004 0B4D     		ldr	r5, .L491
 5684 0006 0021     		movs	r1, #0
 5685 0008 2846     		mov	r0, r5
 5686              	.LVL457:
1148:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter2 = Context_Get(&mriCortexMState.context, R1);
 5687              		.loc 1 1148 29 view .LVU1381
 5688 000a FFF7FEFF 		bl	mriContext_Get
 5689              	.LVL458:
1148:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter2 = Context_Get(&mriCortexMState.context, R1);
 5690              		.loc 1 1148 27 view .LVU1382
 5691 000e 2060     		str	r0, [r4]
1149:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter3 = Context_Get(&mriCortexMState.context, R2);
 5692              		.loc 1 1149 5 is_stmt 1 view .LVU1383
1149:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter3 = Context_Get(&mriCortexMState.context, R2);
 5693              		.loc 1 1149 29 is_stmt 0 view .LVU1384
 5694 0010 0121     		movs	r1, #1
 5695 0012 2846     		mov	r0, r5
 5696 0014 FFF7FEFF 		bl	mriContext_Get
 5697              	.LVL459:
1149:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter3 = Context_Get(&mriCortexMState.context, R2);
 5698              		.loc 1 1149 27 view .LVU1385
 5699 0018 6060     		str	r0, [r4, #4]
1150:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter4 = Context_Get(&mriCortexMState.context, R3);
 5700              		.loc 1 1150 5 is_stmt 1 view .LVU1386
1150:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter4 = Context_Get(&mriCortexMState.context, R3);
 5701              		.loc 1 1150 29 is_stmt 0 view .LVU1387
 5702 001a 0221     		movs	r1, #2
 5703 001c 2846     		mov	r0, r5
 5704 001e FFF7FEFF 		bl	mriContext_Get
 5705              	.LVL460:
1150:mri/architectures/armv7-m/armv7-m.c ****     parameters.parameter4 = Context_Get(&mriCortexMState.context, R3);
 5706              		.loc 1 1150 27 view .LVU1388
 5707 0022 A060     		str	r0, [r4, #8]
1151:mri/architectures/armv7-m/armv7-m.c **** 
 5708              		.loc 1 1151 5 is_stmt 1 view .LVU1389
1151:mri/architectures/armv7-m/armv7-m.c **** 
 5709              		.loc 1 1151 29 is_stmt 0 view .LVU1390
 5710 0024 0321     		movs	r1, #3
 5711 0026 2846     		mov	r0, r5
 5712 0028 FFF7FEFF 		bl	mriContext_Get
 5713              	.LVL461:
1151:mri/architectures/armv7-m/armv7-m.c **** 
 5714              		.loc 1 1151 27 view .LVU1391
 5715 002c E060     		str	r0, [r4, #12]
1153:mri/architectures/armv7-m/armv7-m.c **** }
 5716              		.loc 1 1153 5 is_stmt 1 view .LVU1392
1154:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 210


 5717              		.loc 1 1154 1 is_stmt 0 view .LVU1393
 5718 002e 2046     		mov	r0, r4
 5719 0030 38BD     		pop	{r3, r4, r5, pc}
 5720              	.LVL462:
 5721              	.L492:
1154:mri/architectures/armv7-m/armv7-m.c **** 
 5722              		.loc 1 1154 1 view .LVU1394
 5723 0032 00BF     		.align	2
 5724              	.L491:
 5725 0034 00000000 		.word	mriCortexMState
 5726              		.cfi_endproc
 5727              	.LFE294:
 5729              		.section	.text.mriPlatform_SetSemihostCallReturnAndErrnoValues,"ax",%progbits
 5730              		.align	1
 5731              		.global	mriPlatform_SetSemihostCallReturnAndErrnoValues
 5732              		.syntax unified
 5733              		.thumb
 5734              		.thumb_func
 5736              	mriPlatform_SetSemihostCallReturnAndErrnoValues:
 5737              	.LVL463:
 5738              	.LFB295:
1158:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, R0, returnValue);
 5739              		.loc 1 1158 1 is_stmt 1 view -0
 5740              		.cfi_startproc
 5741              		@ args = 0, pretend = 0, frame = 0
 5742              		@ frame_needed = 0, uses_anonymous_args = 0
1158:mri/architectures/armv7-m/armv7-m.c ****     Context_Set(&mriCortexMState.context, R0, returnValue);
 5743              		.loc 1 1158 1 is_stmt 0 view .LVU1396
 5744 0000 08B5     		push	{r3, lr}
 5745              	.LCFI50:
 5746              		.cfi_def_cfa_offset 8
 5747              		.cfi_offset 3, -8
 5748              		.cfi_offset 14, -4
 5749 0002 0246     		mov	r2, r0
1159:mri/architectures/armv7-m/armv7-m.c **** }
 5750              		.loc 1 1159 5 is_stmt 1 view .LVU1397
 5751 0004 0021     		movs	r1, #0
 5752              	.LVL464:
1159:mri/architectures/armv7-m/armv7-m.c **** }
 5753              		.loc 1 1159 5 is_stmt 0 view .LVU1398
 5754 0006 0248     		ldr	r0, .L495
 5755              	.LVL465:
1159:mri/architectures/armv7-m/armv7-m.c **** }
 5756              		.loc 1 1159 5 view .LVU1399
 5757 0008 FFF7FEFF 		bl	mriContext_Set
 5758              	.LVL466:
1160:mri/architectures/armv7-m/armv7-m.c **** 
 5759              		.loc 1 1160 1 view .LVU1400
 5760 000c 08BD     		pop	{r3, pc}
 5761              	.L496:
 5762 000e 00BF     		.align	2
 5763              	.L495:
 5764 0010 00000000 		.word	mriCortexMState
 5765              		.cfi_endproc
 5766              	.LFE295:
 5768              		.section	.text.mriPlatform_WasMemoryFaultEncountered,"ax",%progbits
 5769              		.align	1
ARM GAS  /tmp/ccXppZcm.s 			page 211


 5770              		.global	mriPlatform_WasMemoryFaultEncountered
 5771              		.syntax unified
 5772              		.thumb
 5773              		.thumb_func
 5775              	mriPlatform_WasMemoryFaultEncountered:
 5776              	.LFB296:
1164:mri/architectures/armv7-m/armv7-m.c ****     int wasFaultEncountered;
 5777              		.loc 1 1164 1 is_stmt 1 view -0
 5778              		.cfi_startproc
 5779              		@ args = 0, pretend = 0, frame = 0
 5780              		@ frame_needed = 0, uses_anonymous_args = 0
 5781 0000 10B5     		push	{r4, lr}
 5782              	.LCFI51:
 5783              		.cfi_def_cfa_offset 8
 5784              		.cfi_offset 4, -8
 5785              		.cfi_offset 14, -4
1165:mri/architectures/armv7-m/armv7-m.c **** 
 5786              		.loc 1 1165 5 view .LVU1402
1167:mri/architectures/armv7-m/armv7-m.c ****     wasFaultEncountered = mriCortexMFlags & CORTEXM_FLAGS_FAULT_DURING_DEBUG;
 5787              		.loc 1 1167 5 view .LVU1403
 5788              	.LBB316:
 5789              	.LBI316:
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 5790              		.loc 3 877 27 view .LVU1404
 5791              	.LBB317:
 5792              		.loc 3 879 3 view .LVU1405
 5793              		.syntax unified
 5794              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5795 0002 BFF34F8F 		dsb 0xF
 5796              	@ 0 "" 2
 5797              		.thumb
 5798              		.syntax unified
 5799              	.LBE317:
 5800              	.LBE316:
1168:mri/architectures/armv7-m/armv7-m.c ****     clearMemoryFaultFlag();
 5801              		.loc 1 1168 5 view .LVU1406
1168:mri/architectures/armv7-m/armv7-m.c ****     clearMemoryFaultFlag();
 5802              		.loc 1 1168 43 is_stmt 0 view .LVU1407
 5803 0006 044B     		ldr	r3, .L499
 5804 0008 1C68     		ldr	r4, [r3]
1168:mri/architectures/armv7-m/armv7-m.c ****     clearMemoryFaultFlag();
 5805              		.loc 1 1168 25 view .LVU1408
 5806 000a 04F00204 		and	r4, r4, #2
 5807              	.LVL467:
1169:mri/architectures/armv7-m/armv7-m.c **** 
 5808              		.loc 1 1169 5 is_stmt 1 view .LVU1409
 5809 000e FFF7FEFF 		bl	clearMemoryFaultFlag
 5810              	.LVL468:
1171:mri/architectures/armv7-m/armv7-m.c **** }
 5811              		.loc 1 1171 5 view .LVU1410
1172:mri/architectures/armv7-m/armv7-m.c **** 
 5812              		.loc 1 1172 1 is_stmt 0 view .LVU1411
 5813 0012 2046     		mov	r0, r4
 5814 0014 10BD     		pop	{r4, pc}
 5815              	.LVL469:
 5816              	.L500:
1172:mri/architectures/armv7-m/armv7-m.c **** 
ARM GAS  /tmp/ccXppZcm.s 			page 212


 5817              		.loc 1 1172 1 view .LVU1412
 5818 0016 00BF     		.align	2
 5819              	.L499:
 5820 0018 00000000 		.word	mriCortexMFlags
 5821              		.cfi_endproc
 5822              	.LFE296:
 5824              		.section	.text.throwingMemRead16,"ax",%progbits
 5825              		.align	1
 5826              		.syntax unified
 5827              		.thumb
 5828              		.thumb_func
 5830              	throwingMemRead16:
 5831              	.LVL470:
 5832              	.LFB248:
 486:mri/architectures/armv7-m/armv7-m.c ****     uint16_t instructionWord = Platform_MemRead16((const uint16_t*)address);
 5833              		.loc 1 486 1 is_stmt 1 view -0
 5834              		.cfi_startproc
 5835              		@ args = 0, pretend = 0, frame = 0
 5836              		@ frame_needed = 0, uses_anonymous_args = 0
 486:mri/architectures/armv7-m/armv7-m.c ****     uint16_t instructionWord = Platform_MemRead16((const uint16_t*)address);
 5837              		.loc 1 486 1 is_stmt 0 view .LVU1414
 5838 0000 10B5     		push	{r4, lr}
 5839              	.LCFI52:
 5840              		.cfi_def_cfa_offset 8
 5841              		.cfi_offset 4, -8
 5842              		.cfi_offset 14, -4
 487:mri/architectures/armv7-m/armv7-m.c ****     if (Platform_WasMemoryFaultEncountered())
 5843              		.loc 1 487 5 is_stmt 1 view .LVU1415
 487:mri/architectures/armv7-m/armv7-m.c ****     if (Platform_WasMemoryFaultEncountered())
 5844              		.loc 1 487 32 is_stmt 0 view .LVU1416
 5845 0002 FFF7FEFF 		bl	mriPlatform_MemRead16
 5846              	.LVL471:
 487:mri/architectures/armv7-m/armv7-m.c ****     if (Platform_WasMemoryFaultEncountered())
 5847              		.loc 1 487 32 view .LVU1417
 5848 0006 0446     		mov	r4, r0
 5849              	.LVL472:
 488:mri/architectures/armv7-m/armv7-m.c ****         __throw_and_return(memFaultException, 0);
 5850              		.loc 1 488 5 is_stmt 1 view .LVU1418
 488:mri/architectures/armv7-m/armv7-m.c ****         __throw_and_return(memFaultException, 0);
 5851              		.loc 1 488 9 is_stmt 0 view .LVU1419
 5852 0008 FFF7FEFF 		bl	mriPlatform_WasMemoryFaultEncountered
 5853              	.LVL473:
 488:mri/architectures/armv7-m/armv7-m.c ****         __throw_and_return(memFaultException, 0);
 5854              		.loc 1 488 8 view .LVU1420
 5855 000c 08B9     		cbnz	r0, .L504
 5856              	.LVL474:
 5857              	.L502:
 491:mri/architectures/armv7-m/armv7-m.c **** 
 5858              		.loc 1 491 1 view .LVU1421
 5859 000e 2046     		mov	r0, r4
 5860 0010 10BD     		pop	{r4, pc}
 5861              	.LVL475:
 5862              	.L504:
 489:mri/architectures/armv7-m/armv7-m.c ****     return instructionWord;
 5863              		.loc 1 489 9 is_stmt 1 view .LVU1422
 5864              	.LBB318:
 5865              	.LBI318:
ARM GAS  /tmp/ccXppZcm.s 			page 213


  71:mri/core/try_catch.h **** {
 5866              		.loc 5 71 20 view .LVU1423
 5867              	.LBB319:
 5868              		.loc 5 73 5 view .LVU1424
 5869              		.loc 5 73 73 is_stmt 0 view .LVU1425
 5870 0012 044A     		ldr	r2, .L505
 5871 0014 1368     		ldr	r3, [r2]
 5872 0016 0A2B     		cmp	r3, #10
 5873 0018 B8BF     		it	lt
 5874 001a 0A23     		movlt	r3, #10
 5875              		.loc 5 73 22 view .LVU1426
 5876 001c 1360     		str	r3, [r2]
 5877              	.LVL476:
 5878              		.loc 5 73 22 view .LVU1427
 5879              	.LBE319:
 5880              	.LBE318:
 489:mri/architectures/armv7-m/armv7-m.c ****     return instructionWord;
 5881              		.loc 1 489 9 view .LVU1428
 5882 001e 0024     		movs	r4, #0
 5883              	.LVL477:
 489:mri/architectures/armv7-m/armv7-m.c ****     return instructionWord;
 5884              		.loc 1 489 9 view .LVU1429
 5885 0020 F5E7     		b	.L502
 5886              	.L506:
 5887 0022 00BF     		.align	2
 5888              	.L505:
 5889 0024 00000000 		.word	mriExceptionCode
 5890              		.cfi_endproc
 5891              	.LFE248:
 5893              		.section	.text.getFirstHalfWordOfCurrentInstruction,"ax",%progbits
 5894              		.align	1
 5895              		.syntax unified
 5896              		.thumb
 5897              		.thumb_func
 5899              	getFirstHalfWordOfCurrentInstruction:
 5900              	.LFB246:
 476:mri/architectures/armv7-m/armv7-m.c ****     return throwingMemRead16(Platform_GetProgramCounter());
 5901              		.loc 1 476 1 is_stmt 1 view -0
 5902              		.cfi_startproc
 5903              		@ args = 0, pretend = 0, frame = 0
 5904              		@ frame_needed = 0, uses_anonymous_args = 0
 5905 0000 08B5     		push	{r3, lr}
 5906              	.LCFI53:
 5907              		.cfi_def_cfa_offset 8
 5908              		.cfi_offset 3, -8
 5909              		.cfi_offset 14, -4
 477:mri/architectures/armv7-m/armv7-m.c **** }
 5910              		.loc 1 477 5 view .LVU1431
 477:mri/architectures/armv7-m/armv7-m.c **** }
 5911              		.loc 1 477 12 is_stmt 0 view .LVU1432
 5912 0002 FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 5913              	.LVL478:
 5914 0006 FFF7FEFF 		bl	throwingMemRead16
 5915              	.LVL479:
 478:mri/architectures/armv7-m/armv7-m.c **** 
 5916              		.loc 1 478 1 view .LVU1433
 5917 000a 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccXppZcm.s 			page 214


 5918              		.cfi_endproc
 5919              	.LFE246:
 5921              		.section	.text.doesPCPointToSVCInstruction,"ax",%progbits
 5922              		.align	1
 5923              		.syntax unified
 5924              		.thumb
 5925              		.thumb_func
 5927              	doesPCPointToSVCInstruction:
 5928              	.LFB240:
 403:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t svcMachineCodeMask = 0xff00;
 5929              		.loc 1 403 1 is_stmt 1 view -0
 5930              		.cfi_startproc
 5931              		@ args = 0, pretend = 0, frame = 0
 5932              		@ frame_needed = 0, uses_anonymous_args = 0
 5933 0000 10B5     		push	{r4, lr}
 5934              	.LCFI54:
 5935              		.cfi_def_cfa_offset 8
 5936              		.cfi_offset 4, -8
 5937              		.cfi_offset 14, -4
 404:mri/architectures/armv7-m/armv7-m.c ****     static const uint16_t svcMachineCode = 0xdf00;
 5938              		.loc 1 404 5 view .LVU1435
 405:mri/architectures/armv7-m/armv7-m.c ****     uint16_t              instructionWord;
 5939              		.loc 1 405 5 view .LVU1436
 406:mri/architectures/armv7-m/armv7-m.c **** 
 5940              		.loc 1 406 5 view .LVU1437
 408:mri/architectures/armv7-m/armv7-m.c ****     {
 5941              		.loc 1 408 5 view .LVU1438
 408:mri/architectures/armv7-m/armv7-m.c ****     {
 5942              		.loc 1 408 5 view .LVU1439
 5943              	.LBB320:
 5944              	.LBI320:
  74:mri/core/try_catch.h **** }
  75:mri/core/try_catch.h **** 
  76:mri/core/try_catch.h **** static inline void clearExceptionCode(void)
 5945              		.loc 5 76 20 view .LVU1440
 5946              	.LBB321:
  77:mri/core/try_catch.h **** {
  78:mri/core/try_catch.h ****     mriExceptionCode = noException;
 5947              		.loc 5 78 5 view .LVU1441
 5948              		.loc 5 78 22 is_stmt 0 view .LVU1442
 5949 0002 094C     		ldr	r4, .L514
 5950 0004 0023     		movs	r3, #0
 5951 0006 2360     		str	r3, [r4]
 5952              	.LBE321:
 5953              	.LBE320:
 410:mri/architectures/armv7-m/armv7-m.c ****     }
 5954              		.loc 1 410 9 is_stmt 1 view .LVU1443
 410:mri/architectures/armv7-m/armv7-m.c ****     }
 5955              		.loc 1 410 27 is_stmt 0 view .LVU1444
 5956 0008 FFF7FEFF 		bl	getFirstHalfWordOfCurrentInstruction
 5957              	.LVL480:
 408:mri/architectures/armv7-m/armv7-m.c ****     {
 5958              		.loc 1 408 5 is_stmt 1 view .LVU1445
 412:mri/architectures/armv7-m/armv7-m.c ****     {
 5959              		.loc 1 412 5 view .LVU1446
 5960 000c 2368     		ldr	r3, [r4]
 5961 000e 3BB9     		cbnz	r3, .L513
ARM GAS  /tmp/ccXppZcm.s 			page 215


 418:mri/architectures/armv7-m/armv7-m.c **** }
 5962              		.loc 1 418 5 view .LVU1447
 418:mri/architectures/armv7-m/armv7-m.c **** }
 5963              		.loc 1 418 52 is_stmt 0 view .LVU1448
 5964 0010 00F47F40 		and	r0, r0, #65280
 5965              	.LVL481:
 418:mri/architectures/armv7-m/armv7-m.c **** }
 5966              		.loc 1 418 52 view .LVU1449
 5967 0014 B0F55F4F 		cmp	r0, #57088
 5968 0018 14BF     		ite	ne
 5969 001a 0020     		movne	r0, #0
 5970 001c 0120     		moveq	r0, #1
 5971              	.L509:
 419:mri/architectures/armv7-m/armv7-m.c **** 
 5972              		.loc 1 419 1 view .LVU1450
 5973 001e 10BD     		pop	{r4, pc}
 5974              	.LVL482:
 5975              	.L513:
 414:mri/architectures/armv7-m/armv7-m.c ****         return 0;
 5976              		.loc 1 414 9 is_stmt 1 view .LVU1451
 5977              	.LBB322:
 5978              	.LBI322:
  76:mri/core/try_catch.h **** {
 5979              		.loc 5 76 20 view .LVU1452
 5980              	.LBB323:
 5981              		.loc 5 78 5 view .LVU1453
 5982              		.loc 5 78 22 is_stmt 0 view .LVU1454
 5983 0020 0020     		movs	r0, #0
 5984              	.LVL483:
 5985              		.loc 5 78 22 view .LVU1455
 5986 0022 2060     		str	r0, [r4]
 5987              	.LBE323:
 5988              	.LBE322:
 415:mri/architectures/armv7-m/armv7-m.c ****     }
 5989              		.loc 1 415 9 is_stmt 1 view .LVU1456
 415:mri/architectures/armv7-m/armv7-m.c ****     }
 5990              		.loc 1 415 16 is_stmt 0 view .LVU1457
 5991 0024 FBE7     		b	.L509
 5992              	.L515:
 5993 0026 00BF     		.align	2
 5994              	.L514:
 5995 0028 00000000 		.word	mriExceptionCode
 5996              		.cfi_endproc
 5997              	.LFE240:
 5999              		.section	.text.mriPlatform_AdvanceProgramCounterToNextInstruction,"ax",%progbits
 6000              		.align	1
 6001              		.global	mriPlatform_AdvanceProgramCounterToNextInstruction
 6002              		.syntax unified
 6003              		.thumb
 6004              		.thumb_func
 6006              	mriPlatform_AdvanceProgramCounterToNextInstruction:
 6007              	.LFB287:
1048:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  firstWordOfCurrentInstruction;
 6008              		.loc 1 1048 1 is_stmt 1 view -0
 6009              		.cfi_startproc
 6010              		@ args = 0, pretend = 0, frame = 0
 6011              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccXppZcm.s 			page 216


 6012 0000 10B5     		push	{r4, lr}
 6013              	.LCFI55:
 6014              		.cfi_def_cfa_offset 8
 6015              		.cfi_offset 4, -8
 6016              		.cfi_offset 14, -4
1049:mri/architectures/armv7-m/armv7-m.c **** 
 6017              		.loc 1 1049 5 view .LVU1459
1051:mri/architectures/armv7-m/armv7-m.c ****     {
 6018              		.loc 1 1051 5 view .LVU1460
1051:mri/architectures/armv7-m/armv7-m.c ****     {
 6019              		.loc 1 1051 5 view .LVU1461
 6020              	.LBB324:
 6021              	.LBI324:
  76:mri/core/try_catch.h **** {
 6022              		.loc 5 76 20 view .LVU1462
 6023              	.LBB325:
 6024              		.loc 5 78 5 view .LVU1463
 6025              		.loc 5 78 22 is_stmt 0 view .LVU1464
 6026 0002 0C4C     		ldr	r4, .L522
 6027 0004 0023     		movs	r3, #0
 6028 0006 2360     		str	r3, [r4]
 6029              	.LBE325:
 6030              	.LBE324:
1053:mri/architectures/armv7-m/armv7-m.c ****     }
 6031              		.loc 1 1053 9 is_stmt 1 view .LVU1465
1053:mri/architectures/armv7-m/armv7-m.c ****     }
 6032              		.loc 1 1053 41 is_stmt 0 view .LVU1466
 6033 0008 FFF7FEFF 		bl	getFirstHalfWordOfCurrentInstruction
 6034              	.LVL484:
1051:mri/architectures/armv7-m/armv7-m.c ****     {
 6035              		.loc 1 1051 5 is_stmt 1 view .LVU1467
1055:mri/architectures/armv7-m/armv7-m.c ****     {
 6036              		.loc 1 1055 5 view .LVU1468
 6037 000c 2368     		ldr	r3, [r4]
 6038 000e 43B9     		cbnz	r3, .L521
1062:mri/architectures/armv7-m/armv7-m.c ****     {
 6039              		.loc 1 1062 5 view .LVU1469
1062:mri/architectures/armv7-m/armv7-m.c ****     {
 6040              		.loc 1 1062 9 is_stmt 0 view .LVU1470
 6041 0010 FFF7FEFF 		bl	isInstruction32Bit
 6042              	.LVL485:
1062:mri/architectures/armv7-m/armv7-m.c ****     {
 6043              		.loc 1 1062 8 view .LVU1471
 6044 0014 40B1     		cbz	r0, .L519
1065:mri/architectures/armv7-m/armv7-m.c ****     }
 6045              		.loc 1 1065 9 is_stmt 1 view .LVU1472
1065:mri/architectures/armv7-m/armv7-m.c ****     }
 6046              		.loc 1 1065 36 is_stmt 0 view .LVU1473
 6047 0016 FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 6048              	.LVL486:
1065:mri/architectures/armv7-m/armv7-m.c ****     }
 6049              		.loc 1 1065 9 view .LVU1474
 6050 001a 0430     		adds	r0, r0, #4
 6051 001c FFF7FEFF 		bl	mriPlatform_SetProgramCounter
 6052              	.LVL487:
 6053 0020 01E0     		b	.L516
 6054              	.LVL488:
ARM GAS  /tmp/ccXppZcm.s 			page 217


 6055              	.L521:
1058:mri/architectures/armv7-m/armv7-m.c ****         return;
 6056              		.loc 1 1058 9 is_stmt 1 view .LVU1475
 6057              	.LBB326:
 6058              	.LBI326:
  76:mri/core/try_catch.h **** {
 6059              		.loc 5 76 20 view .LVU1476
 6060              	.LBB327:
 6061              		.loc 5 78 5 view .LVU1477
 6062              		.loc 5 78 22 is_stmt 0 view .LVU1478
 6063 0022 0022     		movs	r2, #0
 6064 0024 2260     		str	r2, [r4]
 6065              	.LBE327:
 6066              	.LBE326:
1059:mri/architectures/armv7-m/armv7-m.c ****     }
 6067              		.loc 1 1059 9 is_stmt 1 view .LVU1479
 6068              	.LVL489:
 6069              	.L516:
1072:mri/architectures/armv7-m/armv7-m.c **** 
 6070              		.loc 1 1072 1 is_stmt 0 view .LVU1480
 6071 0026 10BD     		pop	{r4, pc}
 6072              	.L519:
1070:mri/architectures/armv7-m/armv7-m.c ****     }
 6073              		.loc 1 1070 9 is_stmt 1 view .LVU1481
1070:mri/architectures/armv7-m/armv7-m.c ****     }
 6074              		.loc 1 1070 36 is_stmt 0 view .LVU1482
 6075 0028 FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 6076              	.LVL490:
1070:mri/architectures/armv7-m/armv7-m.c ****     }
 6077              		.loc 1 1070 9 view .LVU1483
 6078 002c 0230     		adds	r0, r0, #2
 6079 002e FFF7FEFF 		bl	mriPlatform_SetProgramCounter
 6080              	.LVL491:
 6081 0032 F8E7     		b	.L516
 6082              	.L523:
 6083              		.align	2
 6084              	.L522:
 6085 0034 00000000 		.word	mriExceptionCode
 6086              		.cfi_endproc
 6087              	.LFE287:
 6089              		.section	.text.mriPlatform_TypeOfCurrentInstruction,"ax",%progbits
 6090              		.align	1
 6091              		.global	mriPlatform_TypeOfCurrentInstruction
 6092              		.syntax unified
 6093              		.thumb
 6094              		.thumb_func
 6096              	mriPlatform_TypeOfCurrentInstruction:
 6097              	.LFB290:
1096:mri/architectures/armv7-m/armv7-m.c ****     uint16_t currentInstruction;
 6098              		.loc 1 1096 1 is_stmt 1 view -0
 6099              		.cfi_startproc
 6100              		@ args = 0, pretend = 0, frame = 0
 6101              		@ frame_needed = 0, uses_anonymous_args = 0
 6102 0000 38B5     		push	{r3, r4, r5, lr}
 6103              	.LCFI56:
 6104              		.cfi_def_cfa_offset 16
 6105              		.cfi_offset 3, -16
ARM GAS  /tmp/ccXppZcm.s 			page 218


 6106              		.cfi_offset 4, -12
 6107              		.cfi_offset 5, -8
 6108              		.cfi_offset 14, -4
1097:mri/architectures/armv7-m/armv7-m.c **** 
 6109              		.loc 1 1097 5 view .LVU1485
1099:mri/architectures/armv7-m/armv7-m.c ****     {
 6110              		.loc 1 1099 5 view .LVU1486
1099:mri/architectures/armv7-m/armv7-m.c ****     {
 6111              		.loc 1 1099 5 view .LVU1487
 6112              	.LBB328:
 6113              	.LBI328:
  76:mri/core/try_catch.h **** {
 6114              		.loc 5 76 20 view .LVU1488
 6115              	.LBB329:
 6116              		.loc 5 78 5 view .LVU1489
 6117              		.loc 5 78 22 is_stmt 0 view .LVU1490
 6118 0002 0F4D     		ldr	r5, .L533
 6119 0004 0023     		movs	r3, #0
 6120 0006 2B60     		str	r3, [r5]
 6121              	.LBE329:
 6122              	.LBE328:
1101:mri/architectures/armv7-m/armv7-m.c ****     }
 6123              		.loc 1 1101 9 is_stmt 1 view .LVU1491
1101:mri/architectures/armv7-m/armv7-m.c ****     }
 6124              		.loc 1 1101 30 is_stmt 0 view .LVU1492
 6125 0008 FFF7FEFF 		bl	getFirstHalfWordOfCurrentInstruction
 6126              	.LVL492:
1099:mri/architectures/armv7-m/armv7-m.c ****     {
 6127              		.loc 1 1099 5 is_stmt 1 view .LVU1493
1103:mri/architectures/armv7-m/armv7-m.c ****     {
 6128              		.loc 1 1103 5 view .LVU1494
 6129 000c 2B68     		ldr	r3, [r5]
 6130 000e 6BB9     		cbnz	r3, .L531
 6131 0010 0446     		mov	r4, r0
1110:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_MBED_SEMIHOST_CALL;
 6132              		.loc 1 1110 5 view .LVU1495
1110:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_MBED_SEMIHOST_CALL;
 6133              		.loc 1 1110 9 is_stmt 0 view .LVU1496
 6134 0012 FFF7FEFF 		bl	isInstructionMbedSemihostBreakpoint
 6135              	.LVL493:
1110:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_MBED_SEMIHOST_CALL;
 6136              		.loc 1 1110 8 view .LVU1497
 6137 0016 70B9     		cbnz	r0, .L527
1112:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_NEWLIB_SEMIHOST_CALL;
 6138              		.loc 1 1112 10 is_stmt 1 view .LVU1498
1112:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_NEWLIB_SEMIHOST_CALL;
 6139              		.loc 1 1112 14 is_stmt 0 view .LVU1499
 6140 0018 2046     		mov	r0, r4
 6141 001a FFF7FEFF 		bl	isInstructionNewlibSemihostBreakpoint
 6142              	.LVL494:
1112:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_NEWLIB_SEMIHOST_CALL;
 6143              		.loc 1 1112 13 view .LVU1500
 6144 001e 60B9     		cbnz	r0, .L528
1114:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_HARDCODED_BREAKPOINT;
 6145              		.loc 1 1114 10 is_stmt 1 view .LVU1501
1114:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_HARDCODED_BREAKPOINT;
 6146              		.loc 1 1114 14 is_stmt 0 view .LVU1502
ARM GAS  /tmp/ccXppZcm.s 			page 219


 6147 0020 2046     		mov	r0, r4
 6148 0022 FFF7FEFF 		bl	isInstructionHardcodedBreakpoint
 6149              	.LVL495:
1114:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_HARDCODED_BREAKPOINT;
 6150              		.loc 1 1114 13 view .LVU1503
 6151 0026 20B9     		cbnz	r0, .L532
1117:mri/architectures/armv7-m/armv7-m.c **** }
 6152              		.loc 1 1117 16 view .LVU1504
 6153 0028 0020     		movs	r0, #0
 6154 002a 01E0     		b	.L526
 6155              	.LVL496:
 6156              	.L531:
1106:mri/architectures/armv7-m/armv7-m.c ****         return MRI_PLATFORM_INSTRUCTION_OTHER;
 6157              		.loc 1 1106 9 is_stmt 1 view .LVU1505
 6158              	.LBB330:
 6159              	.LBI330:
  76:mri/core/try_catch.h **** {
 6160              		.loc 5 76 20 view .LVU1506
 6161              	.LBB331:
 6162              		.loc 5 78 5 view .LVU1507
 6163              		.loc 5 78 22 is_stmt 0 view .LVU1508
 6164 002c 0020     		movs	r0, #0
 6165              	.LVL497:
 6166              		.loc 5 78 22 view .LVU1509
 6167 002e 2860     		str	r0, [r5]
 6168              	.LBE331:
 6169              	.LBE330:
1107:mri/architectures/armv7-m/armv7-m.c ****     }
 6170              		.loc 1 1107 9 is_stmt 1 view .LVU1510
 6171              	.L526:
1118:mri/architectures/armv7-m/armv7-m.c **** 
 6172              		.loc 1 1118 1 is_stmt 0 view .LVU1511
 6173 0030 38BD     		pop	{r3, r4, r5, pc}
 6174              	.L532:
1115:mri/architectures/armv7-m/armv7-m.c ****     else
 6175              		.loc 1 1115 16 view .LVU1512
 6176 0032 0320     		movs	r0, #3
 6177 0034 FCE7     		b	.L526
 6178              	.L527:
1111:mri/architectures/armv7-m/armv7-m.c ****     else if (isInstructionNewlibSemihostBreakpoint(currentInstruction))
 6179              		.loc 1 1111 16 view .LVU1513
 6180 0036 0120     		movs	r0, #1
 6181 0038 FAE7     		b	.L526
 6182              	.L528:
1113:mri/architectures/armv7-m/armv7-m.c ****     else if (isInstructionHardcodedBreakpoint(currentInstruction))
 6183              		.loc 1 1113 16 view .LVU1514
 6184 003a 0220     		movs	r0, #2
 6185 003c F8E7     		b	.L526
 6186              	.L534:
 6187 003e 00BF     		.align	2
 6188              	.L533:
 6189 0040 00000000 		.word	mriExceptionCode
 6190              		.cfi_endproc
 6191              	.LFE290:
 6193              		.section	.text.cacheTrapReason,"ax",%progbits
 6194              		.align	1
 6195              		.syntax unified
ARM GAS  /tmp/ccXppZcm.s 			page 220


 6196              		.thumb
 6197              		.thumb_func
 6199              	cacheTrapReason:
 6200              	.LVL498:
 6201              	.LFB264:
 671:mri/architectures/armv7-m/armv7-m.c ****     PlatformTrapReason reason = { MRI_PLATFORM_TRAP_TYPE_UNKNOWN, 0x00000000 };
 6202              		.loc 1 671 1 is_stmt 1 view -0
 6203              		.cfi_startproc
 6204              		@ args = 0, pretend = 0, frame = 0
 6205              		@ frame_needed = 0, uses_anonymous_args = 0
 671:mri/architectures/armv7-m/armv7-m.c ****     PlatformTrapReason reason = { MRI_PLATFORM_TRAP_TYPE_UNKNOWN, 0x00000000 };
 6206              		.loc 1 671 1 is_stmt 0 view .LVU1516
 6207 0000 10B5     		push	{r4, lr}
 6208              	.LCFI57:
 6209              		.cfi_def_cfa_offset 8
 6210              		.cfi_offset 4, -8
 6211              		.cfi_offset 14, -4
 6212 0002 0446     		mov	r4, r0
 672:mri/architectures/armv7-m/armv7-m.c **** 
 6213              		.loc 1 672 5 is_stmt 1 view .LVU1517
 672:mri/architectures/armv7-m/armv7-m.c **** 
 6214              		.loc 1 672 24 is_stmt 0 view .LVU1518
 6215 0004 0023     		movs	r3, #0
 6216 0006 0370     		strb	r3, [r0]
 6217 0008 4360     		str	r3, [r0, #4]
 674:mri/architectures/armv7-m/armv7-m.c ****     if (debugFaultStatus & SCB_DFSR_BKPT)
 6218              		.loc 1 674 5 is_stmt 1 view .LVU1519
 674:mri/architectures/armv7-m/armv7-m.c ****     if (debugFaultStatus & SCB_DFSR_BKPT)
 6219              		.loc 1 674 14 is_stmt 0 view .LVU1520
 6220 000a 0B4B     		ldr	r3, .L543
 6221 000c DB69     		ldr	r3, [r3, #28]
 6222              	.LVL499:
 675:mri/architectures/armv7-m/armv7-m.c ****     {
 6223              		.loc 1 675 5 is_stmt 1 view .LVU1521
 675:mri/architectures/armv7-m/armv7-m.c ****     {
 6224              		.loc 1 675 8 is_stmt 0 view .LVU1522
 6225 000e 13F0020F 		tst	r3, #2
 6226 0012 04D1     		bne	.L540
 683:mri/architectures/armv7-m/armv7-m.c ****     {
 6227              		.loc 1 683 10 is_stmt 1 view .LVU1523
 683:mri/architectures/armv7-m/armv7-m.c ****     {
 6228              		.loc 1 683 13 is_stmt 0 view .LVU1524
 6229 0014 13F0040F 		tst	r3, #4
 6230 0018 0BD1     		bne	.L541
 6231              	.LVL500:
 6232              	.L535:
 688:mri/architectures/armv7-m/armv7-m.c **** 
 6233              		.loc 1 688 1 view .LVU1525
 6234 001a 2046     		mov	r0, r4
 6235 001c 10BD     		pop	{r4, pc}
 6236              	.LVL501:
 6237              	.L540:
 678:mri/architectures/armv7-m/armv7-m.c ****             reason.type = MRI_PLATFORM_TRAP_TYPE_SWBREAK;
 6238              		.loc 1 678 9 is_stmt 1 view .LVU1526
 678:mri/architectures/armv7-m/armv7-m.c ****             reason.type = MRI_PLATFORM_TRAP_TYPE_SWBREAK;
 6239              		.loc 1 678 13 is_stmt 0 view .LVU1527
 6240 001e FFF7FEFF 		bl	mriPlatform_TypeOfCurrentInstruction
ARM GAS  /tmp/ccXppZcm.s 			page 221


 6241              	.LVL502:
 678:mri/architectures/armv7-m/armv7-m.c ****             reason.type = MRI_PLATFORM_TRAP_TYPE_SWBREAK;
 6242              		.loc 1 678 12 view .LVU1528
 6243 0022 0328     		cmp	r0, #3
 6244 0024 02D0     		beq	.L542
 681:mri/architectures/armv7-m/armv7-m.c ****     }
 6245              		.loc 1 681 13 is_stmt 1 view .LVU1529
 681:mri/architectures/armv7-m/armv7-m.c ****     }
 6246              		.loc 1 681 25 is_stmt 0 view .LVU1530
 6247 0026 0123     		movs	r3, #1
 6248 0028 2370     		strb	r3, [r4]
 6249 002a F6E7     		b	.L535
 6250              	.L542:
 679:mri/architectures/armv7-m/armv7-m.c ****         else
 6251              		.loc 1 679 13 is_stmt 1 view .LVU1531
 679:mri/architectures/armv7-m/armv7-m.c ****         else
 6252              		.loc 1 679 25 is_stmt 0 view .LVU1532
 6253 002c 0223     		movs	r3, #2
 6254 002e 2370     		strb	r3, [r4]
 6255 0030 F3E7     		b	.L535
 6256              	.LVL503:
 6257              	.L541:
 685:mri/architectures/armv7-m/armv7-m.c ****     }
 6258              		.loc 1 685 9 is_stmt 1 view .LVU1533
 685:mri/architectures/armv7-m/armv7-m.c ****     }
 6259              		.loc 1 685 18 is_stmt 0 view .LVU1534
 6260 0032 FFF7FEFF 		bl	findMatchedWatchpoint
 6261              	.LVL504:
 687:mri/architectures/armv7-m/armv7-m.c **** }
 6262              		.loc 1 687 5 is_stmt 1 view .LVU1535
 687:mri/architectures/armv7-m/armv7-m.c **** }
 6263              		.loc 1 687 12 is_stmt 0 view .LVU1536
 6264 0036 F0E7     		b	.L535
 6265              	.L544:
 6266              		.align	2
 6267              	.L543:
 6268 0038 00000000 		.word	mriCortexMState
 6269              		.cfi_endproc
 6270              	.LFE264:
 6272              		.section	.text.mriPlatform_DetermineCauseOfException,"ax",%progbits
 6273              		.align	1
 6274              		.global	mriPlatform_DetermineCauseOfException
 6275              		.syntax unified
 6276              		.thumb
 6277              		.thumb_func
 6279              	mriPlatform_DetermineCauseOfException:
 6280              	.LFB263:
 635:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = mriCortexMState.exceptionNumber;
 6281              		.loc 1 635 1 is_stmt 1 view -0
 6282              		.cfi_startproc
 6283              		@ args = 0, pretend = 0, frame = 8
 6284              		@ frame_needed = 0, uses_anonymous_args = 0
 6285 0000 70B5     		push	{r4, r5, r6, lr}
 6286              	.LCFI58:
 6287              		.cfi_def_cfa_offset 16
 6288              		.cfi_offset 4, -16
 6289              		.cfi_offset 5, -12
ARM GAS  /tmp/ccXppZcm.s 			page 222


 6290              		.cfi_offset 6, -8
 6291              		.cfi_offset 14, -4
 6292 0002 82B0     		sub	sp, sp, #8
 6293              	.LCFI59:
 6294              		.cfi_def_cfa_offset 24
 636:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.reason = cacheTrapReason();
 6295              		.loc 1 636 5 view .LVU1538
 636:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.reason = cacheTrapReason();
 6296              		.loc 1 636 14 is_stmt 0 view .LVU1539
 6297 0004 124C     		ldr	r4, .L555
 6298 0006 A569     		ldr	r5, [r4, #24]
 6299              	.LVL505:
 637:mri/architectures/armv7-m/armv7-m.c **** 
 6300              		.loc 1 637 5 is_stmt 1 view .LVU1540
 637:mri/architectures/armv7-m/armv7-m.c **** 
 6301              		.loc 1 637 30 is_stmt 0 view .LVU1541
 6302 0008 6E46     		mov	r6, sp
 6303 000a 3046     		mov	r0, r6
 6304 000c FFF7FEFF 		bl	cacheTrapReason
 6305              	.LVL506:
 6306 0010 0834     		adds	r4, r4, #8
 6307 0012 96E80300 		ldm	r6, {r0, r1}
 6308 0016 84E80300 		stm	r4, {r0, r1}
 639:mri/architectures/armv7-m/armv7-m.c ****     {
 6309              		.loc 1 639 5 is_stmt 1 view .LVU1542
 639:mri/architectures/armv7-m/armv7-m.c ****     {
 6310              		.loc 1 639 9 is_stmt 0 view .LVU1543
 6311 001a FFF7FEFF 		bl	hasControlCBeenDetected
 6312              	.LVL507:
 639:mri/architectures/armv7-m/armv7-m.c ****     {
 6313              		.loc 1 639 8 view .LVU1544
 6314 001e 98B9     		cbnz	r0, .L552
 644:mri/architectures/armv7-m/armv7-m.c ****     {
 6315              		.loc 1 644 5 is_stmt 1 view .LVU1545
 6316 0020 EB1E     		subs	r3, r5, #3
 6317 0022 092B     		cmp	r3, #9
 6318 0024 06D8     		bhi	.L547
 6319 0026 DFE803F0 		tbb	[pc, r3]
 6320              	.L549:
 6321 002a 11       		.byte	(.L553-.L549)/2
 6322 002b 11       		.byte	(.L553-.L549)/2
 6323 002c 08       		.byte	(.L551-.L549)/2
 6324 002d 0A       		.byte	(.L550-.L549)/2
 6325 002e 05       		.byte	(.L547-.L549)/2
 6326 002f 05       		.byte	(.L547-.L549)/2
 6327 0030 05       		.byte	(.L547-.L549)/2
 6328 0031 05       		.byte	(.L547-.L549)/2
 6329 0032 05       		.byte	(.L547-.L549)/2
 6330 0033 0C       		.byte	(.L548-.L549)/2
 6331              		.p2align 1
 6332              	.L547:
 6333 0034 0220     		movs	r0, #2
 6334              	.L546:
 668:mri/architectures/armv7-m/armv7-m.c **** 
 6335              		.loc 1 668 1 is_stmt 0 view .LVU1546
 6336 0036 02B0     		add	sp, sp, #8
 6337              	.LCFI60:
ARM GAS  /tmp/ccXppZcm.s 			page 223


 6338              		.cfi_remember_state
 6339              		.cfi_def_cfa_offset 16
 6340              		@ sp needed
 6341 0038 70BD     		pop	{r4, r5, r6, pc}
 6342              	.LVL508:
 6343              	.L551:
 6344              	.LCFI61:
 6345              		.cfi_restore_state
 657:mri/architectures/armv7-m/armv7-m.c ****     case 6:
 6346              		.loc 1 657 9 is_stmt 1 view .LVU1547
 657:mri/architectures/armv7-m/armv7-m.c ****     case 6:
 6347              		.loc 1 657 16 is_stmt 0 view .LVU1548
 6348 003a 0A20     		movs	r0, #10
 6349 003c FBE7     		b	.L546
 6350              	.L550:
 660:mri/architectures/armv7-m/armv7-m.c ****     case 12:
 6351              		.loc 1 660 9 is_stmt 1 view .LVU1549
 660:mri/architectures/armv7-m/armv7-m.c ****     case 12:
 6352              		.loc 1 660 16 is_stmt 0 view .LVU1550
 6353 003e 0420     		movs	r0, #4
 6354 0040 F9E7     		b	.L546
 6355              	.L548:
 663:mri/architectures/armv7-m/armv7-m.c ****     default:
 6356              		.loc 1 663 9 is_stmt 1 view .LVU1551
 663:mri/architectures/armv7-m/armv7-m.c ****     default:
 6357              		.loc 1 663 16 is_stmt 0 view .LVU1552
 6358 0042 FFF7FEFF 		bl	determineCauseOfDebugEvent
 6359              	.LVL509:
 6360 0046 F6E7     		b	.L546
 6361              	.L552:
 641:mri/architectures/armv7-m/armv7-m.c ****     }
 6362              		.loc 1 641 16 view .LVU1553
 6363 0048 0220     		movs	r0, #2
 6364 004a F4E7     		b	.L546
 6365              	.L553:
 651:mri/architectures/armv7-m/armv7-m.c ****     case 4:
 6366              		.loc 1 651 16 view .LVU1554
 6367 004c 0B20     		movs	r0, #11
 6368 004e F2E7     		b	.L546
 6369              	.L556:
 6370              		.align	2
 6371              	.L555:
 6372 0050 00000000 		.word	mriCortexMState
 6373              		.cfi_endproc
 6374              	.LFE263:
 6376              		.section	.text.getSecondHalfWordOfCurrentInstruction,"ax",%progbits
 6377              		.align	1
 6378              		.syntax unified
 6379              		.thumb
 6380              		.thumb_func
 6382              	getSecondHalfWordOfCurrentInstruction:
 6383              	.LFB247:
 481:mri/architectures/armv7-m/armv7-m.c ****     return throwingMemRead16(Platform_GetProgramCounter() + sizeof(uint16_t));
 6384              		.loc 1 481 1 is_stmt 1 view -0
 6385              		.cfi_startproc
 6386              		@ args = 0, pretend = 0, frame = 0
 6387              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccXppZcm.s 			page 224


 6388 0000 08B5     		push	{r3, lr}
 6389              	.LCFI62:
 6390              		.cfi_def_cfa_offset 8
 6391              		.cfi_offset 3, -8
 6392              		.cfi_offset 14, -4
 482:mri/architectures/armv7-m/armv7-m.c **** }
 6393              		.loc 1 482 5 view .LVU1556
 482:mri/architectures/armv7-m/armv7-m.c **** }
 6394              		.loc 1 482 30 is_stmt 0 view .LVU1557
 6395 0002 FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 6396              	.LVL510:
 482:mri/architectures/armv7-m/armv7-m.c **** }
 6397              		.loc 1 482 12 view .LVU1558
 6398 0006 0230     		adds	r0, r0, #2
 6399 0008 FFF7FEFF 		bl	throwingMemRead16
 6400              	.LVL511:
 483:mri/architectures/armv7-m/armv7-m.c **** 
 6401              		.loc 1 483 1 view .LVU1559
 6402 000c 08BD     		pop	{r3, pc}
 6403              		.cfi_endproc
 6404              	.LFE247:
 6406              		.section	.text.checkCurrentInstruction,"ax",%progbits
 6407              		.align	1
 6408              		.syntax unified
 6409              		.thumb
 6410              		.thumb_func
 6412              	checkCurrentInstruction:
 6413              	.LFB245:
 448:mri/architectures/armv7-m/armv7-m.c ****     uint16_t firstWord = 0;
 6414              		.loc 1 448 1 is_stmt 1 view -0
 6415              		.cfi_startproc
 6416              		@ args = 0, pretend = 0, frame = 0
 6417              		@ frame_needed = 0, uses_anonymous_args = 0
 6418 0000 38B5     		push	{r3, r4, r5, lr}
 6419              	.LCFI63:
 6420              		.cfi_def_cfa_offset 16
 6421              		.cfi_offset 3, -16
 6422              		.cfi_offset 4, -12
 6423              		.cfi_offset 5, -8
 6424              		.cfi_offset 14, -4
 449:mri/architectures/armv7-m/armv7-m.c ****     uint16_t secondWord = 0;
 6425              		.loc 1 449 5 view .LVU1561
 6426              	.LVL512:
 450:mri/architectures/armv7-m/armv7-m.c **** 
 6427              		.loc 1 450 5 view .LVU1562
 452:mri/architectures/armv7-m/armv7-m.c ****     {
 6428              		.loc 1 452 5 view .LVU1563
 452:mri/architectures/armv7-m/armv7-m.c ****     {
 6429              		.loc 1 452 5 view .LVU1564
 6430              	.LBB332:
 6431              	.LBI332:
  76:mri/core/try_catch.h **** {
 6432              		.loc 5 76 20 view .LVU1565
 6433              	.LBB333:
 6434              		.loc 5 78 5 view .LVU1566
 6435              		.loc 5 78 22 is_stmt 0 view .LVU1567
 6436 0002 184D     		ldr	r5, .L571
ARM GAS  /tmp/ccXppZcm.s 			page 225


 6437 0004 0023     		movs	r3, #0
 6438 0006 2B60     		str	r3, [r5]
 6439              	.LBE333:
 6440              	.LBE332:
 454:mri/architectures/armv7-m/armv7-m.c ****         __throwing_func( secondWord = getSecondHalfWordOfCurrentInstruction() );
 6441              		.loc 1 454 9 is_stmt 1 view .LVU1568
 6442 0008 FFF7FEFF 		bl	getFirstHalfWordOfCurrentInstruction
 6443              	.LVL513:
 6444 000c 0446     		mov	r4, r0
 6445              	.LVL514:
 454:mri/architectures/armv7-m/armv7-m.c ****         __throwing_func( secondWord = getSecondHalfWordOfCurrentInstruction() );
 6446              		.loc 1 454 9 view .LVU1569
 6447 000e 2B68     		ldr	r3, [r5]
 6448 0010 B3B1     		cbz	r3, .L567
 450:mri/architectures/armv7-m/armv7-m.c **** 
 6449              		.loc 1 450 14 is_stmt 0 view .LVU1570
 6450 0012 0025     		movs	r5, #0
 6451              	.LVL515:
 6452              	.L560:
 455:mri/architectures/armv7-m/armv7-m.c ****     }
 6453              		.loc 1 455 80 is_stmt 1 discriminator 1 view .LVU1571
 452:mri/architectures/armv7-m/armv7-m.c ****     {
 6454              		.loc 1 452 5 discriminator 1 view .LVU1572
 457:mri/architectures/armv7-m/armv7-m.c ****     {
 6455              		.loc 1 457 5 discriminator 1 view .LVU1573
 6456 0014 134B     		ldr	r3, .L571
 6457 0016 1B68     		ldr	r3, [r3]
 6458 0018 B3B9     		cbnz	r3, .L568
 464:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMSR(firstWord, secondWord);
 6459              		.loc 1 464 5 view .LVU1574
 464:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMSR(firstWord, secondWord);
 6460              		.loc 1 464 9 is_stmt 0 view .LVU1575
 6461 001a 2946     		mov	r1, r5
 6462 001c 2046     		mov	r0, r4
 6463 001e FFF7FEFF 		bl	isInstructionMSR
 6464              	.LVL516:
 464:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMSR(firstWord, secondWord);
 6465              		.loc 1 464 8 view .LVU1576
 6466 0022 A8B9     		cbnz	r0, .L569
 466:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionCPS(firstWord);
 6467              		.loc 1 466 5 is_stmt 1 view .LVU1577
 466:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionCPS(firstWord);
 6468              		.loc 1 466 9 is_stmt 0 view .LVU1578
 6469 0024 2046     		mov	r0, r4
 6470 0026 FFF7FEFF 		bl	isInstructionCPS
 6471              	.LVL517:
 466:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionCPS(firstWord);
 6472              		.loc 1 466 8 view .LVU1579
 6473 002a B0B9     		cbnz	r0, .L570
 470:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMRS(firstWord, secondWord);
 6474              		.loc 1 470 5 is_stmt 1 view .LVU1580
 470:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMRS(firstWord, secondWord);
 6475              		.loc 1 470 9 is_stmt 0 view .LVU1581
 6476 002c 2946     		mov	r1, r5
 6477 002e 2046     		mov	r0, r4
 6478 0030 FFF7FEFF 		bl	isInstructionMRS
 6479              	.LVL518:
ARM GAS  /tmp/ccXppZcm.s 			page 226


 470:mri/architectures/armv7-m/armv7-m.c ****         return processInstructionMRS(firstWord, secondWord);
 6480              		.loc 1 470 8 view .LVU1582
 6481 0034 58B1     		cbz	r0, .L559
 471:mri/architectures/armv7-m/armv7-m.c ****     return 0;
 6482              		.loc 1 471 9 is_stmt 1 view .LVU1583
 471:mri/architectures/armv7-m/armv7-m.c ****     return 0;
 6483              		.loc 1 471 16 is_stmt 0 view .LVU1584
 6484 0036 2946     		mov	r1, r5
 6485 0038 2046     		mov	r0, r4
 6486 003a FFF7FEFF 		bl	processInstructionMRS
 6487              	.LVL519:
 6488 003e 06E0     		b	.L559
 6489              	.LVL520:
 6490              	.L567:
 454:mri/architectures/armv7-m/armv7-m.c ****         __throwing_func( secondWord = getSecondHalfWordOfCurrentInstruction() );
 6491              		.loc 1 454 78 is_stmt 1 discriminator 1 view .LVU1585
 455:mri/architectures/armv7-m/armv7-m.c ****     }
 6492              		.loc 1 455 9 discriminator 1 view .LVU1586
 6493 0040 FFF7FEFF 		bl	getSecondHalfWordOfCurrentInstruction
 6494              	.LVL521:
 6495 0044 0546     		mov	r5, r0
 6496              	.LVL522:
 455:mri/architectures/armv7-m/armv7-m.c ****     }
 6497              		.loc 1 455 9 discriminator 1 view .LVU1587
 6498 0046 E5E7     		b	.L560
 6499              	.L568:
 459:mri/architectures/armv7-m/armv7-m.c ****         return 0;
 6500              		.loc 1 459 9 view .LVU1588
 6501              	.LBB334:
 6502              	.LBI334:
  76:mri/core/try_catch.h **** {
 6503              		.loc 5 76 20 view .LVU1589
 6504              	.LBB335:
 6505              		.loc 5 78 5 view .LVU1590
 6506              		.loc 5 78 22 is_stmt 0 view .LVU1591
 6507 0048 0020     		movs	r0, #0
 6508 004a 064B     		ldr	r3, .L571
 6509 004c 1860     		str	r0, [r3]
 6510              	.LBE335:
 6511              	.LBE334:
 460:mri/architectures/armv7-m/armv7-m.c ****     }
 6512              		.loc 1 460 9 is_stmt 1 view .LVU1592
 6513              	.L559:
 473:mri/architectures/armv7-m/armv7-m.c **** 
 6514              		.loc 1 473 1 is_stmt 0 view .LVU1593
 6515 004e 38BD     		pop	{r3, r4, r5, pc}
 6516              	.LVL523:
 6517              	.L569:
 465:mri/architectures/armv7-m/armv7-m.c ****     if (isInstructionCPS(firstWord))
 6518              		.loc 1 465 9 is_stmt 1 view .LVU1594
 465:mri/architectures/armv7-m/armv7-m.c ****     if (isInstructionCPS(firstWord))
 6519              		.loc 1 465 16 is_stmt 0 view .LVU1595
 6520 0050 2946     		mov	r1, r5
 6521 0052 2046     		mov	r0, r4
 6522 0054 FFF7FEFF 		bl	processInstructionMSR
 6523              	.LVL524:
 6524 0058 F9E7     		b	.L559
ARM GAS  /tmp/ccXppZcm.s 			page 227


 6525              	.L570:
 467:mri/architectures/armv7-m/armv7-m.c ****     /* MRS instructions might want to read the real values of PRIMASK and BASEPRI and not the value
 6526              		.loc 1 467 9 is_stmt 1 view .LVU1596
 467:mri/architectures/armv7-m/armv7-m.c ****     /* MRS instructions might want to read the real values of PRIMASK and BASEPRI and not the value
 6527              		.loc 1 467 16 is_stmt 0 view .LVU1597
 6528 005a 2046     		mov	r0, r4
 6529 005c FFF7FEFF 		bl	processInstructionCPS
 6530              	.LVL525:
 6531 0060 F5E7     		b	.L559
 6532              	.L572:
 6533 0062 00BF     		.align	2
 6534              	.L571:
 6535 0064 00000000 		.word	mriExceptionCode
 6536              		.cfi_endproc
 6537              	.LFE245:
 6539              		.section	.text.advancePastPriorityModifyingInstruction,"ax",%progbits
 6540              		.align	1
 6541              		.syntax unified
 6542              		.thumb
 6543              		.thumb_func
 6545              	advancePastPriorityModifyingInstruction:
 6546              	.LFB244:
 437:mri/architectures/armv7-m/armv7-m.c ****     if (checkCurrentInstruction())
 6547              		.loc 1 437 1 is_stmt 1 view -0
 6548              		.cfi_startproc
 6549              		@ args = 0, pretend = 0, frame = 0
 6550              		@ frame_needed = 0, uses_anonymous_args = 0
 6551 0000 08B5     		push	{r3, lr}
 6552              	.LCFI64:
 6553              		.cfi_def_cfa_offset 8
 6554              		.cfi_offset 3, -8
 6555              		.cfi_offset 14, -4
 438:mri/architectures/armv7-m/armv7-m.c ****     {
 6556              		.loc 1 438 5 view .LVU1599
 438:mri/architectures/armv7-m/armv7-m.c ****     {
 6557              		.loc 1 438 9 is_stmt 0 view .LVU1600
 6558 0002 FFF7FEFF 		bl	checkCurrentInstruction
 6559              	.LVL526:
 438:mri/architectures/armv7-m/armv7-m.c ****     {
 6560              		.loc 1 438 8 view .LVU1601
 6561 0006 00B9     		cbnz	r0, .L576
 6562              	.L573:
 445:mri/architectures/armv7-m/armv7-m.c **** 
 6563              		.loc 1 445 1 view .LVU1602
 6564 0008 08BD     		pop	{r3, pc}
 6565              	.L576:
 441:mri/architectures/armv7-m/armv7-m.c ****         return 1;
 6566              		.loc 1 441 9 is_stmt 1 view .LVU1603
 6567 000a FFF7FEFF 		bl	mriPlatform_AdvanceProgramCounterToNextInstruction
 6568              	.LVL527:
 442:mri/architectures/armv7-m/armv7-m.c ****     }
 6569              		.loc 1 442 9 view .LVU1604
 442:mri/architectures/armv7-m/armv7-m.c ****     }
 6570              		.loc 1 442 16 is_stmt 0 view .LVU1605
 6571 000e 0120     		movs	r0, #1
 6572 0010 FAE7     		b	.L573
 6573              		.cfi_endproc
ARM GAS  /tmp/ccXppZcm.s 			page 228


 6574              	.LFE244:
 6576              		.section	.text.mriPlatform_WriteTResponseRegistersToBuffer,"ax",%progbits
 6577              		.align	1
 6578              		.global	mriPlatform_WriteTResponseRegistersToBuffer
 6579              		.syntax unified
 6580              		.thumb
 6581              		.thumb_func
 6583              	mriPlatform_WriteTResponseRegistersToBuffer:
 6584              	.LVL528:
 6585              	.LFB297:
1178:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, R7, Context_Get(&mriCortexMState.context, R7));
 6586              		.loc 1 1178 1 is_stmt 1 view -0
 6587              		.cfi_startproc
 6588              		@ args = 0, pretend = 0, frame = 0
 6589              		@ frame_needed = 0, uses_anonymous_args = 0
1178:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, R7, Context_Get(&mriCortexMState.context, R7));
 6590              		.loc 1 1178 1 is_stmt 0 view .LVU1607
 6591 0000 38B5     		push	{r3, r4, r5, lr}
 6592              	.LCFI65:
 6593              		.cfi_def_cfa_offset 16
 6594              		.cfi_offset 3, -16
 6595              		.cfi_offset 4, -12
 6596              		.cfi_offset 5, -8
 6597              		.cfi_offset 14, -4
 6598 0002 0446     		mov	r4, r0
1179:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, SP, Context_Get(&mriCortexMState.context, SP));
 6599              		.loc 1 1179 5 is_stmt 1 view .LVU1608
 6600 0004 124D     		ldr	r5, .L579
 6601 0006 0721     		movs	r1, #7
 6602 0008 2846     		mov	r0, r5
 6603              	.LVL529:
1179:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, SP, Context_Get(&mriCortexMState.context, SP));
 6604              		.loc 1 1179 5 is_stmt 0 view .LVU1609
 6605 000a FFF7FEFF 		bl	mriContext_Get
 6606              	.LVL530:
 6607 000e 0246     		mov	r2, r0
 6608 0010 0721     		movs	r1, #7
 6609 0012 2046     		mov	r0, r4
 6610 0014 FFF7FEFF 		bl	sendRegisterForTResponse
 6611              	.LVL531:
1180:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, LR, Context_Get(&mriCortexMState.context, LR));
 6612              		.loc 1 1180 5 is_stmt 1 view .LVU1610
 6613 0018 0D21     		movs	r1, #13
 6614 001a 2846     		mov	r0, r5
 6615 001c FFF7FEFF 		bl	mriContext_Get
 6616              	.LVL532:
 6617 0020 0246     		mov	r2, r0
 6618 0022 0D21     		movs	r1, #13
 6619 0024 2046     		mov	r0, r4
 6620 0026 FFF7FEFF 		bl	sendRegisterForTResponse
 6621              	.LVL533:
1181:mri/architectures/armv7-m/armv7-m.c ****     sendRegisterForTResponse(pBuffer, PC, Context_Get(&mriCortexMState.context, PC));
 6622              		.loc 1 1181 5 view .LVU1611
 6623 002a 0E21     		movs	r1, #14
 6624 002c 2846     		mov	r0, r5
 6625 002e FFF7FEFF 		bl	mriContext_Get
 6626              	.LVL534:
ARM GAS  /tmp/ccXppZcm.s 			page 229


 6627 0032 0246     		mov	r2, r0
 6628 0034 0E21     		movs	r1, #14
 6629 0036 2046     		mov	r0, r4
 6630 0038 FFF7FEFF 		bl	sendRegisterForTResponse
 6631              	.LVL535:
1182:mri/architectures/armv7-m/armv7-m.c **** }
 6632              		.loc 1 1182 5 view .LVU1612
 6633 003c 0F21     		movs	r1, #15
 6634 003e 2846     		mov	r0, r5
 6635 0040 FFF7FEFF 		bl	mriContext_Get
 6636              	.LVL536:
 6637 0044 0246     		mov	r2, r0
 6638 0046 0F21     		movs	r1, #15
 6639 0048 2046     		mov	r0, r4
 6640 004a FFF7FEFF 		bl	sendRegisterForTResponse
 6641              	.LVL537:
1183:mri/architectures/armv7-m/armv7-m.c **** 
 6642              		.loc 1 1183 1 is_stmt 0 view .LVU1613
 6643 004e 38BD     		pop	{r3, r4, r5, pc}
 6644              	.LVL538:
 6645              	.L580:
1183:mri/architectures/armv7-m/armv7-m.c **** 
 6646              		.loc 1 1183 1 view .LVU1614
 6647              		.align	2
 6648              	.L579:
 6649 0050 00000000 		.word	mriCortexMState
 6650              		.cfi_endproc
 6651              	.LFE297:
 6653              		.section	.text.mriPlatform_SetHardwareBreakpointOfGdbKind,"ax",%progbits
 6654              		.align	1
 6655              		.global	mriPlatform_SetHardwareBreakpointOfGdbKind
 6656              		.syntax unified
 6657              		.thumb
 6658              		.thumb_func
 6660              	mriPlatform_SetHardwareBreakpointOfGdbKind:
 6661              	.LVL539:
 6662              	.LFB300:
1205:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pFPBBreakpointComparator;
 6663              		.loc 1 1205 1 is_stmt 1 view -0
 6664              		.cfi_startproc
 6665              		@ args = 0, pretend = 0, frame = 0
 6666              		@ frame_needed = 0, uses_anonymous_args = 0
1205:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pFPBBreakpointComparator;
 6667              		.loc 1 1205 1 is_stmt 0 view .LVU1616
 6668 0000 08B5     		push	{r3, lr}
 6669              	.LCFI66:
 6670              		.cfi_def_cfa_offset 8
 6671              		.cfi_offset 3, -8
 6672              		.cfi_offset 14, -4
1206:mri/architectures/armv7-m/armv7-m.c ****     int       is32BitInstruction;
 6673              		.loc 1 1206 5 is_stmt 1 view .LVU1617
1207:mri/architectures/armv7-m/armv7-m.c **** 
 6674              		.loc 1 1207 5 view .LVU1618
1214:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
 6675              		.loc 1 1214 5 view .LVU1619
1214:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
 6676              		.loc 1 1214 32 is_stmt 0 view .LVU1620
ARM GAS  /tmp/ccXppZcm.s 			page 230


 6677 0002 0021     		movs	r1, #0
 6678              	.LVL540:
1214:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
 6679              		.loc 1 1214 32 view .LVU1621
 6680 0004 FFF7FEFF 		bl	enableFPBBreakpoint
 6681              	.LVL541:
1215:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
 6682              		.loc 1 1215 5 is_stmt 1 view .LVU1622
1215:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
 6683              		.loc 1 1215 8 is_stmt 0 view .LVU1623
 6684 0008 00B1     		cbz	r0, .L584
 6685              	.L581:
1217:mri/architectures/armv7-m/armv7-m.c **** 
 6686              		.loc 1 1217 1 view .LVU1624
 6687 000a 08BD     		pop	{r3, pc}
 6688              	.L584:
1216:mri/architectures/armv7-m/armv7-m.c **** }
 6689              		.loc 1 1216 9 is_stmt 1 view .LVU1625
 6690              	.LVL542:
 6691              	.LBB336:
 6692              	.LBI336:
  71:mri/core/try_catch.h **** {
 6693              		.loc 5 71 20 view .LVU1626
 6694              	.LBB337:
  73:mri/core/try_catch.h **** }
 6695              		.loc 5 73 5 view .LVU1627
  73:mri/core/try_catch.h **** }
 6696              		.loc 5 73 73 is_stmt 0 view .LVU1628
 6697 000c 034A     		ldr	r2, .L585
 6698 000e 1368     		ldr	r3, [r2]
 6699 0010 082B     		cmp	r3, #8
 6700 0012 B8BF     		it	lt
 6701 0014 0823     		movlt	r3, #8
  73:mri/core/try_catch.h **** }
 6702              		.loc 5 73 22 view .LVU1629
 6703 0016 1360     		str	r3, [r2]
 6704              	.LVL543:
  73:mri/core/try_catch.h **** }
 6705              		.loc 5 73 22 view .LVU1630
 6706              	.LBE337:
 6707              	.LBE336:
1216:mri/architectures/armv7-m/armv7-m.c **** }
 6708              		.loc 1 1216 9 view .LVU1631
 6709 0018 F7E7     		b	.L581
 6710              	.L586:
 6711 001a 00BF     		.align	2
 6712              	.L585:
 6713 001c 00000000 		.word	mriExceptionCode
 6714              		.cfi_endproc
 6715              	.LFE300:
 6717              		.section	.text.mriPlatform_SetHardwareBreakpoint,"ax",%progbits
 6718              		.align	1
 6719              		.global	mriPlatform_SetHardwareBreakpoint
 6720              		.syntax unified
 6721              		.thumb
 6722              		.thumb_func
 6724              	mriPlatform_SetHardwareBreakpoint:
ARM GAS  /tmp/ccXppZcm.s 			page 231


 6725              	.LVL544:
 6726              	.LFB302:
1235:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pFPBBreakpointComparator;
 6727              		.loc 1 1235 1 is_stmt 1 view -0
 6728              		.cfi_startproc
 6729              		@ args = 0, pretend = 0, frame = 0
 6730              		@ frame_needed = 0, uses_anonymous_args = 0
1235:mri/architectures/armv7-m/armv7-m.c ****     uint32_t* pFPBBreakpointComparator;
 6731              		.loc 1 1235 1 is_stmt 0 view .LVU1633
 6732 0000 38B5     		push	{r3, r4, r5, lr}
 6733              	.LCFI67:
 6734              		.cfi_def_cfa_offset 16
 6735              		.cfi_offset 3, -16
 6736              		.cfi_offset 4, -12
 6737              		.cfi_offset 5, -8
 6738              		.cfi_offset 14, -4
 6739 0002 0446     		mov	r4, r0
1236:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  firstInstructionWord;
 6740              		.loc 1 1236 5 is_stmt 1 view .LVU1634
1237:mri/architectures/armv7-m/armv7-m.c **** 
 6741              		.loc 1 1237 5 view .LVU1635
1239:mri/architectures/armv7-m/armv7-m.c ****     {
 6742              		.loc 1 1239 6 view .LVU1636
1239:mri/architectures/armv7-m/armv7-m.c ****     {
 6743              		.loc 1 1239 6 view .LVU1637
 6744              	.LBB338:
 6745              	.LBI338:
  76:mri/core/try_catch.h **** {
 6746              		.loc 5 76 20 view .LVU1638
 6747              	.LBB339:
 6748              		.loc 5 78 5 view .LVU1639
 6749              		.loc 5 78 22 is_stmt 0 view .LVU1640
 6750 0004 0A4D     		ldr	r5, .L591
 6751 0006 0023     		movs	r3, #0
 6752 0008 2B60     		str	r3, [r5]
 6753              	.LBE339:
 6754              	.LBE338:
1241:mri/architectures/armv7-m/armv7-m.c ****     }
 6755              		.loc 1 1241 9 is_stmt 1 view .LVU1641
1241:mri/architectures/armv7-m/armv7-m.c ****     }
 6756              		.loc 1 1241 32 is_stmt 0 view .LVU1642
 6757 000a FFF7FEFF 		bl	throwingMemRead16
 6758              	.LVL545:
1239:mri/architectures/armv7-m/armv7-m.c ****     {
 6759              		.loc 1 1239 6 is_stmt 1 view .LVU1643
1243:mri/architectures/armv7-m/armv7-m.c ****         __rethrow;
 6760              		.loc 1 1243 5 view .LVU1644
 6761 000e 2B68     		ldr	r3, [r5]
 6762 0010 03B1     		cbz	r3, .L590
 6763              	.LVL546:
 6764              	.L587:
1249:mri/architectures/armv7-m/armv7-m.c **** 
 6765              		.loc 1 1249 1 is_stmt 0 view .LVU1645
 6766 0012 38BD     		pop	{r3, r4, r5, pc}
 6767              	.LVL547:
 6768              	.L590:
1246:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
ARM GAS  /tmp/ccXppZcm.s 			page 232


 6769              		.loc 1 1246 5 is_stmt 1 view .LVU1646
1246:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
 6770              		.loc 1 1246 61 is_stmt 0 view .LVU1647
 6771 0014 FFF7FEFF 		bl	isInstruction32Bit
 6772              	.LVL548:
1246:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
 6773              		.loc 1 1246 61 view .LVU1648
 6774 0018 0146     		mov	r1, r0
1246:mri/architectures/armv7-m/armv7-m.c ****     if (!pFPBBreakpointComparator)
 6775              		.loc 1 1246 32 view .LVU1649
 6776 001a 2046     		mov	r0, r4
 6777 001c FFF7FEFF 		bl	enableFPBBreakpoint
 6778              	.LVL549:
1247:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
 6779              		.loc 1 1247 5 is_stmt 1 view .LVU1650
1247:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
 6780              		.loc 1 1247 8 is_stmt 0 view .LVU1651
 6781 0020 0028     		cmp	r0, #0
 6782 0022 F6D1     		bne	.L587
1248:mri/architectures/armv7-m/armv7-m.c **** }
 6783              		.loc 1 1248 9 is_stmt 1 view .LVU1652
 6784              	.LVL550:
 6785              	.LBB340:
 6786              	.LBI340:
  71:mri/core/try_catch.h **** {
 6787              		.loc 5 71 20 view .LVU1653
 6788              	.LBB341:
  73:mri/core/try_catch.h **** }
 6789              		.loc 5 73 5 view .LVU1654
  73:mri/core/try_catch.h **** }
 6790              		.loc 5 73 73 is_stmt 0 view .LVU1655
 6791 0024 2B68     		ldr	r3, [r5]
 6792 0026 082B     		cmp	r3, #8
 6793 0028 B8BF     		it	lt
 6794 002a 0823     		movlt	r3, #8
  73:mri/core/try_catch.h **** }
 6795              		.loc 5 73 22 view .LVU1656
 6796 002c 2B60     		str	r3, [r5]
 6797              	.LVL551:
  73:mri/core/try_catch.h **** }
 6798              		.loc 5 73 22 view .LVU1657
 6799              	.LBE341:
 6800              	.LBE340:
1248:mri/architectures/armv7-m/armv7-m.c **** }
 6801              		.loc 1 1248 9 view .LVU1658
 6802 002e F0E7     		b	.L587
 6803              	.L592:
 6804              		.align	2
 6805              	.L591:
 6806 0030 00000000 		.word	mriExceptionCode
 6807              		.cfi_endproc
 6808              	.LFE302:
 6810              		.section	.text.setHardwareBreakpointOnSvcHandler,"ax",%progbits
 6811              		.align	1
 6812              		.syntax unified
 6813              		.thumb
 6814              		.thumb_func
ARM GAS  /tmp/ccXppZcm.s 			page 233


 6816              	setHardwareBreakpointOnSvcHandler:
 6817              	.LFB241:
 422:mri/architectures/armv7-m/armv7-m.c ****     Platform_SetHardwareBreakpoint(getNvicVector(SVCall_IRQn) & ~1);
 6818              		.loc 1 422 1 is_stmt 1 view -0
 6819              		.cfi_startproc
 6820              		@ args = 0, pretend = 0, frame = 0
 6821              		@ frame_needed = 0, uses_anonymous_args = 0
 6822 0000 08B5     		push	{r3, lr}
 6823              	.LCFI68:
 6824              		.cfi_def_cfa_offset 8
 6825              		.cfi_offset 3, -8
 6826              		.cfi_offset 14, -4
 423:mri/architectures/armv7-m/armv7-m.c **** }
 6827              		.loc 1 423 5 view .LVU1660
 423:mri/architectures/armv7-m/armv7-m.c **** }
 6828              		.loc 1 423 36 is_stmt 0 view .LVU1661
 6829 0002 6FF00400 		mvn	r0, #4
 6830 0006 FFF7FEFF 		bl	getNvicVector
 6831              	.LVL552:
 423:mri/architectures/armv7-m/armv7-m.c **** }
 6832              		.loc 1 423 5 view .LVU1662
 6833 000a 20F00100 		bic	r0, r0, #1
 6834 000e FFF7FEFF 		bl	mriPlatform_SetHardwareBreakpoint
 6835              	.LVL553:
 424:mri/architectures/armv7-m/armv7-m.c **** 
 6836              		.loc 1 424 1 view .LVU1663
 6837 0012 08BD     		pop	{r3, pc}
 6838              		.cfi_endproc
 6839              	.LFE241:
 6841              		.section	.text.mriPlatform_EnableSingleStep,"ax",%progbits
 6842              		.align	1
 6843              		.global	mriPlatform_EnableSingleStep
 6844              		.syntax unified
 6845              		.thumb
 6846              		.thumb_func
 6848              	mriPlatform_EnableSingleStep:
 6849              	.LFB239:
 363:mri/architectures/armv7-m/armv7-m.c ****     int didAdvancePastPriorityInstruction;
 6850              		.loc 1 363 1 is_stmt 1 view -0
 6851              		.cfi_startproc
 6852              		@ args = 0, pretend = 0, frame = 0
 6853              		@ frame_needed = 0, uses_anonymous_args = 0
 6854 0000 10B5     		push	{r4, lr}
 6855              	.LCFI69:
 6856              		.cfi_def_cfa_offset 8
 6857              		.cfi_offset 4, -8
 6858              		.cfi_offset 14, -4
 364:mri/architectures/armv7-m/armv7-m.c **** 
 6859              		.loc 1 364 5 view .LVU1665
 366:mri/architectures/armv7-m/armv7-m.c ****     {
 6860              		.loc 1 366 5 view .LVU1666
 372:mri/architectures/armv7-m/armv7-m.c ****     if (didAdvancePastPriorityInstruction)
 6861              		.loc 1 372 5 view .LVU1667
 372:mri/architectures/armv7-m/armv7-m.c ****     if (didAdvancePastPriorityInstruction)
 6862              		.loc 1 372 41 is_stmt 0 view .LVU1668
 6863 0002 FFF7FEFF 		bl	advancePastPriorityModifyingInstruction
 6864              	.LVL554:
ARM GAS  /tmp/ccXppZcm.s 			page 234


 373:mri/architectures/armv7-m/armv7-m.c ****     {
 6865              		.loc 1 373 5 is_stmt 1 view .LVU1669
 373:mri/architectures/armv7-m/armv7-m.c ****     {
 6866              		.loc 1 373 8 is_stmt 0 view .LVU1670
 6867 0006 00B1     		cbz	r0, .L600
 6868              	.LVL555:
 6869              	.L595:
 400:mri/architectures/armv7-m/armv7-m.c **** 
 6870              		.loc 1 400 1 view .LVU1671
 6871 0008 10BD     		pop	{r4, pc}
 6872              	.LVL556:
 6873              	.L600:
 378:mri/architectures/armv7-m/armv7-m.c ****     {
 6874              		.loc 1 378 5 is_stmt 1 view .LVU1672
 378:mri/architectures/armv7-m/armv7-m.c ****     {
 6875              		.loc 1 378 10 is_stmt 0 view .LVU1673
 6876 000a FFF7FEFF 		bl	doesPCPointToSVCInstruction
 6877              	.LVL557:
 378:mri/architectures/armv7-m/armv7-m.c ****     {
 6878              		.loc 1 378 8 view .LVU1674
 6879 000e B8B1     		cbz	r0, .L601
 386:mri/architectures/armv7-m/armv7-m.c ****     {
 6880              		.loc 1 386 5 is_stmt 1 view .LVU1675
 386:mri/architectures/armv7-m/armv7-m.c ****     {
 6881              		.loc 1 386 5 view .LVU1676
 6882              	.LBB342:
 6883              	.LBI342:
  76:mri/core/try_catch.h **** {
 6884              		.loc 5 76 20 view .LVU1677
 6885              	.LBB343:
 6886              		.loc 5 78 5 view .LVU1678
 6887              		.loc 5 78 22 is_stmt 0 view .LVU1679
 6888 0010 134C     		ldr	r4, .L603
 6889 0012 0023     		movs	r3, #0
 6890 0014 2360     		str	r3, [r4]
 6891              	.LBE343:
 6892              	.LBE342:
 388:mri/architectures/armv7-m/armv7-m.c ****         setSvcStepFlag();
 6893              		.loc 1 388 9 is_stmt 1 view .LVU1680
 6894 0016 FFF7FEFF 		bl	setHardwareBreakpointOnSvcHandler
 6895              	.LVL558:
 388:mri/architectures/armv7-m/armv7-m.c ****         setSvcStepFlag();
 6896              		.loc 1 388 9 view .LVU1681
 6897 001a 2368     		ldr	r3, [r4]
 6898 001c E3B1     		cbz	r3, .L602
 6899              	.L598:
 386:mri/architectures/armv7-m/armv7-m.c ****     {
 6900              		.loc 1 386 5 view .LVU1682
 391:mri/architectures/armv7-m/armv7-m.c ****     {
 6901              		.loc 1 391 5 view .LVU1683
 6902 001e 104B     		ldr	r3, .L603
 6903 0020 1B68     		ldr	r3, [r3]
 6904 0022 002B     		cmp	r3, #0
 6905 0024 F0D0     		beq	.L595
 395:mri/architectures/armv7-m/armv7-m.c ****         setSingleSteppingFlag();
 6906              		.loc 1 395 9 view .LVU1684
 6907              	.LBB344:
ARM GAS  /tmp/ccXppZcm.s 			page 235


 6908              	.LBI344:
  76:mri/core/try_catch.h **** {
 6909              		.loc 5 76 20 view .LVU1685
 6910              	.LBB345:
 6911              		.loc 5 78 5 view .LVU1686
 6912              		.loc 5 78 22 is_stmt 0 view .LVU1687
 6913 0026 0E4B     		ldr	r3, .L603
 6914 0028 0022     		movs	r2, #0
 6915 002a 1A60     		str	r2, [r3]
 6916              	.LBE345:
 6917              	.LBE344:
 396:mri/architectures/armv7-m/armv7-m.c ****         enableSingleStep();
 6918              		.loc 1 396 9 is_stmt 1 view .LVU1688
 6919 002c FFF7FEFF 		bl	setSingleSteppingFlag
 6920              	.LVL559:
 397:mri/architectures/armv7-m/armv7-m.c ****     }
 6921              		.loc 1 397 9 view .LVU1689
 6922              	.LBB346:
 6923              	.LBI346:
 114:mri/architectures/armv7-m/debug_cm3.h **** {
 6924              		.loc 4 114 22 view .LVU1690
 6925              	.LBB347:
 116:mri/architectures/armv7-m/debug_cm3.h **** }
 6926              		.loc 4 116 5 view .LVU1691
 116:mri/architectures/armv7-m/debug_cm3.h **** }
 6927              		.loc 4 116 14 is_stmt 0 view .LVU1692
 6928 0030 0C4A     		ldr	r2, .L603+4
 6929 0032 D2F8FC30 		ldr	r3, [r2, #252]
 116:mri/architectures/armv7-m/debug_cm3.h **** }
 6930              		.loc 4 116 22 view .LVU1693
 6931 0036 43F48023 		orr	r3, r3, #262144
 6932 003a C2F8FC30 		str	r3, [r2, #252]
 117:mri/architectures/armv7-m/debug_cm3.h **** 
 6933              		.loc 4 117 1 view .LVU1694
 6934 003e E3E7     		b	.L595
 6935              	.L601:
 6936              	.LBE347:
 6937              	.LBE346:
 380:mri/architectures/armv7-m/armv7-m.c ****         recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts();
 6938              		.loc 1 380 9 is_stmt 1 view .LVU1695
 6939 0040 FFF7FEFF 		bl	setSingleSteppingFlag
 6940              	.LVL560:
 381:mri/architectures/armv7-m/armv7-m.c ****         enableSingleStep();
 6941              		.loc 1 381 9 view .LVU1696
 6942 0044 FFF7FEFF 		bl	recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts
 6943              	.LVL561:
 382:mri/architectures/armv7-m/armv7-m.c ****         return;
 6944              		.loc 1 382 9 view .LVU1697
 6945              	.LBB348:
 6946              	.LBI348:
 114:mri/architectures/armv7-m/debug_cm3.h **** {
 6947              		.loc 4 114 22 view .LVU1698
 6948              	.LBB349:
 116:mri/architectures/armv7-m/debug_cm3.h **** }
 6949              		.loc 4 116 5 view .LVU1699
 116:mri/architectures/armv7-m/debug_cm3.h **** }
 6950              		.loc 4 116 14 is_stmt 0 view .LVU1700
ARM GAS  /tmp/ccXppZcm.s 			page 236


 6951 0048 064A     		ldr	r2, .L603+4
 6952 004a D2F8FC30 		ldr	r3, [r2, #252]
 116:mri/architectures/armv7-m/debug_cm3.h **** }
 6953              		.loc 4 116 22 view .LVU1701
 6954 004e 43F48023 		orr	r3, r3, #262144
 6955 0052 C2F8FC30 		str	r3, [r2, #252]
 6956              	.LBE349:
 6957              	.LBE348:
 383:mri/architectures/armv7-m/armv7-m.c ****     }
 6958              		.loc 1 383 9 is_stmt 1 view .LVU1702
 6959 0056 D7E7     		b	.L595
 6960              	.L602:
 388:mri/architectures/armv7-m/armv7-m.c ****         setSvcStepFlag();
 6961              		.loc 1 388 63 discriminator 1 view .LVU1703
 389:mri/architectures/armv7-m/armv7-m.c ****     }
 6962              		.loc 1 389 9 discriminator 1 view .LVU1704
 6963 0058 FFF7FEFF 		bl	setSvcStepFlag
 6964              	.LVL562:
 6965 005c DFE7     		b	.L598
 6966              	.L604:
 6967 005e 00BF     		.align	2
 6968              	.L603:
 6969 0060 00000000 		.word	mriExceptionCode
 6970 0064 00ED00E0 		.word	-536810240
 6971              		.cfi_endproc
 6972              	.LFE239:
 6974              		.section	.text.mriPlatform_ClearHardwareBreakpointOfGdbKind,"ax",%progbits
 6975              		.align	1
 6976              		.global	mriPlatform_ClearHardwareBreakpointOfGdbKind
 6977              		.syntax unified
 6978              		.thumb
 6979              		.thumb_func
 6981              	mriPlatform_ClearHardwareBreakpointOfGdbKind:
 6982              	.LVL563:
 6983              	.LFB303:
1253:mri/architectures/armv7-m/armv7-m.c ****     int       is32BitInstruction;
 6984              		.loc 1 1253 1 view -0
 6985              		.cfi_startproc
 6986              		@ args = 0, pretend = 0, frame = 0
 6987              		@ frame_needed = 0, uses_anonymous_args = 0
1253:mri/architectures/armv7-m/armv7-m.c ****     int       is32BitInstruction;
 6988              		.loc 1 1253 1 is_stmt 0 view .LVU1706
 6989 0000 38B5     		push	{r3, r4, r5, lr}
 6990              	.LCFI70:
 6991              		.cfi_def_cfa_offset 16
 6992              		.cfi_offset 3, -16
 6993              		.cfi_offset 4, -12
 6994              		.cfi_offset 5, -8
 6995              		.cfi_offset 14, -4
 6996 0002 0446     		mov	r4, r0
1254:mri/architectures/armv7-m/armv7-m.c **** 
 6997              		.loc 1 1254 5 is_stmt 1 view .LVU1707
1256:mri/architectures/armv7-m/armv7-m.c ****         is32BitInstruction = doesKindIndicate32BitInstruction(kind);
 6998              		.loc 1 1256 5 view .LVU1708
1256:mri/architectures/armv7-m/armv7-m.c ****         is32BitInstruction = doesKindIndicate32BitInstruction(kind);
 6999              		.loc 1 1256 5 view .LVU1709
 7000              	.LBB350:
ARM GAS  /tmp/ccXppZcm.s 			page 237


 7001              	.LBI350:
  76:mri/core/try_catch.h **** {
 7002              		.loc 5 76 20 view .LVU1710
 7003              	.LBB351:
 7004              		.loc 5 78 5 view .LVU1711
 7005              		.loc 5 78 22 is_stmt 0 view .LVU1712
 7006 0004 064D     		ldr	r5, .L609
 7007 0006 0023     		movs	r3, #0
 7008 0008 2B60     		str	r3, [r5]
 7009              	.LBE351:
 7010              	.LBE350:
1257:mri/architectures/armv7-m/armv7-m.c ****     __catch
 7011              		.loc 1 1257 9 is_stmt 1 view .LVU1713
1257:mri/architectures/armv7-m/armv7-m.c ****     __catch
 7012              		.loc 1 1257 30 is_stmt 0 view .LVU1714
 7013 000a 0846     		mov	r0, r1
 7014              	.LVL564:
1257:mri/architectures/armv7-m/armv7-m.c ****     __catch
 7015              		.loc 1 1257 30 view .LVU1715
 7016 000c FFF7FEFF 		bl	doesKindIndicate32BitInstruction
 7017              	.LVL565:
1256:mri/architectures/armv7-m/armv7-m.c ****         is32BitInstruction = doesKindIndicate32BitInstruction(kind);
 7018              		.loc 1 1256 5 is_stmt 1 view .LVU1716
1258:mri/architectures/armv7-m/armv7-m.c ****         __rethrow;
 7019              		.loc 1 1258 5 view .LVU1717
 7020 0010 2B68     		ldr	r3, [r5]
 7021 0012 03B1     		cbz	r3, .L608
 7022              	.LVL566:
 7023              	.L605:
1262:mri/architectures/armv7-m/armv7-m.c **** 
 7024              		.loc 1 1262 1 is_stmt 0 view .LVU1718
 7025 0014 38BD     		pop	{r3, r4, r5, pc}
 7026              	.LVL567:
 7027              	.L608:
1261:mri/architectures/armv7-m/armv7-m.c **** }
 7028              		.loc 1 1261 5 is_stmt 1 view .LVU1719
 7029 0016 0146     		mov	r1, r0
 7030 0018 2046     		mov	r0, r4
 7031              	.LVL568:
1261:mri/architectures/armv7-m/armv7-m.c **** }
 7032              		.loc 1 1261 5 is_stmt 0 view .LVU1720
 7033 001a FFF7FEFF 		bl	disableFPBBreakpointComparator
 7034              	.LVL569:
1261:mri/architectures/armv7-m/armv7-m.c **** }
 7035              		.loc 1 1261 5 view .LVU1721
 7036 001e F9E7     		b	.L605
 7037              	.L610:
 7038              		.align	2
 7039              	.L609:
 7040 0020 00000000 		.word	mriExceptionCode
 7041              		.cfi_endproc
 7042              	.LFE303:
 7044              		.section	.text.mriPlatform_ClearHardwareBreakpoint,"ax",%progbits
 7045              		.align	1
 7046              		.global	mriPlatform_ClearHardwareBreakpoint
 7047              		.syntax unified
 7048              		.thumb
ARM GAS  /tmp/ccXppZcm.s 			page 238


 7049              		.thumb_func
 7051              	mriPlatform_ClearHardwareBreakpoint:
 7052              	.LVL570:
 7053              	.LFB304:
1266:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  firstInstructionWord;
 7054              		.loc 1 1266 1 is_stmt 1 view -0
 7055              		.cfi_startproc
 7056              		@ args = 0, pretend = 0, frame = 0
 7057              		@ frame_needed = 0, uses_anonymous_args = 0
1266:mri/architectures/armv7-m/armv7-m.c ****     uint16_t  firstInstructionWord;
 7058              		.loc 1 1266 1 is_stmt 0 view .LVU1723
 7059 0000 38B5     		push	{r3, r4, r5, lr}
 7060              	.LCFI71:
 7061              		.cfi_def_cfa_offset 16
 7062              		.cfi_offset 3, -16
 7063              		.cfi_offset 4, -12
 7064              		.cfi_offset 5, -8
 7065              		.cfi_offset 14, -4
 7066 0002 0446     		mov	r4, r0
1267:mri/architectures/armv7-m/armv7-m.c **** 
 7067              		.loc 1 1267 5 is_stmt 1 view .LVU1724
1269:mri/architectures/armv7-m/armv7-m.c ****     {
 7068              		.loc 1 1269 6 view .LVU1725
1269:mri/architectures/armv7-m/armv7-m.c ****     {
 7069              		.loc 1 1269 6 view .LVU1726
 7070              	.LBB352:
 7071              	.LBI352:
  76:mri/core/try_catch.h **** {
 7072              		.loc 5 76 20 view .LVU1727
 7073              	.LBB353:
 7074              		.loc 5 78 5 view .LVU1728
 7075              		.loc 5 78 22 is_stmt 0 view .LVU1729
 7076 0004 074D     		ldr	r5, .L615
 7077 0006 0023     		movs	r3, #0
 7078 0008 2B60     		str	r3, [r5]
 7079              	.LBE353:
 7080              	.LBE352:
1271:mri/architectures/armv7-m/armv7-m.c ****     }
 7081              		.loc 1 1271 9 is_stmt 1 view .LVU1730
1271:mri/architectures/armv7-m/armv7-m.c ****     }
 7082              		.loc 1 1271 32 is_stmt 0 view .LVU1731
 7083 000a FFF7FEFF 		bl	throwingMemRead16
 7084              	.LVL571:
1269:mri/architectures/armv7-m/armv7-m.c ****     {
 7085              		.loc 1 1269 6 is_stmt 1 view .LVU1732
1273:mri/architectures/armv7-m/armv7-m.c ****         __rethrow;
 7086              		.loc 1 1273 5 view .LVU1733
 7087 000e 2B68     		ldr	r3, [r5]
 7088 0010 03B1     		cbz	r3, .L614
 7089              	.LVL572:
 7090              	.L611:
1277:mri/architectures/armv7-m/armv7-m.c **** 
 7091              		.loc 1 1277 1 is_stmt 0 view .LVU1734
 7092 0012 38BD     		pop	{r3, r4, r5, pc}
 7093              	.LVL573:
 7094              	.L614:
1276:mri/architectures/armv7-m/armv7-m.c **** }
ARM GAS  /tmp/ccXppZcm.s 			page 239


 7095              		.loc 1 1276 5 is_stmt 1 view .LVU1735
1276:mri/architectures/armv7-m/armv7-m.c **** }
 7096              		.loc 1 1276 45 is_stmt 0 view .LVU1736
 7097 0014 FFF7FEFF 		bl	isInstruction32Bit
 7098              	.LVL574:
1276:mri/architectures/armv7-m/armv7-m.c **** }
 7099              		.loc 1 1276 45 view .LVU1737
 7100 0018 0146     		mov	r1, r0
1276:mri/architectures/armv7-m/armv7-m.c **** }
 7101              		.loc 1 1276 5 view .LVU1738
 7102 001a 2046     		mov	r0, r4
 7103 001c FFF7FEFF 		bl	disableFPBBreakpointComparator
 7104              	.LVL575:
 7105 0020 F7E7     		b	.L611
 7106              	.L616:
 7107 0022 00BF     		.align	2
 7108              	.L615:
 7109 0024 00000000 		.word	mriExceptionCode
 7110              		.cfi_endproc
 7111              	.LFE304:
 7113              		.section	.text.clearHardwareBreakpointOnSvcHandler,"ax",%progbits
 7114              		.align	1
 7115              		.syntax unified
 7116              		.thumb
 7117              		.thumb_func
 7119              	clearHardwareBreakpointOnSvcHandler:
 7120              	.LFB236:
 326:mri/architectures/armv7-m/armv7-m.c ****     Platform_ClearHardwareBreakpoint(getNvicVector(SVCall_IRQn) & ~1);
 7121              		.loc 1 326 1 is_stmt 1 view -0
 7122              		.cfi_startproc
 7123              		@ args = 0, pretend = 0, frame = 0
 7124              		@ frame_needed = 0, uses_anonymous_args = 0
 7125 0000 08B5     		push	{r3, lr}
 7126              	.LCFI72:
 7127              		.cfi_def_cfa_offset 8
 7128              		.cfi_offset 3, -8
 7129              		.cfi_offset 14, -4
 327:mri/architectures/armv7-m/armv7-m.c **** }
 7130              		.loc 1 327 5 view .LVU1740
 327:mri/architectures/armv7-m/armv7-m.c **** }
 7131              		.loc 1 327 38 is_stmt 0 view .LVU1741
 7132 0002 6FF00400 		mvn	r0, #4
 7133 0006 FFF7FEFF 		bl	getNvicVector
 7134              	.LVL576:
 327:mri/architectures/armv7-m/armv7-m.c **** }
 7135              		.loc 1 327 5 view .LVU1742
 7136 000a 20F00100 		bic	r0, r0, #1
 7137 000e FFF7FEFF 		bl	mriPlatform_ClearHardwareBreakpoint
 7138              	.LVL577:
 328:mri/architectures/armv7-m/armv7-m.c **** 
 7139              		.loc 1 328 1 view .LVU1743
 7140 0012 08BD     		pop	{r3, pc}
 7141              		.cfi_endproc
 7142              	.LFE236:
 7144              		.section	.text.removeHardwareBreakpointOnSvcHandlerIfNeeded,"ax",%progbits
 7145              		.align	1
 7146              		.syntax unified
ARM GAS  /tmp/ccXppZcm.s 			page 240


 7147              		.thumb
 7148              		.thumb_func
 7150              	removeHardwareBreakpointOnSvcHandlerIfNeeded:
 7151              	.LFB233:
 307:mri/architectures/armv7-m/armv7-m.c ****     if (shouldRemoveHardwareBreakpointOnSvcHandler())
 7152              		.loc 1 307 1 is_stmt 1 view -0
 7153              		.cfi_startproc
 7154              		@ args = 0, pretend = 0, frame = 0
 7155              		@ frame_needed = 0, uses_anonymous_args = 0
 7156 0000 08B5     		push	{r3, lr}
 7157              	.LCFI73:
 7158              		.cfi_def_cfa_offset 8
 7159              		.cfi_offset 3, -8
 7160              		.cfi_offset 14, -4
 308:mri/architectures/armv7-m/armv7-m.c ****     {
 7161              		.loc 1 308 5 view .LVU1745
 308:mri/architectures/armv7-m/armv7-m.c ****     {
 7162              		.loc 1 308 9 is_stmt 0 view .LVU1746
 7163 0002 FFF7FEFF 		bl	shouldRemoveHardwareBreakpointOnSvcHandler
 7164              	.LVL578:
 308:mri/architectures/armv7-m/armv7-m.c ****     {
 7165              		.loc 1 308 8 view .LVU1747
 7166 0006 00B9     		cbnz	r0, .L622
 7167              	.L619:
 313:mri/architectures/armv7-m/armv7-m.c **** 
 7168              		.loc 1 313 1 view .LVU1748
 7169 0008 08BD     		pop	{r3, pc}
 7170              	.L622:
 310:mri/architectures/armv7-m/armv7-m.c ****         clearHardwareBreakpointOnSvcHandler();
 7171              		.loc 1 310 9 is_stmt 1 view .LVU1749
 7172 000a FFF7FEFF 		bl	clearSvcStepFlag
 7173              	.LVL579:
 311:mri/architectures/armv7-m/armv7-m.c ****     }
 7174              		.loc 1 311 9 view .LVU1750
 7175 000e FFF7FEFF 		bl	clearHardwareBreakpointOnSvcHandler
 7176              	.LVL580:
 313:mri/architectures/armv7-m/armv7-m.c **** 
 7177              		.loc 1 313 1 is_stmt 0 view .LVU1751
 7178 0012 F9E7     		b	.L619
 7179              		.cfi_endproc
 7180              	.LFE233:
 7182              		.section	.text.cleanupIfSingleStepping,"ax",%progbits
 7183              		.align	1
 7184              		.syntax unified
 7185              		.thumb
 7186              		.thumb_func
 7188              	cleanupIfSingleStepping:
 7189              	.LFB229:
 279:mri/architectures/armv7-m/armv7-m.c ****     restorePriorityRegsIfNeeded();
 7190              		.loc 1 279 1 is_stmt 1 view -0
 7191              		.cfi_startproc
 7192              		@ args = 0, pretend = 0, frame = 0
 7193              		@ frame_needed = 0, uses_anonymous_args = 0
 7194 0000 08B5     		push	{r3, lr}
 7195              	.LCFI74:
 7196              		.cfi_def_cfa_offset 8
 7197              		.cfi_offset 3, -8
ARM GAS  /tmp/ccXppZcm.s 			page 241


 7198              		.cfi_offset 14, -4
 280:mri/architectures/armv7-m/armv7-m.c ****     removeHardwareBreakpointOnSvcHandlerIfNeeded();
 7199              		.loc 1 280 5 view .LVU1753
 7200 0002 FFF7FEFF 		bl	restorePriorityRegsIfNeeded
 7201              	.LVL581:
 281:mri/architectures/armv7-m/armv7-m.c **** }
 7202              		.loc 1 281 5 view .LVU1754
 7203 0006 FFF7FEFF 		bl	removeHardwareBreakpointOnSvcHandlerIfNeeded
 7204              	.LVL582:
 282:mri/architectures/armv7-m/armv7-m.c **** 
 7205              		.loc 1 282 1 is_stmt 0 view .LVU1755
 7206 000a 08BD     		pop	{r3, pc}
 7207              		.cfi_endproc
 7208              	.LFE229:
 7210              		.section	.text.mriPlatform_DisableSingleStep,"ax",%progbits
 7211              		.align	1
 7212              		.global	mriPlatform_DisableSingleStep
 7213              		.syntax unified
 7214              		.thumb
 7215              		.thumb_func
 7217              	mriPlatform_DisableSingleStep:
 7218              	.LFB228:
 272:mri/architectures/armv7-m/armv7-m.c ****     cleanupIfSingleStepping();
 7219              		.loc 1 272 1 is_stmt 1 view -0
 7220              		.cfi_startproc
 7221              		@ args = 0, pretend = 0, frame = 0
 7222              		@ frame_needed = 0, uses_anonymous_args = 0
 7223 0000 08B5     		push	{r3, lr}
 7224              	.LCFI75:
 7225              		.cfi_def_cfa_offset 8
 7226              		.cfi_offset 3, -8
 7227              		.cfi_offset 14, -4
 273:mri/architectures/armv7-m/armv7-m.c ****     disableSingleStep();
 7228              		.loc 1 273 5 view .LVU1757
 7229 0002 FFF7FEFF 		bl	cleanupIfSingleStepping
 7230              	.LVL583:
 274:mri/architectures/armv7-m/armv7-m.c ****     clearSingleSteppingFlag();
 7231              		.loc 1 274 5 view .LVU1758
 7232              	.LBB354:
 7233              	.LBI354:
 109:mri/architectures/armv7-m/debug_cm3.h **** {
 7234              		.loc 4 109 22 view .LVU1759
 7235              	.LBB355:
 111:mri/architectures/armv7-m/debug_cm3.h **** }
 7236              		.loc 4 111 5 view .LVU1760
 111:mri/architectures/armv7-m/debug_cm3.h **** }
 7237              		.loc 4 111 14 is_stmt 0 view .LVU1761
 7238 0006 054A     		ldr	r2, .L627
 7239 0008 D2F8FC30 		ldr	r3, [r2, #252]
 111:mri/architectures/armv7-m/debug_cm3.h **** }
 7240              		.loc 4 111 22 view .LVU1762
 7241 000c 23F48023 		bic	r3, r3, #262144
 7242 0010 C2F8FC30 		str	r3, [r2, #252]
 7243              	.LBE355:
 7244              	.LBE354:
 275:mri/architectures/armv7-m/armv7-m.c **** }
 7245              		.loc 1 275 5 is_stmt 1 view .LVU1763
ARM GAS  /tmp/ccXppZcm.s 			page 242


 7246 0014 FFF7FEFF 		bl	clearSingleSteppingFlag
 7247              	.LVL584:
 276:mri/architectures/armv7-m/armv7-m.c **** 
 7248              		.loc 1 276 1 is_stmt 0 view .LVU1764
 7249 0018 08BD     		pop	{r3, pc}
 7250              	.L628:
 7251 001a 00BF     		.align	2
 7252              	.L627:
 7253 001c 00ED00E0 		.word	-536810240
 7254              		.cfi_endproc
 7255              	.LFE228:
 7257              		.section	.text.mriCortexMInit,"ax",%progbits
 7258              		.align	1
 7259              		.global	mriCortexMInit
 7260              		.syntax unified
 7261              		.thumb
 7262              		.thumb_func
 7264              	mriCortexMInit:
 7265              	.LVL585:
 7266              	.LFB218:
 139:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_THREAD_MRI)
 7267              		.loc 1 139 1 is_stmt 1 view -0
 7268              		.cfi_startproc
 7269              		@ args = 0, pretend = 0, frame = 8
 7270              		@ frame_needed = 0, uses_anonymous_args = 0
 139:mri/architectures/armv7-m/armv7-m.c ****     if (MRI_THREAD_MRI)
 7271              		.loc 1 139 1 is_stmt 0 view .LVU1766
 7272 0000 70B5     		push	{r4, r5, r6, lr}
 7273              	.LCFI76:
 7274              		.cfi_def_cfa_offset 16
 7275              		.cfi_offset 4, -16
 7276              		.cfi_offset 5, -12
 7277              		.cfi_offset 6, -8
 7278              		.cfi_offset 14, -4
 7279 0002 82B0     		sub	sp, sp, #8
 7280              	.LCFI77:
 7281              		.cfi_def_cfa_offset 24
 7282 0004 0C46     		mov	r4, r1
 7283 0006 1546     		mov	r5, r2
 140:mri/architectures/armv7-m/armv7-m.c ****     {
 7284              		.loc 1 140 5 is_stmt 1 view .LVU1767
 7285              	.LBB356:
 148:mri/architectures/armv7-m/armv7-m.c ****         (void)dummyReference;
 7286              		.loc 1 148 9 view .LVU1768
 148:mri/architectures/armv7-m/armv7-m.c ****         (void)dummyReference;
 7287              		.loc 1 148 26 is_stmt 0 view .LVU1769
 7288 0008 124B     		ldr	r3, .L633
 7289 000a 0193     		str	r3, [sp, #4]
 149:mri/architectures/armv7-m/armv7-m.c ****     }
 7290              		.loc 1 149 9 is_stmt 1 view .LVU1770
 7291 000c 019B     		ldr	r3, [sp, #4]
 7292              	.LBE356:
 151:mri/architectures/armv7-m/armv7-m.c **** 
 7293              		.loc 1 151 5 view .LVU1771
 153:mri/architectures/armv7-m/armv7-m.c ****     clearState();
 7294              		.loc 1 153 5 view .LVU1772
 7295 000e FFF7FEFF 		bl	fillDebuggerStack
ARM GAS  /tmp/ccXppZcm.s 			page 243


 7296              	.LVL586:
 154:mri/architectures/armv7-m/armv7-m.c ****     determinePriorityBitShift();
 7297              		.loc 1 154 5 view .LVU1773
 7298 0012 FFF7FEFF 		bl	clearState
 7299              	.LVL587:
 155:mri/architectures/armv7-m/armv7-m.c ****     configureDWTandFPB();
 7300              		.loc 1 155 5 view .LVU1774
 7301 0016 FFF7FEFF 		bl	determinePriorityBitShift
 7302              	.LVL588:
 156:mri/architectures/armv7-m/armv7-m.c ****     if (debugMonPriority == 0)
 7303              		.loc 1 156 5 view .LVU1775
 7304 001a FFF7FEFF 		bl	configureDWTandFPB
 7305              	.LVL589:
 157:mri/architectures/armv7-m/armv7-m.c ****     {
 7306              		.loc 1 157 5 view .LVU1776
 157:mri/architectures/armv7-m/armv7-m.c ****     {
 7307              		.loc 1 157 8 is_stmt 0 view .LVU1777
 7308 001e B4B9     		cbnz	r4, .L630
 159:mri/architectures/armv7-m/armv7-m.c ****         defaultExternalInterruptsToLowerPriority(debugMonPriority+1, highestExternalIrq);
 7309              		.loc 1 159 9 is_stmt 1 view .LVU1778
 7310 0020 661C     		adds	r6, r4, #1
 7311 0022 F6B2     		uxtb	r6, r6
 7312 0024 3046     		mov	r0, r6
 7313 0026 FFF7FEFF 		bl	defaultSvcAndSysTickInterruptsToLowerPriority
 7314              	.LVL590:
 160:mri/architectures/armv7-m/armv7-m.c ****     }
 7315              		.loc 1 160 9 view .LVU1779
 7316 002a 2946     		mov	r1, r5
 7317 002c 3046     		mov	r0, r6
 7318 002e FFF7FEFF 		bl	defaultExternalInterruptsToLowerPriority
 7319              	.LVL591:
 7320              	.L631:
 171:mri/architectures/armv7-m/armv7-m.c ****     clearMonitorPending();
 7321              		.loc 1 171 5 view .LVU1780
 7322 0032 FFF7FEFF 		bl	mriPlatform_DisableSingleStep
 7323              	.LVL592:
 172:mri/architectures/armv7-m/armv7-m.c ****     enableDebugMonitorAtSpecifiedPriority(debugMonPriority);
 7324              		.loc 1 172 5 view .LVU1781
 7325              	.LBB357:
 7326              	.LBI357:
 119:mri/architectures/armv7-m/debug_cm3.h **** {
 7327              		.loc 4 119 22 view .LVU1782
 7328              	.LBB358:
 121:mri/architectures/armv7-m/debug_cm3.h **** }
 7329              		.loc 4 121 5 view .LVU1783
 121:mri/architectures/armv7-m/debug_cm3.h **** }
 7330              		.loc 4 121 14 is_stmt 0 view .LVU1784
 7331 0036 084A     		ldr	r2, .L633+4
 7332 0038 D2F8FC30 		ldr	r3, [r2, #252]
 121:mri/architectures/armv7-m/debug_cm3.h **** }
 7333              		.loc 4 121 22 view .LVU1785
 7334 003c 23F40033 		bic	r3, r3, #131072
 7335 0040 C2F8FC30 		str	r3, [r2, #252]
 7336              	.LBE358:
 7337              	.LBE357:
 173:mri/architectures/armv7-m/armv7-m.c **** }
 7338              		.loc 1 173 5 is_stmt 1 view .LVU1786
ARM GAS  /tmp/ccXppZcm.s 			page 244


 7339 0044 2046     		mov	r0, r4
 7340 0046 FFF7FEFF 		bl	enableDebugMonitorAtSpecifiedPriority
 7341              	.LVL593:
 174:mri/architectures/armv7-m/armv7-m.c **** 
 7342              		.loc 1 174 1 is_stmt 0 view .LVU1787
 7343 004a 02B0     		add	sp, sp, #8
 7344              	.LCFI78:
 7345              		.cfi_remember_state
 7346              		.cfi_def_cfa_offset 16
 7347              		@ sp needed
 7348 004c 70BD     		pop	{r4, r5, r6, pc}
 7349              	.L630:
 7350              	.LCFI79:
 7351              		.cfi_restore_state
 169:mri/architectures/armv7-m/armv7-m.c ****     }
 7352              		.loc 1 169 9 is_stmt 1 view .LVU1788
 7353 004e FFF7FEFF 		bl	disableDebuggerStack
 7354              	.LVL594:
 7355 0052 EEE7     		b	.L631
 7356              	.L634:
 7357              		.align	2
 7358              	.L633:
 7359 0054 00000000 		.word	mriExceptionHandler
 7360 0058 00ED00E0 		.word	-536810240
 7361              		.cfi_endproc
 7362              	.LFE218:
 7364              		.section	.text.mriPlatform_EnteringDebugger,"ax",%progbits
 7365              		.align	1
 7366              		.global	mriPlatform_EnteringDebugger
 7367              		.syntax unified
 7368              		.thumb
 7369              		.thumb_func
 7371              	mriPlatform_EnteringDebugger:
 7372              	.LFB275:
 960:mri/architectures/armv7-m/armv7-m.c ****     clearMemoryFaultFlag();
 7373              		.loc 1 960 1 view -0
 7374              		.cfi_startproc
 7375              		@ args = 0, pretend = 0, frame = 0
 7376              		@ frame_needed = 0, uses_anonymous_args = 0
 7377 0000 10B5     		push	{r4, lr}
 7378              	.LCFI80:
 7379              		.cfi_def_cfa_offset 8
 7380              		.cfi_offset 4, -8
 7381              		.cfi_offset 14, -4
 961:mri/architectures/armv7-m/armv7-m.c ****     mriCortexMState.originalPC = Platform_GetProgramCounter();
 7382              		.loc 1 961 5 view .LVU1790
 7383 0002 FFF7FEFF 		bl	clearMemoryFaultFlag
 7384              	.LVL595:
 962:mri/architectures/armv7-m/armv7-m.c ****     Platform_DisableSingleStep();
 7385              		.loc 1 962 5 view .LVU1791
 962:mri/architectures/armv7-m/armv7-m.c ****     Platform_DisableSingleStep();
 7386              		.loc 1 962 34 is_stmt 0 view .LVU1792
 7387 0006 FFF7FEFF 		bl	mriPlatform_GetProgramCounter
 7388              	.LVL596:
 962:mri/architectures/armv7-m/armv7-m.c ****     Platform_DisableSingleStep();
 7389              		.loc 1 962 32 view .LVU1793
 7390 000a 074C     		ldr	r4, .L639
ARM GAS  /tmp/ccXppZcm.s 			page 245


 7391 000c 2063     		str	r0, [r4, #48]
 963:mri/architectures/armv7-m/armv7-m.c ****     if (isExternalInterrupt(mriCortexMState.exceptionNumber))
 7392              		.loc 1 963 5 is_stmt 1 view .LVU1794
 7393 000e FFF7FEFF 		bl	mriPlatform_DisableSingleStep
 7394              	.LVL597:
 964:mri/architectures/armv7-m/armv7-m.c ****         setControlCFlag();
 7395              		.loc 1 964 5 view .LVU1795
 964:mri/architectures/armv7-m/armv7-m.c ****         setControlCFlag();
 7396              		.loc 1 964 9 is_stmt 0 view .LVU1796
 7397 0012 A069     		ldr	r0, [r4, #24]
 7398 0014 FFF7FEFF 		bl	isExternalInterrupt
 7399              	.LVL598:
 964:mri/architectures/armv7-m/armv7-m.c ****         setControlCFlag();
 7400              		.loc 1 964 8 view .LVU1797
 7401 0018 10B9     		cbnz	r0, .L638
 7402              	.L636:
 966:mri/architectures/armv7-m/armv7-m.c **** }
 7403              		.loc 1 966 5 is_stmt 1 view .LVU1798
 7404 001a FFF7FEFF 		bl	setActiveDebugFlag
 7405              	.LVL599:
 967:mri/architectures/armv7-m/armv7-m.c **** 
 7406              		.loc 1 967 1 is_stmt 0 view .LVU1799
 7407 001e 10BD     		pop	{r4, pc}
 7408              	.L638:
 965:mri/architectures/armv7-m/armv7-m.c ****     setActiveDebugFlag();
 7409              		.loc 1 965 9 is_stmt 1 view .LVU1800
 7410 0020 FFF7FEFF 		bl	setControlCFlag
 7411              	.LVL600:
 7412 0024 F9E7     		b	.L636
 7413              	.L640:
 7414 0026 00BF     		.align	2
 7415              	.L639:
 7416 0028 00000000 		.word	mriCortexMState
 7417              		.cfi_endproc
 7418              	.LFE275:
 7420              		.section	.text.mriPlatform_SetHardwareWatchpoint,"ax",%progbits
 7421              		.align	1
 7422              		.global	mriPlatform_SetHardwareWatchpoint
 7423              		.syntax unified
 7424              		.thumb
 7425              		.thumb_func
 7427              	mriPlatform_SetHardwareWatchpoint:
 7428              	.LVL601:
 7429              	.LFB305:
1282:mri/architectures/armv7-m/armv7-m.c ****     uint32_t       nativeType = convertWatchpointTypeToCortexMType(type);
 7430              		.loc 1 1282 1 view -0
 7431              		.cfi_startproc
 7432              		@ args = 0, pretend = 0, frame = 0
 7433              		@ frame_needed = 0, uses_anonymous_args = 0
1282:mri/architectures/armv7-m/armv7-m.c ****     uint32_t       nativeType = convertWatchpointTypeToCortexMType(type);
 7434              		.loc 1 1282 1 is_stmt 0 view .LVU1802
 7435 0000 38B5     		push	{r3, r4, r5, lr}
 7436              	.LCFI81:
 7437              		.cfi_def_cfa_offset 16
 7438              		.cfi_offset 3, -16
 7439              		.cfi_offset 4, -12
 7440              		.cfi_offset 5, -8
ARM GAS  /tmp/ccXppZcm.s 			page 246


 7441              		.cfi_offset 14, -4
 7442 0002 0546     		mov	r5, r0
 7443 0004 0C46     		mov	r4, r1
1283:mri/architectures/armv7-m/armv7-m.c ****     DWT_COMP_Type* pComparator;
 7444              		.loc 1 1283 5 is_stmt 1 view .LVU1803
1283:mri/architectures/armv7-m/armv7-m.c ****     DWT_COMP_Type* pComparator;
 7445              		.loc 1 1283 33 is_stmt 0 view .LVU1804
 7446 0006 1046     		mov	r0, r2
 7447              	.LVL602:
1283:mri/architectures/armv7-m/armv7-m.c ****     DWT_COMP_Type* pComparator;
 7448              		.loc 1 1283 33 view .LVU1805
 7449 0008 FFF7FEFF 		bl	convertWatchpointTypeToCortexMType
 7450              	.LVL603:
1284:mri/architectures/armv7-m/armv7-m.c **** 
 7451              		.loc 1 1284 5 is_stmt 1 view .LVU1806
1286:mri/architectures/armv7-m/armv7-m.c ****         __throw(invalidArgumentException);
 7452              		.loc 1 1286 5 view .LVU1807
 7453              	.LBB359:
 7454              	.LBI359:
 330:mri/architectures/armv7-m/debug_cm3.h ****                                                 uint32_t watchpointSize,
 7455              		.loc 4 330 21 view .LVU1808
 7456              	.LBB360:
 334:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorAddress(watchpointAddress, watchpointSize) &&
 7457              		.loc 4 334 5 view .LVU1809
 7458              	.LBB361:
 7459              	.LBI361:
 313:mri/architectures/armv7-m/debug_cm3.h **** {
 7460              		.loc 4 313 21 view .LVU1810
 315:mri/architectures/armv7-m/debug_cm3.h **** }
 7461              		.loc 4 315 5 view .LVU1811
 7462              	.LBB362:
 7463              	.LBI362:
 302:mri/architectures/armv7-m/debug_cm3.h **** {
 7464              		.loc 4 302 21 view .LVU1812
 7465              	.LBB363:
 304:mri/architectures/armv7-m/debug_cm3.h **** }
 7466              		.loc 4 304 5 view .LVU1813
 304:mri/architectures/armv7-m/debug_cm3.h **** }
 7467              		.loc 4 304 28 is_stmt 0 view .LVU1814
 7468 000c 631E     		subs	r3, r4, #1
 7469              	.LVL604:
 304:mri/architectures/armv7-m/debug_cm3.h **** }
 7470              		.loc 4 304 28 view .LVU1815
 7471              	.LBE363:
 7472              	.LBE362:
 7473              	.LBE361:
 335:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorType(watchpointType);
 7474              		.loc 4 335 75 view .LVU1816
 7475 000e 1C42     		tst	r4, r3
 7476 0010 11D1     		bne	.L642
 7477              	.LVL605:
 334:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorAddress(watchpointAddress, watchpointSize) &&
 7478              		.loc 4 334 53 view .LVU1817
 7479 0012 1D42     		tst	r5, r3
 7480 0014 0FD1     		bne	.L642
 7481              	.LVL606:
 7482              	.LBB364:
ARM GAS  /tmp/ccXppZcm.s 			page 247


 7483              	.LBI364:
 323:mri/architectures/armv7-m/debug_cm3.h **** {
 7484              		.loc 4 323 21 is_stmt 1 view .LVU1818
 7485              	.LBB365:
 325:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_WRITE) ||
 7486              		.loc 4 325 5 view .LVU1819
 326:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE);
 7487              		.loc 4 326 70 is_stmt 0 view .LVU1820
 7488 0016 431F     		subs	r3, r0, #5
 7489              	.LVL607:
 326:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE);
 7490              		.loc 4 326 70 view .LVU1821
 7491              	.LBE365:
 7492              	.LBE364:
 335:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorType(watchpointType);
 7493              		.loc 4 335 75 view .LVU1822
 7494 0018 022B     		cmp	r3, #2
 7495 001a 0CD8     		bhi	.L642
 7496              	.LVL608:
 335:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorType(watchpointType);
 7497              		.loc 4 335 75 view .LVU1823
 7498              	.LBE360:
 7499              	.LBE359:
1289:mri/architectures/armv7-m/armv7-m.c ****     if (!pComparator)
 7500              		.loc 1 1289 5 is_stmt 1 view .LVU1824
1289:mri/architectures/armv7-m/armv7-m.c ****     if (!pComparator)
 7501              		.loc 1 1289 19 is_stmt 0 view .LVU1825
 7502 001c 0246     		mov	r2, r0
 7503 001e 2146     		mov	r1, r4
 7504 0020 2846     		mov	r0, r5
 7505              	.LVL609:
1289:mri/architectures/armv7-m/armv7-m.c ****     if (!pComparator)
 7506              		.loc 1 1289 19 view .LVU1826
 7507 0022 FFF7FEFF 		bl	enableDWTWatchpoint
 7508              	.LVL610:
1290:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
 7509              		.loc 1 1290 5 is_stmt 1 view .LVU1827
1290:mri/architectures/armv7-m/armv7-m.c ****         __throw(exceededHardwareResourcesException);
 7510              		.loc 1 1290 8 is_stmt 0 view .LVU1828
 7511 0026 60B9     		cbnz	r0, .L641
1291:mri/architectures/armv7-m/armv7-m.c **** }
 7512              		.loc 1 1291 9 is_stmt 1 view .LVU1829
 7513              	.LVL611:
 7514              	.LBB366:
 7515              	.LBI366:
  71:mri/core/try_catch.h **** {
 7516              		.loc 5 71 20 view .LVU1830
 7517              	.LBB367:
  73:mri/core/try_catch.h **** }
 7518              		.loc 5 73 5 view .LVU1831
  73:mri/core/try_catch.h **** }
 7519              		.loc 5 73 73 is_stmt 0 view .LVU1832
 7520 0028 064A     		ldr	r2, .L646
 7521 002a 1368     		ldr	r3, [r2]
 7522 002c 082B     		cmp	r3, #8
 7523 002e B8BF     		it	lt
 7524 0030 0823     		movlt	r3, #8
ARM GAS  /tmp/ccXppZcm.s 			page 248


  73:mri/core/try_catch.h **** }
 7525              		.loc 5 73 22 view .LVU1833
 7526 0032 1360     		str	r3, [r2]
 7527              	.LVL612:
  73:mri/core/try_catch.h **** }
 7528              		.loc 5 73 22 view .LVU1834
 7529              	.LBE367:
 7530              	.LBE366:
1291:mri/architectures/armv7-m/armv7-m.c **** }
 7531              		.loc 1 1291 9 view .LVU1835
 7532 0034 05E0     		b	.L641
 7533              	.LVL613:
 7534              	.L642:
1287:mri/architectures/armv7-m/armv7-m.c **** 
 7535              		.loc 1 1287 9 is_stmt 1 view .LVU1836
 7536              	.LBB368:
 7537              	.LBI368:
  71:mri/core/try_catch.h **** {
 7538              		.loc 5 71 20 view .LVU1837
 7539              	.LBB369:
  73:mri/core/try_catch.h **** }
 7540              		.loc 5 73 5 view .LVU1838
  73:mri/core/try_catch.h **** }
 7541              		.loc 5 73 73 is_stmt 0 view .LVU1839
 7542 0036 034A     		ldr	r2, .L646
 7543 0038 1368     		ldr	r3, [r2]
 7544 003a 042B     		cmp	r3, #4
 7545 003c B8BF     		it	lt
 7546 003e 0423     		movlt	r3, #4
  73:mri/core/try_catch.h **** }
 7547              		.loc 5 73 22 view .LVU1840
 7548 0040 1360     		str	r3, [r2]
 7549              	.LVL614:
 7550              	.L641:
  73:mri/core/try_catch.h **** }
 7551              		.loc 5 73 22 view .LVU1841
 7552              	.LBE369:
 7553              	.LBE368:
1292:mri/architectures/armv7-m/armv7-m.c **** 
 7554              		.loc 1 1292 1 view .LVU1842
 7555 0042 38BD     		pop	{r3, r4, r5, pc}
 7556              	.LVL615:
 7557              	.L647:
1292:mri/architectures/armv7-m/armv7-m.c **** 
 7558              		.loc 1 1292 1 view .LVU1843
 7559              		.align	2
 7560              	.L646:
 7561 0044 00000000 		.word	mriExceptionCode
 7562              		.cfi_endproc
 7563              	.LFE305:
 7565              		.section	.text.mriPlatform_ClearHardwareWatchpoint,"ax",%progbits
 7566              		.align	1
 7567              		.global	mriPlatform_ClearHardwareWatchpoint
 7568              		.syntax unified
 7569              		.thumb
 7570              		.thumb_func
 7572              	mriPlatform_ClearHardwareWatchpoint:
ARM GAS  /tmp/ccXppZcm.s 			page 249


 7573              	.LVL616:
 7574              	.LFB307:
1311:mri/architectures/armv7-m/armv7-m.c ****     uint32_t nativeType = convertWatchpointTypeToCortexMType(type);
 7575              		.loc 1 1311 1 is_stmt 1 view -0
 7576              		.cfi_startproc
 7577              		@ args = 0, pretend = 0, frame = 0
 7578              		@ frame_needed = 0, uses_anonymous_args = 0
1311:mri/architectures/armv7-m/armv7-m.c ****     uint32_t nativeType = convertWatchpointTypeToCortexMType(type);
 7579              		.loc 1 1311 1 is_stmt 0 view .LVU1845
 7580 0000 38B5     		push	{r3, r4, r5, lr}
 7581              	.LCFI82:
 7582              		.cfi_def_cfa_offset 16
 7583              		.cfi_offset 3, -16
 7584              		.cfi_offset 4, -12
 7585              		.cfi_offset 5, -8
 7586              		.cfi_offset 14, -4
 7587 0002 0546     		mov	r5, r0
 7588 0004 0C46     		mov	r4, r1
1312:mri/architectures/armv7-m/armv7-m.c **** 
 7589              		.loc 1 1312 5 is_stmt 1 view .LVU1846
1312:mri/architectures/armv7-m/armv7-m.c **** 
 7590              		.loc 1 1312 27 is_stmt 0 view .LVU1847
 7591 0006 1046     		mov	r0, r2
 7592              	.LVL617:
1312:mri/architectures/armv7-m/armv7-m.c **** 
 7593              		.loc 1 1312 27 view .LVU1848
 7594 0008 FFF7FEFF 		bl	convertWatchpointTypeToCortexMType
 7595              	.LVL618:
1314:mri/architectures/armv7-m/armv7-m.c ****         __throw(invalidArgumentException);
 7596              		.loc 1 1314 5 is_stmt 1 view .LVU1849
 7597              	.LBB370:
 7598              	.LBI370:
 330:mri/architectures/armv7-m/debug_cm3.h ****                                                 uint32_t watchpointSize,
 7599              		.loc 4 330 21 view .LVU1850
 7600              	.LBB371:
 334:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorAddress(watchpointAddress, watchpointSize) &&
 7601              		.loc 4 334 5 view .LVU1851
 7602              	.LBB372:
 7603              	.LBI372:
 313:mri/architectures/armv7-m/debug_cm3.h **** {
 7604              		.loc 4 313 21 view .LVU1852
 315:mri/architectures/armv7-m/debug_cm3.h **** }
 7605              		.loc 4 315 5 view .LVU1853
 7606              	.LBB373:
 7607              	.LBI373:
 302:mri/architectures/armv7-m/debug_cm3.h **** {
 7608              		.loc 4 302 21 view .LVU1854
 7609              	.LBB374:
 304:mri/architectures/armv7-m/debug_cm3.h **** }
 7610              		.loc 4 304 5 view .LVU1855
 304:mri/architectures/armv7-m/debug_cm3.h **** }
 7611              		.loc 4 304 28 is_stmt 0 view .LVU1856
 7612 000c 631E     		subs	r3, r4, #1
 7613              	.LVL619:
 304:mri/architectures/armv7-m/debug_cm3.h **** }
 7614              		.loc 4 304 28 view .LVU1857
 7615              	.LBE374:
ARM GAS  /tmp/ccXppZcm.s 			page 250


 7616              	.LBE373:
 7617              	.LBE372:
 335:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorType(watchpointType);
 7618              		.loc 4 335 75 view .LVU1858
 7619 000e 1C42     		tst	r4, r3
 7620 0010 0AD1     		bne	.L649
 7621              	.LVL620:
 334:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorAddress(watchpointAddress, watchpointSize) &&
 7622              		.loc 4 334 53 view .LVU1859
 7623 0012 1D42     		tst	r5, r3
 7624 0014 08D1     		bne	.L649
 7625              	.LVL621:
 7626              	.LBB375:
 7627              	.LBI375:
 323:mri/architectures/armv7-m/debug_cm3.h **** {
 7628              		.loc 4 323 21 is_stmt 1 view .LVU1860
 7629              	.LBB376:
 325:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_WRITE) ||
 7630              		.loc 4 325 5 view .LVU1861
 326:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE);
 7631              		.loc 4 326 70 is_stmt 0 view .LVU1862
 7632 0016 431F     		subs	r3, r0, #5
 7633              	.LVL622:
 326:mri/architectures/armv7-m/debug_cm3.h ****            (watchpointType == DWT_COMP_FUNCTION_FUNCTION_DATA_READWRITE);
 7634              		.loc 4 326 70 view .LVU1863
 7635              	.LBE376:
 7636              	.LBE375:
 335:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorType(watchpointType);
 7637              		.loc 4 335 75 view .LVU1864
 7638 0018 022B     		cmp	r3, #2
 7639 001a 05D8     		bhi	.L649
 7640              	.LVL623:
 335:mri/architectures/armv7-m/debug_cm3.h ****            isValidDWTComparatorType(watchpointType);
 7641              		.loc 4 335 75 view .LVU1865
 7642              	.LBE371:
 7643              	.LBE370:
1317:mri/architectures/armv7-m/armv7-m.c **** }
 7644              		.loc 1 1317 5 is_stmt 1 view .LVU1866
 7645 001c 0246     		mov	r2, r0
 7646 001e 2146     		mov	r1, r4
 7647 0020 2846     		mov	r0, r5
 7648              	.LVL624:
1317:mri/architectures/armv7-m/armv7-m.c **** }
 7649              		.loc 1 1317 5 is_stmt 0 view .LVU1867
 7650 0022 FFF7FEFF 		bl	disableDWTWatchpoint
 7651              	.LVL625:
1317:mri/architectures/armv7-m/armv7-m.c **** }
 7652              		.loc 1 1317 5 view .LVU1868
 7653 0026 05E0     		b	.L648
 7654              	.LVL626:
 7655              	.L649:
1315:mri/architectures/armv7-m/armv7-m.c **** 
 7656              		.loc 1 1315 9 is_stmt 1 view .LVU1869
 7657              	.LBB377:
 7658              	.LBI377:
  71:mri/core/try_catch.h **** {
 7659              		.loc 5 71 20 view .LVU1870
ARM GAS  /tmp/ccXppZcm.s 			page 251


 7660              	.LBB378:
  73:mri/core/try_catch.h **** }
 7661              		.loc 5 73 5 view .LVU1871
  73:mri/core/try_catch.h **** }
 7662              		.loc 5 73 73 is_stmt 0 view .LVU1872
 7663 0028 034A     		ldr	r2, .L652
 7664 002a 1368     		ldr	r3, [r2]
 7665 002c 042B     		cmp	r3, #4
 7666 002e B8BF     		it	lt
 7667 0030 0423     		movlt	r3, #4
  73:mri/core/try_catch.h **** }
 7668              		.loc 5 73 22 view .LVU1873
 7669 0032 1360     		str	r3, [r2]
 7670              	.LVL627:
 7671              	.L648:
  73:mri/core/try_catch.h **** }
 7672              		.loc 5 73 22 view .LVU1874
 7673              	.LBE378:
 7674              	.LBE377:
1318:mri/architectures/armv7-m/armv7-m.c **** 
 7675              		.loc 1 1318 1 view .LVU1875
 7676 0034 38BD     		pop	{r3, r4, r5, pc}
 7677              	.LVL628:
 7678              	.L653:
1318:mri/architectures/armv7-m/armv7-m.c **** 
 7679              		.loc 1 1318 1 view .LVU1876
 7680 0036 00BF     		.align	2
 7681              	.L652:
 7682 0038 00000000 		.word	mriExceptionCode
 7683              		.cfi_endproc
 7684              	.LFE307:
 7686              		.section	.text.mriPlatform_GetTargetXmlSize,"ax",%progbits
 7687              		.align	1
 7688              		.global	mriPlatform_GetTargetXmlSize
 7689              		.syntax unified
 7690              		.thumb
 7691              		.thumb_func
 7693              	mriPlatform_GetTargetXmlSize:
 7694              	.LFB308:
1321:mri/architectures/armv7-m/armv7-m.c ****     return sizeof(g_targetXml) - 1;
 7695              		.loc 1 1321 1 is_stmt 1 view -0
 7696              		.cfi_startproc
 7697              		@ args = 0, pretend = 0, frame = 0
 7698              		@ frame_needed = 0, uses_anonymous_args = 0
 7699              		@ link register save eliminated.
1322:mri/architectures/armv7-m/armv7-m.c **** }
 7700              		.loc 1 1322 5 view .LVU1878
1323:mri/architectures/armv7-m/armv7-m.c **** 
 7701              		.loc 1 1323 1 is_stmt 0 view .LVU1879
 7702 0000 40F29270 		movw	r0, #1938
 7703 0004 7047     		bx	lr
 7704              		.cfi_endproc
 7705              	.LFE308:
 7707              		.section	.text.mriPlatform_GetTargetXml,"ax",%progbits
 7708              		.align	1
 7709              		.global	mriPlatform_GetTargetXml
 7710              		.syntax unified
ARM GAS  /tmp/ccXppZcm.s 			page 252


 7711              		.thumb
 7712              		.thumb_func
 7714              	mriPlatform_GetTargetXml:
 7715              	.LFB309:
1327:mri/architectures/armv7-m/armv7-m.c ****     return g_targetXml;
 7716              		.loc 1 1327 1 is_stmt 1 view -0
 7717              		.cfi_startproc
 7718              		@ args = 0, pretend = 0, frame = 0
 7719              		@ frame_needed = 0, uses_anonymous_args = 0
 7720              		@ link register save eliminated.
1328:mri/architectures/armv7-m/armv7-m.c **** }
 7721              		.loc 1 1328 5 view .LVU1881
1329:mri/architectures/armv7-m/armv7-m.c **** 
 7722              		.loc 1 1329 1 is_stmt 0 view .LVU1882
 7723 0000 0048     		ldr	r0, .L656
 7724 0002 7047     		bx	lr
 7725              	.L657:
 7726              		.align	2
 7727              	.L656:
 7728 0004 00000000 		.word	g_targetXml
 7729              		.cfi_endproc
 7730              	.LFE309:
 7732              		.section	.text.mriPlatform_ResetDevice,"ax",%progbits
 7733              		.align	1
 7734              		.global	mriPlatform_ResetDevice
 7735              		.syntax unified
 7736              		.thumb
 7737              		.thumb_func
 7739              	mriPlatform_ResetDevice:
 7740              	.LFB310:
1333:mri/architectures/armv7-m/armv7-m.c ****     NVIC_SystemReset();
 7741              		.loc 1 1333 1 is_stmt 1 view -0
 7742              		.cfi_startproc
 7743              		@ Volatile: function does not return.
 7744              		@ args = 0, pretend = 0, frame = 0
 7745              		@ frame_needed = 0, uses_anonymous_args = 0
 7746 0000 08B5     		push	{r3, lr}
 7747              	.LCFI83:
 7748              		.cfi_def_cfa_offset 8
 7749              		.cfi_offset 3, -8
 7750              		.cfi_offset 14, -4
1334:mri/architectures/armv7-m/armv7-m.c **** }
 7751              		.loc 1 1334 5 view .LVU1884
 7752 0002 FFF7FEFF 		bl	__NVIC_SystemReset
 7753              	.LVL629:
 7754              		.cfi_endproc
 7755              	.LFE310:
 7757              		.section	.text.mriFaultHandler,"ax",%progbits
 7758              		.align	1
 7759              		.global	mriFaultHandler
 7760              		.syntax unified
 7761              		.thumb
 7762              		.thumb_func
 7764              	mriFaultHandler:
 7765              	.LVL630:
 7766              	.LFB311:
1434:mri/architectures/armv7-m/armv7-m.c ****     /* This handler will be called from the fault handlers (Hard Fault, etc.)
ARM GAS  /tmp/ccXppZcm.s 			page 253


 7767              		.loc 1 1434 1 view -0
 7768              		.cfi_startproc
 7769              		@ args = 0, pretend = 0, frame = 0
 7770              		@ frame_needed = 0, uses_anonymous_args = 0
1434:mri/architectures/armv7-m/armv7-m.c ****     /* This handler will be called from the fault handlers (Hard Fault, etc.)
 7771              		.loc 1 1434 1 is_stmt 0 view .LVU1886
 7772 0000 38B5     		push	{r3, r4, r5, lr}
 7773              	.LCFI84:
 7774              		.cfi_def_cfa_offset 16
 7775              		.cfi_offset 3, -16
 7776              		.cfi_offset 4, -12
 7777              		.cfi_offset 5, -8
 7778              		.cfi_offset 14, -4
 7779 0002 1346     		mov	r3, r2
1438:mri/architectures/armv7-m/armv7-m.c ****     ExceptionStack* pExceptionStack = getExceptionStack(excReturn, psp, msp);
 7780              		.loc 1 1438 5 is_stmt 1 view .LVU1887
 7781              	.LVL631:
1439:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = pExceptionStack->xpsr & 0xFF;
 7782              		.loc 1 1439 5 view .LVU1888
1439:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = pExceptionStack->xpsr & 0xFF;
 7783              		.loc 1 1439 39 is_stmt 0 view .LVU1889
 7784 0004 0A46     		mov	r2, r1
 7785              	.LVL632:
1439:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = pExceptionStack->xpsr & 0xFF;
 7786              		.loc 1 1439 39 view .LVU1890
 7787 0006 0146     		mov	r1, r0
 7788              	.LVL633:
1439:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = pExceptionStack->xpsr & 0xFF;
 7789              		.loc 1 1439 39 view .LVU1891
 7790 0008 1846     		mov	r0, r3
 7791              	.LVL634:
1439:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = pExceptionStack->xpsr & 0xFF;
 7792              		.loc 1 1439 39 view .LVU1892
 7793 000a FFF7FEFF 		bl	getExceptionStack
 7794              	.LVL635:
1439:mri/architectures/armv7-m/armv7-m.c ****     uint32_t exceptionNumber = pExceptionStack->xpsr & 0xFF;
 7795              		.loc 1 1439 39 view .LVU1893
 7796 000e 0446     		mov	r4, r0
 7797              	.LVL636:
1440:mri/architectures/armv7-m/armv7-m.c ****     if (isDebuggerAlreadyActive() && exceptionNumber == debugMonExceptionNumber)
 7798              		.loc 1 1440 5 is_stmt 1 view .LVU1894
1440:mri/architectures/armv7-m/armv7-m.c ****     if (isDebuggerAlreadyActive() && exceptionNumber == debugMonExceptionNumber)
 7799              		.loc 1 1440 14 is_stmt 0 view .LVU1895
 7800 0010 057F     		ldrb	r5, [r0, #28]	@ zero_extendqisi2
 7801              	.LVL637:
1441:mri/architectures/armv7-m/armv7-m.c ****     {
 7802              		.loc 1 1441 5 is_stmt 1 view .LVU1896
1441:mri/architectures/armv7-m/armv7-m.c ****     {
 7803              		.loc 1 1441 9 is_stmt 0 view .LVU1897
 7804 0012 FFF7FEFF 		bl	isDebuggerAlreadyActive
 7805              	.LVL638:
1441:mri/architectures/armv7-m/armv7-m.c ****     {
 7806              		.loc 1 1441 8 view .LVU1898
 7807 0016 08B1     		cbz	r0, .L661
1441:mri/architectures/armv7-m/armv7-m.c ****     {
 7808              		.loc 1 1441 35 discriminator 1 view .LVU1899
 7809 0018 0C2D     		cmp	r5, #12
ARM GAS  /tmp/ccXppZcm.s 			page 254


 7810 001a 17D0     		beq	.L666
 7811              	.L661:
1458:mri/architectures/armv7-m/armv7-m.c ****     {
 7812              		.loc 1 1458 5 is_stmt 1 view .LVU1900
1458:mri/architectures/armv7-m/armv7-m.c ****     {
 7813              		.loc 1 1458 9 is_stmt 0 view .LVU1901
 7814 001c 2846     		mov	r0, r5
 7815 001e FFF7FEFF 		bl	isExceptionPriorityLowEnoughToDebug
 7816              	.LVL639:
1458:mri/architectures/armv7-m/armv7-m.c ****     {
 7817              		.loc 1 1458 8 view .LVU1902
 7818 0022 00B3     		cbz	r0, .L664
1464:mri/architectures/armv7-m/armv7-m.c ****         disableInterruptMaskingIfNecessary();
 7819              		.loc 1 1464 9 is_stmt 1 view .LVU1903
 7820              	.LBB379:
 7821              	.LBI379:
 682:mri/architectures/armv7-m/debug_cm3.h **** }
 683:mri/architectures/armv7-m/debug_cm3.h **** 
 684:mri/architectures/armv7-m/debug_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 685:mri/architectures/armv7-m/debug_cm3.h **** 
 686:mri/architectures/armv7-m/debug_cm3.h **** /* Memory Protection Unit Type Register Bits. */
 687:mri/architectures/armv7-m/debug_cm3.h **** /* Number of instruction regions supported by MPU.  0 for Cortex-M3 */
 688:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_TYPE_IREGION_SHIFT      16
 689:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_TYPE_IREGION_MASK       (0xFF << MPU_TYPE_IREGION_SHIFT)
 690:mri/architectures/armv7-m/debug_cm3.h **** /* Number of data regions supported by MPU. */
 691:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_TYPE_DREGION_SHIFT      8
 692:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_TYPE_DREGION_MASK       (0xFF << MPU_TYPE_DREGION_SHIFT)
 693:mri/architectures/armv7-m/debug_cm3.h **** /* Are instruction and data regions configured separately?  1 for yes and 0 otherwise. */
 694:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_TYPE_SEPARATE           0x1
 695:mri/architectures/armv7-m/debug_cm3.h **** 
 696:mri/architectures/armv7-m/debug_cm3.h **** /* Memory Protection Unit Control Register Bits. */
 697:mri/architectures/armv7-m/debug_cm3.h **** /* Default memory map as background region for privileged access. 1 enables. */
 698:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_CTRL_PRIVDEFENA         (1 << 2)
 699:mri/architectures/armv7-m/debug_cm3.h **** /* Hard fault and NMI exceptions to use MPU. 0 disables MPU for these handlers. */
 700:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_CTRL_HFNMIENA           (1 << 1)
 701:mri/architectures/armv7-m/debug_cm3.h **** /* MPU Enable.  1 enables and disabled otherwise. */
 702:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_CTRL_ENABLE             1
 703:mri/architectures/armv7-m/debug_cm3.h **** 
 704:mri/architectures/armv7-m/debug_cm3.h **** /* Memory Protection Unit Region Region Number Register Bits. */
 705:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RNR_REGION_MASK         0xFF
 706:mri/architectures/armv7-m/debug_cm3.h **** 
 707:mri/architectures/armv7-m/debug_cm3.h **** /* Memory Protection Unit Region Base Address Register Bits. */
 708:mri/architectures/armv7-m/debug_cm3.h **** /* Base address of this region. */
 709:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RBAR_ADDR_SHIFT         5
 710:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RBAR_ADDR_MASK          (0x7FFFFFF << MPU_RBAR_ADDR_SHIFT)
 711:mri/architectures/armv7-m/debug_cm3.h **** /* Are the region bits in this register valid or should RNR be used instead. */
 712:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RBAR_VALID              (1 << 4)
 713:mri/architectures/armv7-m/debug_cm3.h **** /* The region number.  Only used when MPU_RBAR_VALID is one. */
 714:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RBAR_REGION_MASK        0xF
 715:mri/architectures/armv7-m/debug_cm3.h **** 
 716:mri/architectures/armv7-m/debug_cm3.h **** /* Memory Protection Unit Region Attribute and Size Register Bits. */
 717:mri/architectures/armv7-m/debug_cm3.h **** /* eXecute Never bit.  1 means code can't execute from this region. */
 718:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_XN                 (1 << 28)
 719:mri/architectures/armv7-m/debug_cm3.h **** /* Access permission bits. */
 720:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_AP_SHIFT           24
 721:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_AP_MASK            (0x7 << MPU_RASR_AP_SHIFT)
 722:mri/architectures/armv7-m/debug_cm3.h **** /* TEX, C, and B bits together determine memory type. */
ARM GAS  /tmp/ccXppZcm.s 			page 255


 723:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_TEX_SHIFT          19
 724:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_TEX_MASK           (0x7 << MPU_RASR_TEX_SHIFT)
 725:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_S                  (1 << 18)
 726:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_C                  (1 << 17)
 727:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_B                  (1 << 16)
 728:mri/architectures/armv7-m/debug_cm3.h **** /* Sub-region disable bits. */
 729:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_SRD_SHIFT          8
 730:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_SRD_MASK           (0xff << MPU_RASR_SRD_SHIFT)
 731:mri/architectures/armv7-m/debug_cm3.h **** /* Region size in 2^(value + 1) */
 732:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_SIZE_SHIFT         1
 733:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_SIZE_MASK          (0x1F << MPU_RASR_SIZE_SHIFT)
 734:mri/architectures/armv7-m/debug_cm3.h **** /* Region enable.  1 enables. */
 735:mri/architectures/armv7-m/debug_cm3.h **** #define MPU_RASR_ENABLE             1
 736:mri/architectures/armv7-m/debug_cm3.h **** 
 737:mri/architectures/armv7-m/debug_cm3.h **** 
 738:mri/architectures/armv7-m/debug_cm3.h **** /* MPU - Memory Protection Unit Routines. */
 739:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getMPUDataRegionCount(void)
 740:mri/architectures/armv7-m/debug_cm3.h **** {
 741:mri/architectures/armv7-m/debug_cm3.h ****     return (MPU->TYPE & MPU_TYPE_DREGION_MASK) >> MPU_TYPE_DREGION_SHIFT;
 742:mri/architectures/armv7-m/debug_cm3.h **** }
 743:mri/architectures/armv7-m/debug_cm3.h **** 
 744:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getHighestMPUDataRegionIndex(void)
 745:mri/architectures/armv7-m/debug_cm3.h **** {
 746:mri/architectures/armv7-m/debug_cm3.h ****     return getMPUDataRegionCount() - 1;
 747:mri/architectures/armv7-m/debug_cm3.h **** }
 748:mri/architectures/armv7-m/debug_cm3.h **** 
 749:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isMPURegionNumberValid(uint32_t regionNumber)
 750:mri/architectures/armv7-m/debug_cm3.h **** {
 751:mri/architectures/armv7-m/debug_cm3.h ****     return regionNumber < getMPUDataRegionCount();
 752:mri/architectures/armv7-m/debug_cm3.h **** }
 753:mri/architectures/armv7-m/debug_cm3.h **** 
 754:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int isMPUNotPresent(void)
 755:mri/architectures/armv7-m/debug_cm3.h **** {
 756:mri/architectures/armv7-m/debug_cm3.h ****     return getMPUDataRegionCount() == 0;
 757:mri/architectures/armv7-m/debug_cm3.h **** }
 758:mri/architectures/armv7-m/debug_cm3.h **** 
 759:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getMPUControlValue(void)
 760:mri/architectures/armv7-m/debug_cm3.h **** {
 761:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 762:mri/architectures/armv7-m/debug_cm3.h ****         return ~0U;
 763:mri/architectures/armv7-m/debug_cm3.h **** 
 764:mri/architectures/armv7-m/debug_cm3.h ****     return (MPU->CTRL);
 765:mri/architectures/armv7-m/debug_cm3.h **** 
 766:mri/architectures/armv7-m/debug_cm3.h **** }
 767:mri/architectures/armv7-m/debug_cm3.h **** 
 768:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void setMPUControlValue(uint32_t newControlValue)
 769:mri/architectures/armv7-m/debug_cm3.h **** {
 770:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 771:mri/architectures/armv7-m/debug_cm3.h ****         return;
 772:mri/architectures/armv7-m/debug_cm3.h **** 
 773:mri/architectures/armv7-m/debug_cm3.h ****     MPU->CTRL = newControlValue;
 774:mri/architectures/armv7-m/debug_cm3.h ****     __DSB();
 775:mri/architectures/armv7-m/debug_cm3.h ****     __ISB();
 776:mri/architectures/armv7-m/debug_cm3.h **** }
 777:mri/architectures/armv7-m/debug_cm3.h **** 
 778:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void disableMPU(void)
 779:mri/architectures/armv7-m/debug_cm3.h **** {
ARM GAS  /tmp/ccXppZcm.s 			page 256


 780:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 781:mri/architectures/armv7-m/debug_cm3.h ****         return;
 782:mri/architectures/armv7-m/debug_cm3.h **** 
 783:mri/architectures/armv7-m/debug_cm3.h ****     MPU->CTRL &= ~MPU_CTRL_ENABLE;
 784:mri/architectures/armv7-m/debug_cm3.h ****     __DSB();
 785:mri/architectures/armv7-m/debug_cm3.h ****     __ISB();
 786:mri/architectures/armv7-m/debug_cm3.h **** }
 787:mri/architectures/armv7-m/debug_cm3.h **** 
 788:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void enableMPU(void)
 789:mri/architectures/armv7-m/debug_cm3.h **** {
 790:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 791:mri/architectures/armv7-m/debug_cm3.h ****         return;
 792:mri/architectures/armv7-m/debug_cm3.h **** 
 793:mri/architectures/armv7-m/debug_cm3.h ****     MPU->CTRL |= MPU_CTRL_ENABLE;
 794:mri/architectures/armv7-m/debug_cm3.h ****     __DSB();
 795:mri/architectures/armv7-m/debug_cm3.h ****     __ISB();
 796:mri/architectures/armv7-m/debug_cm3.h **** }
 797:mri/architectures/armv7-m/debug_cm3.h **** 
 798:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void enableMPUWithHardAndNMIFaults(void)
 799:mri/architectures/armv7-m/debug_cm3.h **** {
 800:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 801:mri/architectures/armv7-m/debug_cm3.h ****         return;
 802:mri/architectures/armv7-m/debug_cm3.h **** 
 803:mri/architectures/armv7-m/debug_cm3.h ****     MPU->CTRL |= MPU_CTRL_ENABLE | MPU_CTRL_HFNMIENA;
 804:mri/architectures/armv7-m/debug_cm3.h ****     __DSB();
 805:mri/architectures/armv7-m/debug_cm3.h ****     __ISB();
 806:mri/architectures/armv7-m/debug_cm3.h **** }
 807:mri/architectures/armv7-m/debug_cm3.h **** 
 808:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE int prepareToAccessMPURegion(uint32_t regionNumber)
 809:mri/architectures/armv7-m/debug_cm3.h **** {
 810:mri/architectures/armv7-m/debug_cm3.h ****     if (!isMPURegionNumberValid(regionNumber))
 811:mri/architectures/armv7-m/debug_cm3.h ****         return 0;
 812:mri/architectures/armv7-m/debug_cm3.h **** 
 813:mri/architectures/armv7-m/debug_cm3.h ****     MPU->RNR = regionNumber;
 814:mri/architectures/armv7-m/debug_cm3.h ****     return 1;
 815:mri/architectures/armv7-m/debug_cm3.h **** }
 816:mri/architectures/armv7-m/debug_cm3.h **** 
 817:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getCurrentMPURegionNumber(void)
 818:mri/architectures/armv7-m/debug_cm3.h **** {
 819:mri/architectures/armv7-m/debug_cm3.h ****     return MPU->RNR;
 820:mri/architectures/armv7-m/debug_cm3.h **** }
 821:mri/architectures/armv7-m/debug_cm3.h **** 
 822:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void setMPURegionAddress(uint32_t address)
 823:mri/architectures/armv7-m/debug_cm3.h **** {
 824:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 825:mri/architectures/armv7-m/debug_cm3.h ****         return;
 826:mri/architectures/armv7-m/debug_cm3.h **** 
 827:mri/architectures/armv7-m/debug_cm3.h ****     MPU->RBAR = address & MPU_RBAR_ADDR_MASK;
 828:mri/architectures/armv7-m/debug_cm3.h **** }
 829:mri/architectures/armv7-m/debug_cm3.h **** 
 830:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getMPURegionAddress(void)
 831:mri/architectures/armv7-m/debug_cm3.h **** {
 832:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 833:mri/architectures/armv7-m/debug_cm3.h ****         return 0;
 834:mri/architectures/armv7-m/debug_cm3.h **** 
 835:mri/architectures/armv7-m/debug_cm3.h ****     return MPU->RBAR & MPU_RBAR_ADDR_MASK;
 836:mri/architectures/armv7-m/debug_cm3.h **** }
ARM GAS  /tmp/ccXppZcm.s 			page 257


 837:mri/architectures/armv7-m/debug_cm3.h **** 
 838:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE void setMPURegionAttributeAndSize(uint32_t attributeAndSize)
 839:mri/architectures/armv7-m/debug_cm3.h **** {
 840:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 841:mri/architectures/armv7-m/debug_cm3.h ****         return;
 842:mri/architectures/armv7-m/debug_cm3.h **** 
 843:mri/architectures/armv7-m/debug_cm3.h ****     MPU->RASR = attributeAndSize;
 844:mri/architectures/armv7-m/debug_cm3.h **** }
 845:mri/architectures/armv7-m/debug_cm3.h **** 
 846:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getMPURegionAttributeAndSize(void)
 847:mri/architectures/armv7-m/debug_cm3.h **** {
 848:mri/architectures/armv7-m/debug_cm3.h ****     if (isMPUNotPresent())
 849:mri/architectures/armv7-m/debug_cm3.h ****         return 0;
 850:mri/architectures/armv7-m/debug_cm3.h **** 
 851:mri/architectures/armv7-m/debug_cm3.h ****     return MPU->RASR;
 852:mri/architectures/armv7-m/debug_cm3.h **** }
 853:mri/architectures/armv7-m/debug_cm3.h **** 
 854:mri/architectures/armv7-m/debug_cm3.h **** #endif
 855:mri/architectures/armv7-m/debug_cm3.h **** 
 856:mri/architectures/armv7-m/debug_cm3.h **** static __INLINE uint32_t getCurrentlyExecutingExceptionNumber(void)
 7822              		.loc 4 856 26 view .LVU1904
 7823              	.LBB380:
 857:mri/architectures/armv7-m/debug_cm3.h **** {
 858:mri/architectures/armv7-m/debug_cm3.h ****     return (__get_IPSR() & 0xFF);
 7824              		.loc 4 858 5 view .LVU1905
 7825              	.LBB381:
 7826              	.LBI381:
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 7827              		.loc 3 205 31 view .LVU1906
 7828              	.LBB382:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 7829              		.loc 3 207 3 view .LVU1907
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 7830              		.loc 3 209 3 view .LVU1908
 7831              		.syntax unified
 7832              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7833 0024 EFF30580 		MRS r0, ipsr
 7834              	@ 0 "" 2
 7835              	.LVL640:
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7836              		.loc 3 210 3 view .LVU1909
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7837              		.loc 3 210 3 is_stmt 0 view .LVU1910
 7838              		.thumb
 7839              		.syntax unified
 7840              	.LBE382:
 7841              	.LBE381:
 7842              	.LBE380:
 7843              	.LBE379:
1464:mri/architectures/armv7-m/armv7-m.c ****         disableInterruptMaskingIfNecessary();
 7844              		.loc 1 1464 9 view .LVU1911
 7845 0028 C0B2     		uxtb	r0, r0
 7846 002a FFF7FEFF 		bl	recordAndClearFaultStatusBits
 7847              	.LVL641:
1465:mri/architectures/armv7-m/armv7-m.c ****         treatDebugEventHardFaultAsDebugMonInterrupt();
 7848              		.loc 1 1465 9 is_stmt 1 view .LVU1912
 7849 002e FFF7FEFF 		bl	disableInterruptMaskingIfNecessary
ARM GAS  /tmp/ccXppZcm.s 			page 258


 7850              	.LVL642:
1466:mri/architectures/armv7-m/armv7-m.c ****         setPendedFromFaultBit();
 7851              		.loc 1 1466 9 view .LVU1913
 7852 0032 FFF7FEFF 		bl	treatDebugEventHardFaultAsDebugMonInterrupt
 7853              	.LVL643:
1467:mri/architectures/armv7-m/armv7-m.c ****         setMonitorPending();
 7854              		.loc 1 1467 9 view .LVU1914
 7855 0036 FFF7FEFF 		bl	setPendedFromFaultBit
 7856              	.LVL644:
1468:mri/architectures/armv7-m/armv7-m.c ****         return 0;
 7857              		.loc 1 1468 9 view .LVU1915
 7858              	.LBB383:
 7859              	.LBI383:
 124:mri/architectures/armv7-m/debug_cm3.h **** {
 7860              		.loc 4 124 22 view .LVU1916
 7861              	.LBB384:
 126:mri/architectures/armv7-m/debug_cm3.h **** }
 7862              		.loc 4 126 5 view .LVU1917
 126:mri/architectures/armv7-m/debug_cm3.h **** }
 7863              		.loc 4 126 14 is_stmt 0 view .LVU1918
 7864 003a 0C4A     		ldr	r2, .L668
 7865 003c D2F8FC30 		ldr	r3, [r2, #252]
 126:mri/architectures/armv7-m/debug_cm3.h **** }
 7866              		.loc 4 126 22 view .LVU1919
 7867 0040 43F40033 		orr	r3, r3, #131072
 7868 0044 C2F8FC30 		str	r3, [r2, #252]
 7869              	.LBE384:
 7870              	.LBE383:
1469:mri/architectures/armv7-m/armv7-m.c ****     }
 7871              		.loc 1 1469 9 is_stmt 1 view .LVU1920
1469:mri/architectures/armv7-m/armv7-m.c ****     }
 7872              		.loc 1 1469 16 is_stmt 0 view .LVU1921
 7873 0048 0020     		movs	r0, #0
 7874              	.L660:
1480:mri/architectures/armv7-m/armv7-m.c **** 
 7875              		.loc 1 1480 1 view .LVU1922
 7876 004a 38BD     		pop	{r3, r4, r5, pc}
 7877              	.LVL645:
 7878              	.L666:
1449:mri/architectures/armv7-m/armv7-m.c ****         if (!isImpreciseBusFaultRaw())
 7879              		.loc 1 1449 9 is_stmt 1 view .LVU1923
 7880 004c FFF7FEFF 		bl	setFaultDetectedFlag
 7881              	.LVL646:
1450:mri/architectures/armv7-m/armv7-m.c ****         {
 7882              		.loc 1 1450 9 view .LVU1924
1450:mri/architectures/armv7-m/armv7-m.c ****         {
 7883              		.loc 1 1450 14 is_stmt 0 view .LVU1925
 7884 0050 FFF7FEFF 		bl	isImpreciseBusFaultRaw
 7885              	.LVL647:
1450:mri/architectures/armv7-m/armv7-m.c ****         {
 7886              		.loc 1 1450 12 view .LVU1926
 7887 0054 18B1     		cbz	r0, .L667
 7888              	.L662:
1454:mri/architectures/armv7-m/armv7-m.c ****         return 0;
 7889              		.loc 1 1454 9 is_stmt 1 view .LVU1927
 7890 0056 FFF7FEFF 		bl	clearFaultStatusBits
 7891              	.LVL648:
ARM GAS  /tmp/ccXppZcm.s 			page 259


1455:mri/architectures/armv7-m/armv7-m.c ****     }
 7892              		.loc 1 1455 9 view .LVU1928
1455:mri/architectures/armv7-m/armv7-m.c ****     }
 7893              		.loc 1 1455 16 is_stmt 0 view .LVU1929
 7894 005a 0020     		movs	r0, #0
 7895 005c F5E7     		b	.L660
 7896              	.L667:
1452:mri/architectures/armv7-m/armv7-m.c ****         }
 7897              		.loc 1 1452 13 is_stmt 1 view .LVU1930
 7898 005e 2046     		mov	r0, r4
 7899 0060 FFF7FEFF 		bl	advancePCToNextInstruction
 7900              	.LVL649:
 7901 0064 F7E7     		b	.L662
 7902              	.L664:
1478:mri/architectures/armv7-m/armv7-m.c ****     }
 7903              		.loc 1 1478 16 is_stmt 0 view .LVU1931
 7904 0066 4FF0FF30 		mov	r0, #-1
 7905 006a EEE7     		b	.L660
 7906              	.L669:
 7907              		.align	2
 7908              	.L668:
 7909 006c 00ED00E0 		.word	-536810240
 7910              		.cfi_endproc
 7911              	.LFE311:
 7913              		.section	.text.mriPlatform_HandleFaultFromHighPriorityCode,"ax",%progbits
 7914              		.align	1
 7915              		.weak	mriPlatform_HandleFaultFromHighPriorityCode
 7916              		.syntax unified
 7917              		.thumb
 7918              		.thumb_func
 7920              	mriPlatform_HandleFaultFromHighPriorityCode:
 7921              	.LFB324:
1624:mri/architectures/armv7-m/armv7-m.c ****     /* This weak implemention does nothing and just returns to allow a jump directly to mriExceptio
 7922              		.loc 1 1624 1 is_stmt 1 view -0
 7923              		.cfi_startproc
 7924              		@ args = 0, pretend = 0, frame = 0
 7925              		@ frame_needed = 0, uses_anonymous_args = 0
 7926              		@ link register save eliminated.
1629:mri/architectures/armv7-m/armv7-m.c **** 
 7927              		.loc 1 1629 1 view .LVU1933
 7928 0000 7047     		bx	lr
 7929              		.cfi_endproc
 7930              	.LFE324:
 7932              		.section	.text.mriCortexMExceptionHandler,"ax",%progbits
 7933              		.align	1
 7934              		.global	mriCortexMExceptionHandler
 7935              		.syntax unified
 7936              		.thumb
 7937              		.thumb_func
 7939              	mriCortexMExceptionHandler:
 7940              	.LVL650:
 7941              	.LFB325:
1639:mri/architectures/armv7-m/armv7-m.c ****     uint32_t excReturn = pIntegerRegs->excReturn;
 7942              		.loc 1 1639 1 view -0
 7943              		.cfi_startproc
 7944              		@ args = 0, pretend = 0, frame = 0
 7945              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccXppZcm.s 			page 260


1639:mri/architectures/armv7-m/armv7-m.c ****     uint32_t excReturn = pIntegerRegs->excReturn;
 7946              		.loc 1 1639 1 is_stmt 0 view .LVU1935
 7947 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 7948              	.LCFI85:
 7949              		.cfi_def_cfa_offset 32
 7950              		.cfi_offset 3, -32
 7951              		.cfi_offset 4, -28
 7952              		.cfi_offset 5, -24
 7953              		.cfi_offset 6, -20
 7954              		.cfi_offset 7, -16
 7955              		.cfi_offset 8, -12
 7956              		.cfi_offset 9, -8
 7957              		.cfi_offset 14, -4
 7958 0004 0446     		mov	r4, r0
 7959 0006 0F46     		mov	r7, r1
1640:mri/architectures/armv7-m/armv7-m.c ****     uint32_t msp = pIntegerRegs->msp;
 7960              		.loc 1 1640 5 is_stmt 1 view .LVU1936
 7961              	.LVL651:
1641:mri/architectures/armv7-m/armv7-m.c ****     uint32_t psp = pIntegerRegs->psp;
 7962              		.loc 1 1641 5 view .LVU1937
1641:mri/architectures/armv7-m/armv7-m.c ****     uint32_t psp = pIntegerRegs->psp;
 7963              		.loc 1 1641 14 is_stmt 0 view .LVU1938
 7964 0008 0668     		ldr	r6, [r0]
 7965              	.LVL652:
1642:mri/architectures/armv7-m/armv7-m.c ****     ExceptionStack* pExceptionStack = getExceptionStack(excReturn, psp, msp);
 7966              		.loc 1 1642 5 is_stmt 1 view .LVU1939
1642:mri/architectures/armv7-m/armv7-m.c ****     ExceptionStack* pExceptionStack = getExceptionStack(excReturn, psp, msp);
 7967              		.loc 1 1642 14 is_stmt 0 view .LVU1940
 7968 000a D0F80480 		ldr	r8, [r0, #4]
 7969              	.LVL653:
1643:mri/architectures/armv7-m/armv7-m.c ****     int needToFakeFloatRegs = 0;
 7970              		.loc 1 1643 5 is_stmt 1 view .LVU1941
1643:mri/architectures/armv7-m/armv7-m.c ****     int needToFakeFloatRegs = 0;
 7971              		.loc 1 1643 39 is_stmt 0 view .LVU1942
 7972 000e 3246     		mov	r2, r6
 7973 0010 4146     		mov	r1, r8
 7974              	.LVL654:
1643:mri/architectures/armv7-m/armv7-m.c ****     int needToFakeFloatRegs = 0;
 7975              		.loc 1 1643 39 view .LVU1943
 7976 0012 806B     		ldr	r0, [r0, #56]
 7977              	.LVL655:
1643:mri/architectures/armv7-m/armv7-m.c ****     int needToFakeFloatRegs = 0;
 7978              		.loc 1 1643 39 view .LVU1944
 7979 0014 FFF7FEFF 		bl	getExceptionStack
 7980              	.LVL656:
1643:mri/architectures/armv7-m/armv7-m.c ****     int needToFakeFloatRegs = 0;
 7981              		.loc 1 1643 39 view .LVU1945
 7982 0018 0546     		mov	r5, r0
 7983              	.LVL657:
1644:mri/architectures/armv7-m/armv7-m.c **** 
 7984              		.loc 1 1644 5 is_stmt 1 view .LVU1946
1648:mri/architectures/armv7-m/armv7-m.c ****     {
 7985              		.loc 1 1648 5 view .LVU1947
1648:mri/architectures/armv7-m/armv7-m.c ****     {
 7986              		.loc 1 1648 10 is_stmt 0 view .LVU1948
 7987 001a FFF7FEFF 		bl	wasPendedFromFault
 7988              	.LVL658:
ARM GAS  /tmp/ccXppZcm.s 			page 261


1648:mri/architectures/armv7-m/armv7-m.c ****     {
 7989              		.loc 1 1648 8 view .LVU1949
 7990 001e 68B9     		cbnz	r0, .L672
 7991              	.LBB385:
1650:mri/architectures/armv7-m/armv7-m.c ****         if (isExternalInterrupt(exceptionNumber) && !Platform_CommHasReceiveData())
 7992              		.loc 1 1650 9 is_stmt 1 view .LVU1950
 7993              	.LBB386:
 7994              	.LBI386:
 856:mri/architectures/armv7-m/debug_cm3.h **** {
 7995              		.loc 4 856 26 view .LVU1951
 7996              	.LBB387:
 7997              		.loc 4 858 5 view .LVU1952
 7998              	.LBB388:
 7999              	.LBI388:
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 8000              		.loc 3 205 31 view .LVU1953
 8001              	.LBB389:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 8002              		.loc 3 207 3 view .LVU1954
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 8003              		.loc 3 209 3 view .LVU1955
 8004              		.syntax unified
 8005              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8006 0020 EFF30589 		MRS r9, ipsr
 8007              	@ 0 "" 2
 8008              	.LVL659:
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8009              		.loc 3 210 3 view .LVU1956
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8010              		.loc 3 210 3 is_stmt 0 view .LVU1957
 8011              		.thumb
 8012              		.syntax unified
 8013              	.LBE389:
 8014              	.LBE388:
 8015              		.loc 4 858 26 view .LVU1958
 8016 0024 5FFA89F9 		uxtb	r9, r9
 8017              	.LVL660:
 8018              		.loc 4 858 26 view .LVU1959
 8019              	.LBE387:
 8020              	.LBE386:
1651:mri/architectures/armv7-m/armv7-m.c ****         {
 8021              		.loc 1 1651 9 is_stmt 1 view .LVU1960
1651:mri/architectures/armv7-m/armv7-m.c ****         {
 8022              		.loc 1 1651 13 is_stmt 0 view .LVU1961
 8023 0028 4846     		mov	r0, r9
 8024 002a FFF7FEFF 		bl	isExternalInterrupt
 8025              	.LVL661:
1651:mri/architectures/armv7-m/armv7-m.c ****         {
 8026              		.loc 1 1651 12 view .LVU1962
 8027 002e 10B1     		cbz	r0, .L673
1651:mri/architectures/armv7-m/armv7-m.c ****         {
 8028              		.loc 1 1651 54 discriminator 1 view .LVU1963
 8029 0030 FFF7FEFF 		bl	mriPlatform_CommHasReceiveData
 8030              	.LVL662:
1651:mri/architectures/armv7-m/armv7-m.c ****         {
 8031              		.loc 1 1651 50 discriminator 1 view .LVU1964
 8032 0034 68B3     		cbz	r0, .L671
ARM GAS  /tmp/ccXppZcm.s 			page 262


 8033              	.L673:
1657:mri/architectures/armv7-m/armv7-m.c ****     }
 8034              		.loc 1 1657 9 is_stmt 1 view .LVU1965
 8035 0036 4846     		mov	r0, r9
 8036 0038 FFF7FEFF 		bl	recordAndClearFaultStatusBits
 8037              	.LVL663:
 8038              	.L672:
1657:mri/architectures/armv7-m/armv7-m.c ****     }
 8039              		.loc 1 1657 9 is_stmt 0 view .LVU1966
 8040              	.LBE385:
1660:mri/architectures/armv7-m/armv7-m.c ****     if (encounteredStackingException())
 8041              		.loc 1 1660 5 is_stmt 1 view .LVU1967
1660:mri/architectures/armv7-m/armv7-m.c ****     if (encounteredStackingException())
 8042              		.loc 1 1660 28 is_stmt 0 view .LVU1968
 8043 003c 284B     		ldr	r3, .L688
 8044 003e 1D61     		str	r5, [r3, #16]
1661:mri/architectures/armv7-m/armv7-m.c ****         pExceptionStack = (ExceptionStack*)g_fakeStack;
 8045              		.loc 1 1661 5 is_stmt 1 view .LVU1969
1661:mri/architectures/armv7-m/armv7-m.c ****         pExceptionStack = (ExceptionStack*)g_fakeStack;
 8046              		.loc 1 1661 9 is_stmt 0 view .LVU1970
 8047 0040 FFF7FEFF 		bl	encounteredStackingException
 8048              	.LVL664:
1661:mri/architectures/armv7-m/armv7-m.c ****         pExceptionStack = (ExceptionStack*)g_fakeStack;
 8049              		.loc 1 1661 8 view .LVU1971
 8050 0044 00B1     		cbz	r0, .L675
1662:mri/architectures/armv7-m/armv7-m.c **** 
 8051              		.loc 1 1662 25 view .LVU1972
 8052 0046 274D     		ldr	r5, .L688+4
 8053              	.LVL665:
 8054              	.L675:
1665:mri/architectures/armv7-m/armv7-m.c **** 
 8055              		.loc 1 1665 5 is_stmt 1 view .LVU1973
1665:mri/architectures/armv7-m/armv7-m.c **** 
 8056              		.loc 1 1665 27 is_stmt 0 view .LVU1974
 8057 0048 3A46     		mov	r2, r7
 8058 004a 2146     		mov	r1, r4
 8059 004c 2846     		mov	r0, r5
 8060 004e FFF7FEFF 		bl	prepareThreadContext
 8061              	.LVL666:
1668:mri/architectures/armv7-m/armv7-m.c ****     int isExceptionStackMSP = msp == (uint32_t)pExceptionStack;
 8062              		.loc 1 1668 5 is_stmt 1 view .LVU1975
1668:mri/architectures/armv7-m/armv7-m.c ****     int isExceptionStackMSP = msp == (uint32_t)pExceptionStack;
 8063              		.loc 1 1668 50 is_stmt 0 view .LVU1976
 8064 0052 234B     		ldr	r3, .L688
 8065 0054 5C69     		ldr	r4, [r3, #20]
 8066              	.LVL667:
1668:mri/architectures/armv7-m/armv7-m.c ****     int isExceptionStackMSP = msp == (uint32_t)pExceptionStack;
 8067              		.loc 1 1668 71 view .LVU1977
 8068 0056 D3F81090 		ldr	r9, [r3, #16]
1668:mri/architectures/armv7-m/armv7-m.c ****     int isExceptionStackMSP = msp == (uint32_t)pExceptionStack;
 8069              		.loc 1 1668 14 view .LVU1978
 8070 005a A4EB0907 		sub	r7, r4, r9
 8071              	.LVL668:
1669:mri/architectures/armv7-m/armv7-m.c ****     int isExceptionStackPSP = psp == (uint32_t)pExceptionStack;
 8072              		.loc 1 1669 5 is_stmt 1 view .LVU1979
1670:mri/architectures/armv7-m/armv7-m.c ****     uint32_t origSP = mriCortexMState.sp;
 8073              		.loc 1 1670 5 view .LVU1980
ARM GAS  /tmp/ccXppZcm.s 			page 263


1671:mri/architectures/armv7-m/armv7-m.c **** 
 8074              		.loc 1 1671 5 view .LVU1981
1673:mri/architectures/armv7-m/armv7-m.c ****         allocateFakeFloatRegAndCallMriDebugException();
 8075              		.loc 1 1673 5 view .LVU1982
1673:mri/architectures/armv7-m/armv7-m.c ****         allocateFakeFloatRegAndCallMriDebugException();
 8076              		.loc 1 1673 8 is_stmt 0 view .LVU1983
 8077 005e D0B1     		cbz	r0, .L676
1674:mri/architectures/armv7-m/armv7-m.c ****     else
 8078              		.loc 1 1674 9 is_stmt 1 view .LVU1984
 8079 0060 FFF7FEFF 		bl	allocateFakeFloatRegAndCallMriDebugException
 8080              	.LVL669:
 8081              	.L677:
1679:mri/architectures/armv7-m/armv7-m.c ****     {
 8082              		.loc 1 1679 5 view .LVU1985
1679:mri/architectures/armv7-m/armv7-m.c ****     {
 8083              		.loc 1 1679 24 is_stmt 0 view .LVU1986
 8084 0064 1E4B     		ldr	r3, .L688
 8085 0066 5B69     		ldr	r3, [r3, #20]
1679:mri/architectures/armv7-m/armv7-m.c ****     {
 8086              		.loc 1 1679 8 view .LVU1987
 8087 0068 9C42     		cmp	r4, r3
 8088 006a 03D0     		beq	.L678
1681:mri/architectures/armv7-m/armv7-m.c ****         {
 8089              		.loc 1 1681 9 is_stmt 1 view .LVU1988
1681:mri/architectures/armv7-m/armv7-m.c ****         {
 8090              		.loc 1 1681 12 is_stmt 0 view .LVU1989
 8091 006c B542     		cmp	r5, r6
 8092 006e 16D0     		beq	.L684
 8093              	.L679:
1685:mri/architectures/armv7-m/armv7-m.c ****         {
 8094              		.loc 1 1685 9 is_stmt 1 view .LVU1990
1685:mri/architectures/armv7-m/armv7-m.c ****         {
 8095              		.loc 1 1685 12 is_stmt 0 view .LVU1991
 8096 0070 4545     		cmp	r5, r8
 8097 0072 1CD0     		beq	.L685
 8098              	.L678:
1691:mri/architectures/armv7-m/armv7-m.c ****     uint32_t newPSP = Context_Get(&mriCortexMState.context, PSP);
 8099              		.loc 1 1691 5 is_stmt 1 view .LVU1992
1691:mri/architectures/armv7-m/armv7-m.c ****     uint32_t newPSP = Context_Get(&mriCortexMState.context, PSP);
 8100              		.loc 1 1691 23 is_stmt 0 view .LVU1993
 8101 0074 DFF86890 		ldr	r9, .L688
 8102 0078 1121     		movs	r1, #17
 8103 007a 4846     		mov	r0, r9
 8104 007c FFF7FEFF 		bl	mriContext_Get
 8105              	.LVL670:
 8106 0080 0446     		mov	r4, r0
 8107              	.LVL671:
1692:mri/architectures/armv7-m/armv7-m.c ****     uint32_t oldSP = 0x00000000;
 8108              		.loc 1 1692 5 is_stmt 1 view .LVU1994
1692:mri/architectures/armv7-m/armv7-m.c ****     uint32_t oldSP = 0x00000000;
 8109              		.loc 1 1692 23 is_stmt 0 view .LVU1995
 8110 0082 1221     		movs	r1, #18
 8111 0084 4846     		mov	r0, r9
 8112              	.LVL672:
1692:mri/architectures/armv7-m/armv7-m.c ****     uint32_t oldSP = 0x00000000;
 8113              		.loc 1 1692 23 view .LVU1996
 8114 0086 FFF7FEFF 		bl	mriContext_Get
ARM GAS  /tmp/ccXppZcm.s 			page 264


 8115              	.LVL673:
1693:mri/architectures/armv7-m/armv7-m.c ****     uint32_t newSP = 0x00000000;
 8116              		.loc 1 1693 5 is_stmt 1 view .LVU1997
1694:mri/architectures/armv7-m/armv7-m.c ****     if (isExceptionStackMSP && msp != newMSP)
 8117              		.loc 1 1694 5 view .LVU1998
1695:mri/architectures/armv7-m/armv7-m.c ****     {
 8118              		.loc 1 1695 5 view .LVU1999
1695:mri/architectures/armv7-m/armv7-m.c ****     {
 8119              		.loc 1 1695 8 is_stmt 0 view .LVU2000
 8120 008a B542     		cmp	r5, r6
 8121 008c 18D0     		beq	.L686
 8122              	.L680:
1700:mri/architectures/armv7-m/armv7-m.c ****     {
 8123              		.loc 1 1700 10 is_stmt 1 view .LVU2001
1700:mri/architectures/armv7-m/armv7-m.c ****     {
 8124              		.loc 1 1700 13 is_stmt 0 view .LVU2002
 8125 008e 4545     		cmp	r5, r8
 8126 0090 20D0     		beq	.L687
 8127              	.LVL674:
 8128              	.L671:
1709:mri/architectures/armv7-m/armv7-m.c **** 
 8129              		.loc 1 1709 1 view .LVU2003
 8130 0092 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 8131              	.LVL675:
 8132              	.L676:
1676:mri/architectures/armv7-m/armv7-m.c **** 
 8133              		.loc 1 1676 9 is_stmt 1 view .LVU2004
 8134 0096 1248     		ldr	r0, .L688
 8135              	.LVL676:
1676:mri/architectures/armv7-m/armv7-m.c **** 
 8136              		.loc 1 1676 9 is_stmt 0 view .LVU2005
 8137 0098 FFF7FEFF 		bl	mriDebugException
 8138              	.LVL677:
 8139 009c E2E7     		b	.L677
 8140              	.L684:
1683:mri/architectures/armv7-m/armv7-m.c ****         }
 8141              		.loc 1 1683 13 is_stmt 1 view .LVU2006
 8142 009e A9EB0402 		sub	r2, r9, r4
 8143 00a2 1A44     		add	r2, r2, r3
 8144 00a4 1121     		movs	r1, #17
 8145 00a6 0E48     		ldr	r0, .L688
 8146 00a8 FFF7FEFF 		bl	mriContext_Set
 8147              	.LVL678:
 8148 00ac E0E7     		b	.L679
 8149              	.L685:
1687:mri/architectures/armv7-m/armv7-m.c ****         }
 8150              		.loc 1 1687 13 view .LVU2007
1687:mri/architectures/armv7-m/armv7-m.c ****         }
 8151              		.loc 1 1687 71 is_stmt 0 view .LVU2008
 8152 00ae 0C48     		ldr	r0, .L688
 8153 00b0 4269     		ldr	r2, [r0, #20]
1687:mri/architectures/armv7-m/armv7-m.c ****         }
 8154              		.loc 1 1687 13 view .LVU2009
 8155 00b2 A9EB0409 		sub	r9, r9, r4
 8156 00b6 4A44     		add	r2, r2, r9
 8157 00b8 1221     		movs	r1, #18
 8158 00ba FFF7FEFF 		bl	mriContext_Set
ARM GAS  /tmp/ccXppZcm.s 			page 265


 8159              	.LVL679:
 8160 00be D9E7     		b	.L678
 8161              	.LVL680:
 8162              	.L686:
1695:mri/architectures/armv7-m/armv7-m.c ****     {
 8163              		.loc 1 1695 29 discriminator 1 view .LVU2010
 8164 00c0 A642     		cmp	r6, r4
 8165 00c2 E4D0     		beq	.L680
 8166              	.LVL681:
 8167              	.L681:
1705:mri/architectures/armv7-m/armv7-m.c ****     {
 8168              		.loc 1 1705 5 is_stmt 1 view .LVU2011
1705:mri/architectures/armv7-m/armv7-m.c ****     {
 8169              		.loc 1 1705 8 is_stmt 0 view .LVU2012
 8170 00c4 A642     		cmp	r6, r4
 8171 00c6 E4D0     		beq	.L671
1707:mri/architectures/armv7-m/armv7-m.c ****     }
 8172              		.loc 1 1707 9 is_stmt 1 view .LVU2013
 8173 00c8 3A46     		mov	r2, r7
 8174 00ca 3146     		mov	r1, r6
 8175 00cc 2046     		mov	r0, r4
 8176              	.LVL682:
1707:mri/architectures/armv7-m/armv7-m.c ****     }
 8177              		.loc 1 1707 9 is_stmt 0 view .LVU2014
 8178 00ce FFF7FEFF 		bl	mri_memmove
 8179              	.LVL683:
1707:mri/architectures/armv7-m/armv7-m.c ****     }
 8180              		.loc 1 1707 9 view .LVU2015
 8181 00d2 DEE7     		b	.L671
 8182              	.LVL684:
 8183              	.L687:
1700:mri/architectures/armv7-m/armv7-m.c ****     {
 8184              		.loc 1 1700 34 discriminator 1 view .LVU2016
 8185 00d4 8045     		cmp	r8, r0
 8186 00d6 DCD0     		beq	.L671
1703:mri/architectures/armv7-m/armv7-m.c ****     }
 8187              		.loc 1 1703 15 view .LVU2017
 8188 00d8 0446     		mov	r4, r0
 8189              	.LVL685:
1702:mri/architectures/armv7-m/armv7-m.c ****         newSP = newPSP;
 8190              		.loc 1 1702 15 view .LVU2018
 8191 00da 4646     		mov	r6, r8
 8192              	.LVL686:
1702:mri/architectures/armv7-m/armv7-m.c ****         newSP = newPSP;
 8193              		.loc 1 1702 15 view .LVU2019
 8194 00dc F2E7     		b	.L681
 8195              	.L689:
 8196 00de 00BF     		.align	2
 8197              	.L688:
 8198 00e0 00000000 		.word	mriCortexMState
 8199 00e4 00000000 		.word	g_fakeStack
 8200              		.cfi_endproc
 8201              	.LFE325:
 8203              		.section	.rodata.debugEventToSignalMap.0,"a"
 8204              		.align	2
 8207              	debugEventToSignalMap.0:
 8208 0000 10000000 		.word	16
ARM GAS  /tmp/ccXppZcm.s 			page 266


 8209 0004 11       		.byte	17
 8210 0005 000000   		.space	3
 8211 0008 04000000 		.word	4
 8212 000c 05       		.byte	5
 8213 000d 000000   		.space	3
 8214 0010 02000000 		.word	2
 8215 0014 05       		.byte	5
 8216 0015 000000   		.space	3
 8217 0018 01000000 		.word	1
 8218 001c 05       		.byte	5
 8219 001d 000000   		.space	3
 8220              		.section	.bss.g_contextEntries,"aw",%nobits
 8221              		.align	2
 8224              	g_contextEntries:
 8225 0000 00000000 		.space	72
 8225      00000000 
 8225      00000000 
 8225      00000000 
 8225      00000000 
 8226              		.section	.rodata.g_targetXml,"a"
 8227              		.align	2
 8230              	g_targetXml:
 8231 0000 3C3F786D 		.ascii	"<?xml version=\"1.0\"?>\012<!DOCTYPE feature SYSTEM"
 8231      6C207665 
 8231      7273696F 
 8231      6E3D2231 
 8231      2E30223F 
 8232 002e 20226764 		.ascii	" \"gdb-target.dtd\">\012<target>\012<feature name=\""
 8232      622D7461 
 8232      72676574 
 8232      2E647464 
 8232      223E0A3C 
 8233 0059 6F72672E 		.ascii	"org.gnu.gdb.arm.m-profile\">\012<reg name=\"r0\" bi"
 8233      676E752E 
 8233      6764622E 
 8233      61726D2E 
 8233      6D2D7072 
 8234 0086 7473697A 		.ascii	"tsize=\"32\"/>\012<reg name=\"r1\" bitsize=\"32\"/>"
 8234      653D2233 
 8234      32222F3E 
 8234      0A3C7265 
 8234      67206E61 
 8235 00b0 0A3C7265 		.ascii	"\012<reg name=\"r2\" bitsize=\"32\"/>\012<reg name="
 8235      67206E61 
 8235      6D653D22 
 8235      72322220 
 8235      62697473 
 8236 00d9 22723322 		.ascii	"\"r3\" bitsize=\"32\"/>\012<reg name=\"r4\" bitsize"
 8236      20626974 
 8236      73697A65 
 8236      3D223332 
 8236      222F3E0A 
 8237 0103 3D223332 		.ascii	"=\"32\"/>\012<reg name=\"r5\" bitsize=\"32\"/>\012<"
 8237      222F3E0A 
 8237      3C726567 
 8237      206E616D 
 8237      653D2272 
ARM GAS  /tmp/ccXppZcm.s 			page 267


 8238 012a 72656720 		.ascii	"reg name=\"r6\" bitsize=\"32\"/>\012<reg name=\"r7\""
 8238      6E616D65 
 8238      3D227236 
 8238      22206269 
 8238      7473697A 
 8239 0155 20626974 		.ascii	" bitsize=\"32\"/>\012<reg name=\"r8\" bitsize=\"32\""
 8239      73697A65 
 8239      3D223332 
 8239      222F3E0A 
 8239      3C726567 
 8240 0180 2F3E0A3C 		.ascii	"/>\012<reg name=\"r9\" bitsize=\"32\"/>\012<reg nam"
 8240      72656720 
 8240      6E616D65 
 8240      3D227239 
 8240      22206269 
 8241 01a9 653D2272 		.ascii	"e=\"r10\" bitsize=\"32\"/>\012<reg name=\"r11\" bit"
 8241      31302220 
 8241      62697473 
 8241      697A653D 
 8241      22333222 
 8242 01d3 73697A65 		.ascii	"size=\"32\"/>\012<reg name=\"r12\" bitsize=\"32\"/>"
 8242      3D223332 
 8242      222F3E0A 
 8242      3C726567 
 8242      206E616D 
 8243 01fd 0A3C7265 		.ascii	"\012<reg name=\"sp\" bitsize=\"32\" type=\"data_ptr"
 8243      67206E61 
 8243      6D653D22 
 8243      73702220 
 8243      62697473 
 8244 0228 222F3E0A 		.ascii	"\"/>\012<reg name=\"lr\" bitsize=\"32\" type=\"code"
 8244      3C726567 
 8244      206E616D 
 8244      653D226C 
 8244      72222062 
 8245 0252 5F707472 		.ascii	"_ptr\"/>\012<reg name=\"pc\" bitsize=\"32\" type=\""
 8245      222F3E0A 
 8245      3C726567 
 8245      206E616D 
 8245      653D2270 
 8246 027c 636F6465 		.ascii	"code_ptr\"/>\012<reg name=\"xpsr\" bitsize=\"32\" r"
 8246      5F707472 
 8246      222F3E0A 
 8246      3C726567 
 8246      206E616D 
 8247 02a7 65676E75 		.ascii	"egnum=\"25\"/>\012</feature>\012<feature name=\"org"
 8247      6D3D2232 
 8247      35222F3E 
 8247      0A3C2F66 
 8247      65617475 
 8248 02d1 2E676E75 		.ascii	".gnu.gdb.arm.m-system\">\012<reg name=\"msp\" bitsi"
 8248      2E676462 
 8248      2E61726D 
 8248      2E6D2D73 
 8248      79737465 
 8249 02fe 7A653D22 		.ascii	"ze=\"32\" regnum=\"26\"/>\012<reg name=\"psp\" bits"
 8249      33322220 
ARM GAS  /tmp/ccXppZcm.s 			page 268


 8249      7265676E 
 8249      756D3D22 
 8249      3236222F 
 8250 0328 697A653D 		.ascii	"ize=\"32\" regnum=\"27\"/>\012<reg name=\"primask\""
 8250      22333222 
 8250      20726567 
 8250      6E756D3D 
 8250      22323722 
 8251 0352 20626974 		.ascii	" bitsize=\"32\" regnum=\"28\"/>\012<reg name=\"base"
 8251      73697A65 
 8251      3D223332 
 8251      22207265 
 8251      676E756D 
 8252 037d 70726922 		.ascii	"pri\" bitsize=\"32\" regnum=\"29\"/>\012<reg name=\""
 8252      20626974 
 8252      73697A65 
 8252      3D223332 
 8252      22207265 
 8253 03a8 6661756C 		.ascii	"faultmask\" bitsize=\"32\" regnum=\"30\"/>\012<reg "
 8253      746D6173 
 8253      6B222062 
 8253      69747369 
 8253      7A653D22 
 8254 03d3 6E616D65 		.ascii	"name=\"control\" bitsize=\"32\" regnum=\"31\"/>\012"
 8254      3D22636F 
 8254      6E74726F 
 8254      6C222062 
 8254      69747369 
 8255 03fd 3C2F6665 		.ascii	"</feature>\012<feature name=\"org.gnu.gdb.arm.vfp\""
 8255      61747572 
 8255      653E0A3C 
 8255      66656174 
 8255      75726520 
 8256 042b 3E0A3C72 		.ascii	">\012<reg name=\"d0\" bitsize=\"64\" type=\"ieee_do"
 8256      6567206E 
 8256      616D653D 
 8256      22643022 
 8256      20626974 
 8257 0456 75626C65 		.ascii	"uble\"/>\012<reg name=\"d1\" bitsize=\"64\" type=\""
 8257      222F3E0A 
 8257      3C726567 
 8257      206E616D 
 8257      653D2264 
 8258 0480 69656565 		.ascii	"ieee_double\"/>\012<reg name=\"d2\" bitsize=\"64\" "
 8258      5F646F75 
 8258      626C6522 
 8258      2F3E0A3C 
 8258      72656720 
 8259 04ab 74797065 		.ascii	"type=\"ieee_double\"/>\012<reg name=\"d3\" bitsize="
 8259      3D226965 
 8259      65655F64 
 8259      6F75626C 
 8259      65222F3E 
 8260 04d7 22363422 		.ascii	"\"64\" type=\"ieee_double\"/>\012<reg name=\"d4\" b"
 8260      20747970 
 8260      653D2269 
 8260      6565655F 
ARM GAS  /tmp/ccXppZcm.s 			page 269


 8260      646F7562 
 8261 0501 69747369 		.ascii	"itsize=\"64\" type=\"ieee_double\"/>\012<reg name=\""
 8261      7A653D22 
 8261      36342220 
 8261      74797065 
 8261      3D226965 
 8262 052d 64352220 		.ascii	"d5\" bitsize=\"64\" type=\"ieee_double\"/>\012<reg "
 8262      62697473 
 8262      697A653D 
 8262      22363422 
 8262      20747970 
 8263 0558 6E616D65 		.ascii	"name=\"d6\" bitsize=\"64\" type=\"ieee_double\"/>\012"
 8263      3D226436 
 8263      22206269 
 8263      7473697A 
 8263      653D2236 
 8264 0584 3C726567 		.ascii	"<reg name=\"d7\" bitsize=\"64\" type=\"ieee_double\""
 8264      206E616D 
 8264      653D2264 
 8264      37222062 
 8264      69747369 
 8265 05b2 2F3E0A3C 		.ascii	"/>\012<reg name=\"d8\" bitsize=\"64\" type=\"ieee_d"
 8265      72656720 
 8265      6E616D65 
 8265      3D226438 
 8265      22206269 
 8266 05dd 6F75626C 		.ascii	"ouble\"/>\012<reg name=\"d9\" bitsize=\"64\" type=\""
 8266      65222F3E 
 8266      0A3C7265 
 8266      67206E61 
 8266      6D653D22 
 8267 0608 69656565 		.ascii	"ieee_double\"/>\012<reg name=\"d10\" bitsize=\"64\""
 8267      5F646F75 
 8267      626C6522 
 8267      2F3E0A3C 
 8267      72656720 
 8268 0633 20747970 		.ascii	" type=\"ieee_double\"/>\012<reg name=\"d11\" bitsiz"
 8268      653D2269 
 8268      6565655F 
 8268      646F7562 
 8268      6C65222F 
 8269 065f 653D2236 		.ascii	"e=\"64\" type=\"ieee_double\"/>\012<reg name=\"d12\""
 8269      34222074 
 8269      7970653D 
 8269      22696565 
 8269      655F646F 
 8270 068a 20626974 		.ascii	" bitsize=\"64\" type=\"ieee_double\"/>\012<reg name"
 8270      73697A65 
 8270      3D223634 
 8270      22207479 
 8270      70653D22 
 8271 06b6 3D226431 		.ascii	"=\"d13\" bitsize=\"64\" type=\"ieee_double\"/>\012<"
 8271      33222062 
 8271      69747369 
 8271      7A653D22 
 8271      36342220 
 8272 06e0 72656720 		.ascii	"reg name=\"d14\" bitsize=\"64\" type=\"ieee_double\""
ARM GAS  /tmp/ccXppZcm.s 			page 270


 8272      6E616D65 
 8272      3D226431 
 8272      34222062 
 8272      69747369 
 8273 070e 2F3E0A3C 		.ascii	"/>\012<reg name=\"d15\" bitsize=\"64\" type=\"ieee_"
 8273      72656720 
 8273      6E616D65 
 8273      3D226431 
 8273      35222062 
 8274 0739 646F7562 		.ascii	"double\"/>\012<reg name=\"fpscr\" bitsize=\"32\" ty"
 8274      6C65222F 
 8274      3E0A3C72 
 8274      6567206E 
 8274      616D653D 
 8275 0764 70653D22 		.ascii	"pe=\"int\" group=\"float\"/>\012</feature>\012</tar"
 8275      696E7422 
 8275      2067726F 
 8275      75703D22 
 8275      666C6F61 
 8276 078d 6765743E 		.ascii	"get>\012\000"
 8276      0A00
 8277              		.global	mriCortexMState
 8278              		.section	.bss.mriCortexMState,"aw",%nobits
 8279              		.align	2
 8282              	mriCortexMState:
 8283 0000 00000000 		.space	524
 8283      00000000 
 8283      00000000 
 8283      00000000 
 8283      00000000 
 8284              		.global	mriCortexMFlags
 8285              		.section	.bss.mriCortexMFlags,"aw",%nobits
 8286              		.align	2
 8289              	mriCortexMFlags:
 8290 0000 00000000 		.space	4
 8291              		.global	mriCortexMDebuggerStack
 8292              		.section	.bss.mriCortexMDebuggerStack,"aw",%nobits
 8293              		.align	3
 8296              	mriCortexMDebuggerStack:
 8297 0000 00000000 		.space	904
 8297      00000000 
 8297      00000000 
 8297      00000000 
 8297      00000000 
 8298              		.section	.rodata.g_fakeStack,"a"
 8299              		.align	2
 8302              	g_fakeStack:
 8303 0000 ADDEADDE 		.word	-559030611
 8304 0004 ADDEADDE 		.word	-559030611
 8305 0008 ADDEADDE 		.word	-559030611
 8306 000c ADDEADDE 		.word	-559030611
 8307 0010 ADDEADDE 		.word	-559030611
 8308 0014 ADDEADDE 		.word	-559030611
 8309 0018 ADDEADDE 		.word	-559030611
 8310 001c ADDEADDE 		.word	-559030611
 8311 0020 ADDEADDE 		.word	-559030611
 8312 0024 ADDEADDE 		.word	-559030611
ARM GAS  /tmp/ccXppZcm.s 			page 271


 8313 0028 ADDEADDE 		.word	-559030611
 8314 002c ADDEADDE 		.word	-559030611
 8315 0030 ADDEADDE 		.word	-559030611
 8316 0034 ADDEADDE 		.word	-559030611
 8317 0038 ADDEADDE 		.word	-559030611
 8318 003c ADDEADDE 		.word	-559030611
 8319 0040 ADDEADDE 		.word	-559030611
 8320 0044 ADDEADDE 		.word	-559030611
 8321 0048 ADDEADDE 		.word	-559030611
 8322 004c ADDEADDE 		.word	-559030611
 8323 0050 ADDEADDE 		.word	-559030611
 8324 0054 ADDEADDE 		.word	-559030611
 8325 0058 ADDEADDE 		.word	-559030611
 8326 005c ADDEADDE 		.word	-559030611
 8327 0060 ADDEADDE 		.word	-559030611
 8328 0064 ADDEADDE 		.word	-559030611
 8329              		.text
 8330              	.Letext0:
 8331              		.file 6 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 8332              		.file 7 "/usr/arm-none-eabi/include/machine/_default_types.h"
 8333              		.file 8 "/usr/arm-none-eabi/include/sys/_stdint.h"
 8334              		.file 9 "mri/core/buffer.h"
 8335              		.file 10 "mri/core/context.h"
 8336              		.file 11 "mri/core/token.h"
 8337              		.file 12 "mri/core/platforms.h"
 8338              		.file 13 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xc.h"
 8339              		.file 14 "mri/architectures/armv7-m/armv7-m.h"
 8340              		.file 15 "mri/core/core.h"
 8341              		.file 16 "mri/core/gdb_console.h"
 8342              		.file 17 "mri/core/libc.h"
ARM GAS  /tmp/ccXppZcm.s 			page 272


DEFINED SYMBOLS
                            *ABS*:0000000000000000 armv7-m.c
     /tmp/ccXppZcm.s:21     .text.__NVIC_SystemReset:0000000000000000 $t
     /tmp/ccXppZcm.s:26     .text.__NVIC_SystemReset:0000000000000000 __NVIC_SystemReset
     /tmp/ccXppZcm.s:89     .text.__NVIC_SystemReset:000000000000001c $d
     /tmp/ccXppZcm.s:95     .text.clearDWTComparators:0000000000000000 $t
     /tmp/ccXppZcm.s:100    .text.clearDWTComparators:0000000000000000 clearDWTComparators
     /tmp/ccXppZcm.s:175    .text.clearDWTComparators:0000000000000028 $d
     /tmp/ccXppZcm.s:180    .text.doesDWTComparatorMatch:0000000000000000 $t
     /tmp/ccXppZcm.s:185    .text.doesDWTComparatorMatch:0000000000000000 doesDWTComparatorMatch
     /tmp/ccXppZcm.s:322    .text.doesDWTComparatorMatch:0000000000000038 $d
     /tmp/ccXppZcm.s:327    .text.findDWTComparator:0000000000000000 $t
     /tmp/ccXppZcm.s:332    .text.findDWTComparator:0000000000000000 findDWTComparator
     /tmp/ccXppZcm.s:418    .text.findDWTComparator:0000000000000038 $d
     /tmp/ccXppZcm.s:424    .text.findFreeDWTComparator:0000000000000000 $t
     /tmp/ccXppZcm.s:429    .text.findFreeDWTComparator:0000000000000000 findFreeDWTComparator
     /tmp/ccXppZcm.s:502    .text.findFreeDWTComparator:0000000000000024 $d
     /tmp/ccXppZcm.s:508    .text.enableDWTWatchpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:513    .text.enableDWTWatchpoint:0000000000000000 enableDWTWatchpoint
     /tmp/ccXppZcm.s:620    .text.disableDWTWatchpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:625    .text.disableDWTWatchpoint:0000000000000000 disableDWTWatchpoint
     /tmp/ccXppZcm.s:684    .text.isBreakpointAddressInvalid:0000000000000000 $t
     /tmp/ccXppZcm.s:689    .text.isBreakpointAddressInvalid:0000000000000000 isBreakpointAddressInvalid
     /tmp/ccXppZcm.s:760    .text.isBreakpointAddressInvalid:0000000000000028 $d
     /tmp/ccXppZcm.s:765    .text.calculateFPBComparatorValue:0000000000000000 $t
     /tmp/ccXppZcm.s:770    .text.calculateFPBComparatorValue:0000000000000000 calculateFPBComparatorValue
     /tmp/ccXppZcm.s:910    .text.calculateFPBComparatorValue:000000000000004c $d
     /tmp/ccXppZcm.s:915    .text.isFPBComparatorEnabled:0000000000000000 $t
     /tmp/ccXppZcm.s:920    .text.isFPBComparatorEnabled:0000000000000000 isFPBComparatorEnabled
     /tmp/ccXppZcm.s:1002   .text.isFPBComparatorEnabled:0000000000000028 $d
     /tmp/ccXppZcm.s:1009   .text.findFPBBreakpointComparator:0000000000000000 $t
     /tmp/ccXppZcm.s:1014   .text.findFPBBreakpointComparator:0000000000000000 findFPBBreakpointComparator
     /tmp/ccXppZcm.s:1142   .text.findFPBBreakpointComparator:0000000000000048 $d
     /tmp/ccXppZcm.s:1148   .text.findFreeFPBBreakpointComparator:0000000000000000 $t
     /tmp/ccXppZcm.s:1153   .text.findFreeFPBBreakpointComparator:0000000000000000 findFreeFPBBreakpointComparator
     /tmp/ccXppZcm.s:1235   .text.findFreeFPBBreakpointComparator:0000000000000034 $d
     /tmp/ccXppZcm.s:1241   .text.enableFPBBreakpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:1246   .text.enableFPBBreakpoint:0000000000000000 enableFPBBreakpoint
     /tmp/ccXppZcm.s:1308   .text.disableFPBBreakpointComparator:0000000000000000 $t
     /tmp/ccXppZcm.s:1313   .text.disableFPBBreakpointComparator:0000000000000000 disableFPBBreakpointComparator
     /tmp/ccXppZcm.s:1356   .text.clearFPBComparators:0000000000000000 $t
     /tmp/ccXppZcm.s:1361   .text.clearFPBComparators:0000000000000000 clearFPBComparators
     /tmp/ccXppZcm.s:1453   .text.clearFPBComparators:000000000000002c $d
     /tmp/ccXppZcm.s:1459   .text.fillDebuggerStack:0000000000000000 $t
     /tmp/ccXppZcm.s:1464   .text.fillDebuggerStack:0000000000000000 fillDebuggerStack
     /tmp/ccXppZcm.s:1500   .text.fillDebuggerStack:0000000000000020 $d
     /tmp/ccXppZcm.s:8296   .bss.mriCortexMDebuggerStack:0000000000000000 mriCortexMDebuggerStack
     /tmp/ccXppZcm.s:1507   .text.configureDWTandFPB:0000000000000000 $t
     /tmp/ccXppZcm.s:1512   .text.configureDWTandFPB:0000000000000000 configureDWTandFPB
     /tmp/ccXppZcm.s:1576   .text.configureDWTandFPB:0000000000000024 $d
     /tmp/ccXppZcm.s:1582   .text.disableDebuggerStack:0000000000000000 $t
     /tmp/ccXppZcm.s:1587   .text.disableDebuggerStack:0000000000000000 disableDebuggerStack
     /tmp/ccXppZcm.s:1605   .text.disableDebuggerStack:000000000000000c $d
     /tmp/ccXppZcm.s:8289   .bss.mriCortexMFlags:0000000000000000 mriCortexMFlags
     /tmp/ccXppZcm.s:1610   .text.shouldRestorePriorityRegs:0000000000000000 $t
     /tmp/ccXppZcm.s:1615   .text.shouldRestorePriorityRegs:0000000000000000 shouldRestorePriorityRegs
     /tmp/ccXppZcm.s:1632   .text.shouldRestorePriorityRegs:000000000000000c $d
ARM GAS  /tmp/ccXppZcm.s 			page 273


     /tmp/ccXppZcm.s:1637   .text.clearPriorityRestoreFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:1642   .text.clearPriorityRestoreFlag:0000000000000000 clearPriorityRestoreFlag
     /tmp/ccXppZcm.s:1660   .text.clearPriorityRestoreFlag:000000000000000c $d
     /tmp/ccXppZcm.s:1665   .text.shouldRemoveHardwareBreakpointOnSvcHandler:0000000000000000 $t
     /tmp/ccXppZcm.s:1670   .text.shouldRemoveHardwareBreakpointOnSvcHandler:0000000000000000 shouldRemoveHardwareBreakpointOnSvcHandler
     /tmp/ccXppZcm.s:1687   .text.shouldRemoveHardwareBreakpointOnSvcHandler:000000000000000c $d
     /tmp/ccXppZcm.s:1692   .text.clearSvcStepFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:1697   .text.clearSvcStepFlag:0000000000000000 clearSvcStepFlag
     /tmp/ccXppZcm.s:1715   .text.clearSvcStepFlag:000000000000000c $d
     /tmp/ccXppZcm.s:1720   .text.getNvicVector:0000000000000000 $t
     /tmp/ccXppZcm.s:1725   .text.getNvicVector:0000000000000000 getNvicVector
     /tmp/ccXppZcm.s:1750   .text.getNvicVector:000000000000000c $d
     /tmp/ccXppZcm.s:1755   .text.clearSingleSteppingFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:1760   .text.clearSingleSteppingFlag:0000000000000000 clearSingleSteppingFlag
     /tmp/ccXppZcm.s:1778   .text.clearSingleSteppingFlag:000000000000000c $d
     /tmp/ccXppZcm.s:1783   .text.setSvcStepFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:1788   .text.setSvcStepFlag:0000000000000000 setSvcStepFlag
     /tmp/ccXppZcm.s:1806   .text.setSvcStepFlag:000000000000000c $d
     /tmp/ccXppZcm.s:1811   .text.setSingleSteppingFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:1816   .text.setSingleSteppingFlag:0000000000000000 setSingleSteppingFlag
     /tmp/ccXppZcm.s:1834   .text.setSingleSteppingFlag:000000000000000c $d
     /tmp/ccXppZcm.s:1839   .text.isInstructionMSR:0000000000000000 $t
     /tmp/ccXppZcm.s:1844   .text.isInstructionMSR:0000000000000000 isInstructionMSR
     /tmp/ccXppZcm.s:1881   .text.isInstructionCPS:0000000000000000 $t
     /tmp/ccXppZcm.s:1886   .text.isInstructionCPS:0000000000000000 isInstructionCPS
     /tmp/ccXppZcm.s:1911   .text.isInstructionMRS:0000000000000000 $t
     /tmp/ccXppZcm.s:1916   .text.isInstructionMRS:0000000000000000 isInstructionMRS
     /tmp/ccXppZcm.s:1957   .text.setRestorePriorityRegsFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:1962   .text.setRestorePriorityRegsFlag:0000000000000000 setRestorePriorityRegsFlag
     /tmp/ccXppZcm.s:1980   .text.setRestorePriorityRegsFlag:000000000000000c $d
     /tmp/ccXppZcm.s:1985   .text.calculateBasePriorityForThisCPU:0000000000000000 $t
     /tmp/ccXppZcm.s:1990   .text.calculateBasePriorityForThisCPU:0000000000000000 calculateBasePriorityForThisCPU
     /tmp/ccXppZcm.s:2011   .text.calculateBasePriorityForThisCPU:000000000000000c $d
     /tmp/ccXppZcm.s:8282   .bss.mriCortexMState:0000000000000000 mriCortexMState
     /tmp/ccXppZcm.s:2016   .text.getReasonFromMatchComparator:0000000000000000 $t
     /tmp/ccXppZcm.s:2021   .text.getReasonFromMatchComparator:0000000000000000 getReasonFromMatchComparator
     /tmp/ccXppZcm.s:2081   .text.findMatchedWatchpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:2086   .text.findMatchedWatchpoint:0000000000000000 findMatchedWatchpoint
     /tmp/ccXppZcm.s:2169   .text.findMatchedWatchpoint:0000000000000034 $d
     /tmp/ccXppZcm.s:2175   .text.hasControlCBeenDetected:0000000000000000 $t
     /tmp/ccXppZcm.s:2180   .text.hasControlCBeenDetected:0000000000000000 hasControlCBeenDetected
     /tmp/ccXppZcm.s:2197   .text.hasControlCBeenDetected:000000000000000c $d
     /tmp/ccXppZcm.s:2202   .text.determineCauseOfDebugEvent:0000000000000000 $t
     /tmp/ccXppZcm.s:2207   .text.determineCauseOfDebugEvent:0000000000000000 determineCauseOfDebugEvent
     /tmp/ccXppZcm.s:2259   .text.determineCauseOfDebugEvent:0000000000000028 $d
     /tmp/ccXppZcm.s:8207   .rodata.debugEventToSignalMap.0:0000000000000000 debugEventToSignalMap.0
     /tmp/ccXppZcm.s:2265   .text.clearMemoryFaultFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:2270   .text.clearMemoryFaultFlag:0000000000000000 clearMemoryFaultFlag
     /tmp/ccXppZcm.s:2288   .text.clearMemoryFaultFlag:000000000000000c $d
     /tmp/ccXppZcm.s:2293   .text.isExternalInterrupt:0000000000000000 $t
     /tmp/ccXppZcm.s:2298   .text.isExternalInterrupt:0000000000000000 isExternalInterrupt
     /tmp/ccXppZcm.s:2319   .text.setControlCFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:2324   .text.setControlCFlag:0000000000000000 setControlCFlag
     /tmp/ccXppZcm.s:2342   .text.setControlCFlag:000000000000000c $d
     /tmp/ccXppZcm.s:2347   .text.setActiveDebugFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:2352   .text.setActiveDebugFlag:0000000000000000 setActiveDebugFlag
     /tmp/ccXppZcm.s:2370   .text.setActiveDebugFlag:000000000000000c $d
ARM GAS  /tmp/ccXppZcm.s 			page 274


     /tmp/ccXppZcm.s:2375   .text.clearControlCFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:2380   .text.clearControlCFlag:0000000000000000 clearControlCFlag
     /tmp/ccXppZcm.s:2398   .text.clearControlCFlag:000000000000000c $d
     /tmp/ccXppZcm.s:2403   .text.clearActiveDebugFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:2408   .text.clearActiveDebugFlag:0000000000000000 clearActiveDebugFlag
     /tmp/ccXppZcm.s:2426   .text.clearActiveDebugFlag:000000000000000c $d
     /tmp/ccXppZcm.s:2431   .text.clearPendedFromFaultFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:2436   .text.clearPendedFromFaultFlag:0000000000000000 clearPendedFromFaultFlag
     /tmp/ccXppZcm.s:2454   .text.clearPendedFromFaultFlag:000000000000000c $d
     /tmp/ccXppZcm.s:2459   .text.checkStack:0000000000000000 $t
     /tmp/ccXppZcm.s:2464   .text.checkStack:0000000000000000 checkStack
     /tmp/ccXppZcm.s:2528   .text.checkStack:0000000000000028 $d
     /tmp/ccXppZcm.s:2536   .text.isInstruction32Bit:0000000000000000 $t
     /tmp/ccXppZcm.s:2541   .text.isInstruction32Bit:0000000000000000 isInstruction32Bit
     /tmp/ccXppZcm.s:2593   .text.isInstructionMbedSemihostBreakpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:2598   .text.isInstructionMbedSemihostBreakpoint:0000000000000000 isInstructionMbedSemihostBreakpoint
     /tmp/ccXppZcm.s:2621   .text.isInstructionNewlibSemihostBreakpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:2626   .text.isInstructionNewlibSemihostBreakpoint:0000000000000000 isInstructionNewlibSemihostBreakpoint
     /tmp/ccXppZcm.s:2653   .text.isInstructionHardcodedBreakpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:2658   .text.isInstructionHardcodedBreakpoint:0000000000000000 isInstructionHardcodedBreakpoint
     /tmp/ccXppZcm.s:2680   .text.doesKindIndicate32BitInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:2685   .text.doesKindIndicate32BitInstruction:0000000000000000 doesKindIndicate32BitInstruction
     /tmp/ccXppZcm.s:2741   .text.doesKindIndicate32BitInstruction:0000000000000028 $d
     /tmp/ccXppZcm.s:2746   .text.convertWatchpointTypeToCortexMType:0000000000000000 $t
     /tmp/ccXppZcm.s:2751   .text.convertWatchpointTypeToCortexMType:0000000000000000 convertWatchpointTypeToCortexMType
     /tmp/ccXppZcm.s:2795   .text.setFaultDetectedFlag:0000000000000000 $t
     /tmp/ccXppZcm.s:2800   .text.setFaultDetectedFlag:0000000000000000 setFaultDetectedFlag
     /tmp/ccXppZcm.s:2818   .text.setFaultDetectedFlag:000000000000000c $d
     /tmp/ccXppZcm.s:2823   .text.isDebuggerAlreadyActive:0000000000000000 $t
     /tmp/ccXppZcm.s:2828   .text.isDebuggerAlreadyActive:0000000000000000 isDebuggerAlreadyActive
     /tmp/ccXppZcm.s:2845   .text.isDebuggerAlreadyActive:000000000000000c $d
     /tmp/ccXppZcm.s:2850   .text.isImpreciseBusFaultRaw:0000000000000000 $t
     /tmp/ccXppZcm.s:2855   .text.isImpreciseBusFaultRaw:0000000000000000 isImpreciseBusFaultRaw
     /tmp/ccXppZcm.s:2872   .text.isImpreciseBusFaultRaw:000000000000000c $d
     /tmp/ccXppZcm.s:2877   .text.getExceptionStack:0000000000000000 $t
     /tmp/ccXppZcm.s:2882   .text.getExceptionStack:0000000000000000 getExceptionStack
     /tmp/ccXppZcm.s:2915   .text.advancePCToNextInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:2920   .text.advancePCToNextInstruction:0000000000000000 advancePCToNextInstruction
     /tmp/ccXppZcm.s:2970   .text.clearFaultStatusBits:0000000000000000 $t
     /tmp/ccXppZcm.s:2975   .text.clearFaultStatusBits:0000000000000000 clearFaultStatusBits
     /tmp/ccXppZcm.s:3003   .text.clearFaultStatusBits:0000000000000010 $d
     /tmp/ccXppZcm.s:3008   .text.recordAndClearFaultStatusBits:0000000000000000 $t
     /tmp/ccXppZcm.s:3013   .text.recordAndClearFaultStatusBits:0000000000000000 recordAndClearFaultStatusBits
     /tmp/ccXppZcm.s:3077   .text.recordAndClearFaultStatusBits:0000000000000028 $d
     /tmp/ccXppZcm.s:3083   .text.disableInterruptMaskingIfNecessary:0000000000000000 $t
     /tmp/ccXppZcm.s:3088   .text.disableInterruptMaskingIfNecessary:0000000000000000 disableInterruptMaskingIfNecessary
     /tmp/ccXppZcm.s:3176   .text.disableInterruptMaskingIfNecessary:0000000000000020 $d
     /tmp/ccXppZcm.s:3181   .text.treatDebugEventHardFaultAsDebugMonInterrupt:0000000000000000 $t
     /tmp/ccXppZcm.s:3186   .text.treatDebugEventHardFaultAsDebugMonInterrupt:0000000000000000 treatDebugEventHardFaultAsDebugMonInterrupt
     /tmp/ccXppZcm.s:3216   .text.treatDebugEventHardFaultAsDebugMonInterrupt:0000000000000014 $d
     /tmp/ccXppZcm.s:3221   .text.setPendedFromFaultBit:0000000000000000 $t
     /tmp/ccXppZcm.s:3226   .text.setPendedFromFaultBit:0000000000000000 setPendedFromFaultBit
     /tmp/ccXppZcm.s:3244   .text.setPendedFromFaultBit:000000000000000c $d
     /tmp/ccXppZcm.s:3249   .text.wasPendedFromFault:0000000000000000 $t
     /tmp/ccXppZcm.s:3254   .text.wasPendedFromFault:0000000000000000 wasPendedFromFault
     /tmp/ccXppZcm.s:3271   .text.wasPendedFromFault:000000000000000c $d
     /tmp/ccXppZcm.s:3276   .text.encounteredStackingException:0000000000000000 $t
ARM GAS  /tmp/ccXppZcm.s 			page 275


     /tmp/ccXppZcm.s:3281   .text.encounteredStackingException:0000000000000000 encounteredStackingException
     /tmp/ccXppZcm.s:3301   .text.encounteredStackingException:0000000000000014 $d
     /tmp/ccXppZcm.s:3306   .text.clearState:0000000000000000 $t
     /tmp/ccXppZcm.s:3311   .text.clearState:0000000000000000 clearState
     /tmp/ccXppZcm.s:3333   .text.clearState:0000000000000010 $d
     /tmp/ccXppZcm.s:3338   .text.determinePriorityBitShift:0000000000000000 $t
     /tmp/ccXppZcm.s:3343   .text.determinePriorityBitShift:0000000000000000 determinePriorityBitShift
     /tmp/ccXppZcm.s:3403   .text.determinePriorityBitShift:0000000000000030 $d
     /tmp/ccXppZcm.s:3409   .text.restorePriorityRegsIfNeeded:0000000000000000 $t
     /tmp/ccXppZcm.s:3414   .text.restorePriorityRegsIfNeeded:0000000000000000 restorePriorityRegsIfNeeded
     /tmp/ccXppZcm.s:3463   .text.restorePriorityRegsIfNeeded:000000000000002c $d
     /tmp/ccXppZcm.s:3468   .text.processInstructionCPS:0000000000000000 $t
     /tmp/ccXppZcm.s:3473   .text.processInstructionCPS:0000000000000000 processInstructionCPS
     /tmp/ccXppZcm.s:3517   .text.processInstructionCPS:000000000000001c $d
     /tmp/ccXppZcm.s:3522   .text.processInstructionMSR:0000000000000000 $t
     /tmp/ccXppZcm.s:3527   .text.processInstructionMSR:0000000000000000 processInstructionMSR
     /tmp/ccXppZcm.s:3657   .text.processInstructionMSR:0000000000000074 $d
     /tmp/ccXppZcm.s:3663   .text.processInstructionMRS:0000000000000000 $t
     /tmp/ccXppZcm.s:3668   .text.processInstructionMRS:0000000000000000 processInstructionMRS
     /tmp/ccXppZcm.s:3760   .text.processInstructionMRS:0000000000000050 $d
     /tmp/ccXppZcm.s:3765   .text.recordCurrentPriorityRegs:0000000000000000 $t
     /tmp/ccXppZcm.s:3770   .text.recordCurrentPriorityRegs:0000000000000000 recordCurrentPriorityRegs
     /tmp/ccXppZcm.s:3806   .text.recordCurrentPriorityRegs:0000000000000020 $d
     /tmp/ccXppZcm.s:3811   .rodata.displayMemFaultCauseToGdbConsole.str1.4:0000000000000000 $d
     /tmp/ccXppZcm.s:3836   .text.displayMemFaultCauseToGdbConsole:0000000000000000 $t
     /tmp/ccXppZcm.s:3841   .text.displayMemFaultCauseToGdbConsole:0000000000000000 displayMemFaultCauseToGdbConsole
     /tmp/ccXppZcm.s:3968   .text.displayMemFaultCauseToGdbConsole:000000000000008c $d
     /tmp/ccXppZcm.s:3981   .rodata.displayBusFaultCauseToGdbConsole.str1.4:0000000000000000 $d
     /tmp/ccXppZcm.s:3994   .text.displayBusFaultCauseToGdbConsole:0000000000000000 $t
     /tmp/ccXppZcm.s:3999   .text.displayBusFaultCauseToGdbConsole:0000000000000000 displayBusFaultCauseToGdbConsole
     /tmp/ccXppZcm.s:4142   .text.displayBusFaultCauseToGdbConsole:00000000000000a0 $d
     /tmp/ccXppZcm.s:4156   .rodata.displayUsageFaultCauseToGdbConsole.str1.4:0000000000000000 $d
     /tmp/ccXppZcm.s:4178   .text.displayUsageFaultCauseToGdbConsole:0000000000000000 $t
     /tmp/ccXppZcm.s:4183   .text.displayUsageFaultCauseToGdbConsole:0000000000000000 displayUsageFaultCauseToGdbConsole
     /tmp/ccXppZcm.s:4292   .text.displayUsageFaultCauseToGdbConsole:0000000000000070 $d
     /tmp/ccXppZcm.s:4305   .rodata.displayHardFaultCauseToGdbConsole.str1.4:0000000000000000 $d
     /tmp/ccXppZcm.s:4318   .text.displayHardFaultCauseToGdbConsole:0000000000000000 $t
     /tmp/ccXppZcm.s:4323   .text.displayHardFaultCauseToGdbConsole:0000000000000000 displayHardFaultCauseToGdbConsole
     /tmp/ccXppZcm.s:4403   .text.displayHardFaultCauseToGdbConsole:0000000000000050 $d
     /tmp/ccXppZcm.s:4413   .text.writeBytesToBufferAsHex:0000000000000000 $t
     /tmp/ccXppZcm.s:4418   .text.writeBytesToBufferAsHex:0000000000000000 writeBytesToBufferAsHex
     /tmp/ccXppZcm.s:4470   .text.sendRegisterForTResponse:0000000000000000 $t
     /tmp/ccXppZcm.s:4475   .text.sendRegisterForTResponse:0000000000000000 sendRegisterForTResponse
     /tmp/ccXppZcm.s:4523   .text.allocateFakeFloatRegAndCallMriDebugException:0000000000000000 $t
     /tmp/ccXppZcm.s:4528   .text.allocateFakeFloatRegAndCallMriDebugException:0000000000000000 allocateFakeFloatRegAndCallMriDebugException
     /tmp/ccXppZcm.s:4571   .text.allocateFakeFloatRegAndCallMriDebugException:0000000000000024 $d
     /tmp/ccXppZcm.s:8224   .bss.g_contextEntries:0000000000000000 g_contextEntries
     /tmp/ccXppZcm.s:4577   .text.prepareThreadContext:0000000000000000 $t
     /tmp/ccXppZcm.s:4582   .text.prepareThreadContext:0000000000000000 prepareThreadContext
     /tmp/ccXppZcm.s:4788   .text.prepareThreadContext:00000000000000a0 $d
     /tmp/ccXppZcm.s:4795   .text.mriCortexMSetPriority:0000000000000000 $t
     /tmp/ccXppZcm.s:4801   .text.mriCortexMSetPriority:0000000000000000 mriCortexMSetPriority
     /tmp/ccXppZcm.s:4868   .text.mriCortexMSetPriority:0000000000000034 $d
     /tmp/ccXppZcm.s:4874   .text.defaultSvcAndSysTickInterruptsToLowerPriority:0000000000000000 $t
     /tmp/ccXppZcm.s:4879   .text.defaultSvcAndSysTickInterruptsToLowerPriority:0000000000000000 defaultSvcAndSysTickInterruptsToLowerPriority
     /tmp/ccXppZcm.s:4919   .text.defaultExternalInterruptsToLowerPriority:0000000000000000 $t
     /tmp/ccXppZcm.s:4924   .text.defaultExternalInterruptsToLowerPriority:0000000000000000 defaultExternalInterruptsToLowerPriority
ARM GAS  /tmp/ccXppZcm.s 			page 276


     /tmp/ccXppZcm.s:4970   .text.enableDebugMonitorAtSpecifiedPriority:0000000000000000 $t
     /tmp/ccXppZcm.s:4975   .text.enableDebugMonitorAtSpecifiedPriority:0000000000000000 enableDebugMonitorAtSpecifiedPriority
     /tmp/ccXppZcm.s:5015   .text.enableDebugMonitorAtSpecifiedPriority:0000000000000020 $d
     /tmp/ccXppZcm.s:5020   .text.mriCortexMGetPriority:0000000000000000 $t
     /tmp/ccXppZcm.s:5026   .text.mriCortexMGetPriority:0000000000000000 mriCortexMGetPriority
     /tmp/ccXppZcm.s:5074   .text.mriCortexMGetPriority:0000000000000028 $d
     /tmp/ccXppZcm.s:5080   .text.recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts:0000000000000000 $t
     /tmp/ccXppZcm.s:5085   .text.recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts:0000000000000000 recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts
     /tmp/ccXppZcm.s:5127   .text.recordCurrentBasePriorityAndRaisePriorityToDisableNonDebugInterrupts:0000000000000030 $d
     /tmp/ccXppZcm.s:5132   .text.hasDebugMonInterruptBeenDisabled:0000000000000000 $t
     /tmp/ccXppZcm.s:5137   .text.hasDebugMonInterruptBeenDisabled:0000000000000000 hasDebugMonInterruptBeenDisabled
     /tmp/ccXppZcm.s:5239   .text.hasDebugMonInterruptBeenDisabled:0000000000000034 $d
     /tmp/ccXppZcm.s:5244   .text.isExceptionPriorityLowEnoughToDebug:0000000000000000 $t
     /tmp/ccXppZcm.s:5249   .text.isExceptionPriorityLowEnoughToDebug:0000000000000000 isExceptionPriorityLowEnoughToDebug
     /tmp/ccXppZcm.s:5314   .text.mriPlatform_IsSingleStepping:0000000000000000 $t
     /tmp/ccXppZcm.s:5320   .text.mriPlatform_IsSingleStepping:0000000000000000 mriPlatform_IsSingleStepping
     /tmp/ccXppZcm.s:5337   .text.mriPlatform_IsSingleStepping:000000000000000c $d
     /tmp/ccXppZcm.s:5342   .text.mriPlatform_GetPacketBuffer:0000000000000000 $t
     /tmp/ccXppZcm.s:5348   .text.mriPlatform_GetPacketBuffer:0000000000000000 mriPlatform_GetPacketBuffer
     /tmp/ccXppZcm.s:5362   .text.mriPlatform_GetPacketBuffer:0000000000000004 $d
     /tmp/ccXppZcm.s:5367   .text.mriPlatform_GetPacketBufferSize:0000000000000000 $t
     /tmp/ccXppZcm.s:5373   .text.mriPlatform_GetPacketBufferSize:0000000000000000 mriPlatform_GetPacketBufferSize
     /tmp/ccXppZcm.s:5388   .text.mriPlatform_GetTrapReason:0000000000000000 $t
     /tmp/ccXppZcm.s:5394   .text.mriPlatform_GetTrapReason:0000000000000000 mriPlatform_GetTrapReason
     /tmp/ccXppZcm.s:5417   .text.mriPlatform_GetTrapReason:0000000000000010 $d
     /tmp/ccXppZcm.s:5422   .rodata.mriPlatform_DisplayFaultCauseToGdbConsole.str1.4:0000000000000000 $d
     /tmp/ccXppZcm.s:5426   .text.mriPlatform_DisplayFaultCauseToGdbConsole:0000000000000000 $t
     /tmp/ccXppZcm.s:5432   .text.mriPlatform_DisplayFaultCauseToGdbConsole:0000000000000000 mriPlatform_DisplayFaultCauseToGdbConsole
     /tmp/ccXppZcm.s:5453   .text.mriPlatform_DisplayFaultCauseToGdbConsole:0000000000000010 $d
     /tmp/ccXppZcm.s:5457   .text.mriPlatform_DisplayFaultCauseToGdbConsole:0000000000000014 $t
     /tmp/ccXppZcm.s:5492   .text.mriPlatform_DisplayFaultCauseToGdbConsole:0000000000000034 $d
     /tmp/ccXppZcm.s:5498   .text.mriPlatform_LeavingDebugger:0000000000000000 $t
     /tmp/ccXppZcm.s:5504   .text.mriPlatform_LeavingDebugger:0000000000000000 mriPlatform_LeavingDebugger
     /tmp/ccXppZcm.s:5546   .text.mriPlatform_LeavingDebugger:0000000000000024 $d
     /tmp/ccXppZcm.s:5551   .text.mriPlatform_GetProgramCounter:0000000000000000 $t
     /tmp/ccXppZcm.s:5557   .text.mriPlatform_GetProgramCounter:0000000000000000 mriPlatform_GetProgramCounter
     /tmp/ccXppZcm.s:5579   .text.mriPlatform_GetProgramCounter:000000000000000c $d
     /tmp/ccXppZcm.s:5584   .text.mriPlatform_SetProgramCounter:0000000000000000 $t
     /tmp/ccXppZcm.s:5590   .text.mriPlatform_SetProgramCounter:0000000000000000 mriPlatform_SetProgramCounter
     /tmp/ccXppZcm.s:5616   .text.mriPlatform_SetProgramCounter:0000000000000010 $d
     /tmp/ccXppZcm.s:5621   .text.mriPlatform_WasProgramCounterModifiedByUser:0000000000000000 $t
     /tmp/ccXppZcm.s:5627   .text.mriPlatform_WasProgramCounterModifiedByUser:0000000000000000 mriPlatform_WasProgramCounterModifiedByUser
     /tmp/ccXppZcm.s:5653   .text.mriPlatform_WasProgramCounterModifiedByUser:0000000000000014 $d
     /tmp/ccXppZcm.s:5658   .text.mriPlatform_GetSemihostCallParameters:0000000000000000 $t
     /tmp/ccXppZcm.s:5664   .text.mriPlatform_GetSemihostCallParameters:0000000000000000 mriPlatform_GetSemihostCallParameters
     /tmp/ccXppZcm.s:5725   .text.mriPlatform_GetSemihostCallParameters:0000000000000034 $d
     /tmp/ccXppZcm.s:5730   .text.mriPlatform_SetSemihostCallReturnAndErrnoValues:0000000000000000 $t
     /tmp/ccXppZcm.s:5736   .text.mriPlatform_SetSemihostCallReturnAndErrnoValues:0000000000000000 mriPlatform_SetSemihostCallReturnAndErrnoValues
     /tmp/ccXppZcm.s:5764   .text.mriPlatform_SetSemihostCallReturnAndErrnoValues:0000000000000010 $d
     /tmp/ccXppZcm.s:5769   .text.mriPlatform_WasMemoryFaultEncountered:0000000000000000 $t
     /tmp/ccXppZcm.s:5775   .text.mriPlatform_WasMemoryFaultEncountered:0000000000000000 mriPlatform_WasMemoryFaultEncountered
     /tmp/ccXppZcm.s:5820   .text.mriPlatform_WasMemoryFaultEncountered:0000000000000018 $d
     /tmp/ccXppZcm.s:5825   .text.throwingMemRead16:0000000000000000 $t
     /tmp/ccXppZcm.s:5830   .text.throwingMemRead16:0000000000000000 throwingMemRead16
     /tmp/ccXppZcm.s:5889   .text.throwingMemRead16:0000000000000024 $d
     /tmp/ccXppZcm.s:5894   .text.getFirstHalfWordOfCurrentInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:5899   .text.getFirstHalfWordOfCurrentInstruction:0000000000000000 getFirstHalfWordOfCurrentInstruction
ARM GAS  /tmp/ccXppZcm.s 			page 277


     /tmp/ccXppZcm.s:5922   .text.doesPCPointToSVCInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:5927   .text.doesPCPointToSVCInstruction:0000000000000000 doesPCPointToSVCInstruction
     /tmp/ccXppZcm.s:5995   .text.doesPCPointToSVCInstruction:0000000000000028 $d
     /tmp/ccXppZcm.s:6000   .text.mriPlatform_AdvanceProgramCounterToNextInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:6006   .text.mriPlatform_AdvanceProgramCounterToNextInstruction:0000000000000000 mriPlatform_AdvanceProgramCounterToNextInstruction
     /tmp/ccXppZcm.s:6085   .text.mriPlatform_AdvanceProgramCounterToNextInstruction:0000000000000034 $d
     /tmp/ccXppZcm.s:6090   .text.mriPlatform_TypeOfCurrentInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:6096   .text.mriPlatform_TypeOfCurrentInstruction:0000000000000000 mriPlatform_TypeOfCurrentInstruction
     /tmp/ccXppZcm.s:6189   .text.mriPlatform_TypeOfCurrentInstruction:0000000000000040 $d
     /tmp/ccXppZcm.s:6194   .text.cacheTrapReason:0000000000000000 $t
     /tmp/ccXppZcm.s:6199   .text.cacheTrapReason:0000000000000000 cacheTrapReason
     /tmp/ccXppZcm.s:6268   .text.cacheTrapReason:0000000000000038 $d
     /tmp/ccXppZcm.s:6273   .text.mriPlatform_DetermineCauseOfException:0000000000000000 $t
     /tmp/ccXppZcm.s:6279   .text.mriPlatform_DetermineCauseOfException:0000000000000000 mriPlatform_DetermineCauseOfException
     /tmp/ccXppZcm.s:6321   .text.mriPlatform_DetermineCauseOfException:000000000000002a $d
     /tmp/ccXppZcm.s:6331   .text.mriPlatform_DetermineCauseOfException:0000000000000034 $t
     /tmp/ccXppZcm.s:6372   .text.mriPlatform_DetermineCauseOfException:0000000000000050 $d
     /tmp/ccXppZcm.s:6377   .text.getSecondHalfWordOfCurrentInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:6382   .text.getSecondHalfWordOfCurrentInstruction:0000000000000000 getSecondHalfWordOfCurrentInstruction
     /tmp/ccXppZcm.s:6407   .text.checkCurrentInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:6412   .text.checkCurrentInstruction:0000000000000000 checkCurrentInstruction
     /tmp/ccXppZcm.s:6535   .text.checkCurrentInstruction:0000000000000064 $d
     /tmp/ccXppZcm.s:6540   .text.advancePastPriorityModifyingInstruction:0000000000000000 $t
     /tmp/ccXppZcm.s:6545   .text.advancePastPriorityModifyingInstruction:0000000000000000 advancePastPriorityModifyingInstruction
     /tmp/ccXppZcm.s:6577   .text.mriPlatform_WriteTResponseRegistersToBuffer:0000000000000000 $t
     /tmp/ccXppZcm.s:6583   .text.mriPlatform_WriteTResponseRegistersToBuffer:0000000000000000 mriPlatform_WriteTResponseRegistersToBuffer
     /tmp/ccXppZcm.s:6649   .text.mriPlatform_WriteTResponseRegistersToBuffer:0000000000000050 $d
     /tmp/ccXppZcm.s:6654   .text.mriPlatform_SetHardwareBreakpointOfGdbKind:0000000000000000 $t
     /tmp/ccXppZcm.s:6660   .text.mriPlatform_SetHardwareBreakpointOfGdbKind:0000000000000000 mriPlatform_SetHardwareBreakpointOfGdbKind
     /tmp/ccXppZcm.s:6713   .text.mriPlatform_SetHardwareBreakpointOfGdbKind:000000000000001c $d
     /tmp/ccXppZcm.s:6718   .text.mriPlatform_SetHardwareBreakpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:6724   .text.mriPlatform_SetHardwareBreakpoint:0000000000000000 mriPlatform_SetHardwareBreakpoint
     /tmp/ccXppZcm.s:6806   .text.mriPlatform_SetHardwareBreakpoint:0000000000000030 $d
     /tmp/ccXppZcm.s:6811   .text.setHardwareBreakpointOnSvcHandler:0000000000000000 $t
     /tmp/ccXppZcm.s:6816   .text.setHardwareBreakpointOnSvcHandler:0000000000000000 setHardwareBreakpointOnSvcHandler
     /tmp/ccXppZcm.s:6842   .text.mriPlatform_EnableSingleStep:0000000000000000 $t
     /tmp/ccXppZcm.s:6848   .text.mriPlatform_EnableSingleStep:0000000000000000 mriPlatform_EnableSingleStep
     /tmp/ccXppZcm.s:6969   .text.mriPlatform_EnableSingleStep:0000000000000060 $d
     /tmp/ccXppZcm.s:6975   .text.mriPlatform_ClearHardwareBreakpointOfGdbKind:0000000000000000 $t
     /tmp/ccXppZcm.s:6981   .text.mriPlatform_ClearHardwareBreakpointOfGdbKind:0000000000000000 mriPlatform_ClearHardwareBreakpointOfGdbKind
     /tmp/ccXppZcm.s:7040   .text.mriPlatform_ClearHardwareBreakpointOfGdbKind:0000000000000020 $d
     /tmp/ccXppZcm.s:7045   .text.mriPlatform_ClearHardwareBreakpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:7051   .text.mriPlatform_ClearHardwareBreakpoint:0000000000000000 mriPlatform_ClearHardwareBreakpoint
     /tmp/ccXppZcm.s:7109   .text.mriPlatform_ClearHardwareBreakpoint:0000000000000024 $d
     /tmp/ccXppZcm.s:7114   .text.clearHardwareBreakpointOnSvcHandler:0000000000000000 $t
     /tmp/ccXppZcm.s:7119   .text.clearHardwareBreakpointOnSvcHandler:0000000000000000 clearHardwareBreakpointOnSvcHandler
     /tmp/ccXppZcm.s:7145   .text.removeHardwareBreakpointOnSvcHandlerIfNeeded:0000000000000000 $t
     /tmp/ccXppZcm.s:7150   .text.removeHardwareBreakpointOnSvcHandlerIfNeeded:0000000000000000 removeHardwareBreakpointOnSvcHandlerIfNeeded
     /tmp/ccXppZcm.s:7183   .text.cleanupIfSingleStepping:0000000000000000 $t
     /tmp/ccXppZcm.s:7188   .text.cleanupIfSingleStepping:0000000000000000 cleanupIfSingleStepping
     /tmp/ccXppZcm.s:7211   .text.mriPlatform_DisableSingleStep:0000000000000000 $t
     /tmp/ccXppZcm.s:7217   .text.mriPlatform_DisableSingleStep:0000000000000000 mriPlatform_DisableSingleStep
     /tmp/ccXppZcm.s:7253   .text.mriPlatform_DisableSingleStep:000000000000001c $d
     /tmp/ccXppZcm.s:7258   .text.mriCortexMInit:0000000000000000 $t
     /tmp/ccXppZcm.s:7264   .text.mriCortexMInit:0000000000000000 mriCortexMInit
     /tmp/ccXppZcm.s:7359   .text.mriCortexMInit:0000000000000054 $d
     /tmp/ccXppZcm.s:7365   .text.mriPlatform_EnteringDebugger:0000000000000000 $t
ARM GAS  /tmp/ccXppZcm.s 			page 278


     /tmp/ccXppZcm.s:7371   .text.mriPlatform_EnteringDebugger:0000000000000000 mriPlatform_EnteringDebugger
     /tmp/ccXppZcm.s:7416   .text.mriPlatform_EnteringDebugger:0000000000000028 $d
     /tmp/ccXppZcm.s:7421   .text.mriPlatform_SetHardwareWatchpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:7427   .text.mriPlatform_SetHardwareWatchpoint:0000000000000000 mriPlatform_SetHardwareWatchpoint
     /tmp/ccXppZcm.s:7561   .text.mriPlatform_SetHardwareWatchpoint:0000000000000044 $d
     /tmp/ccXppZcm.s:7566   .text.mriPlatform_ClearHardwareWatchpoint:0000000000000000 $t
     /tmp/ccXppZcm.s:7572   .text.mriPlatform_ClearHardwareWatchpoint:0000000000000000 mriPlatform_ClearHardwareWatchpoint
     /tmp/ccXppZcm.s:7682   .text.mriPlatform_ClearHardwareWatchpoint:0000000000000038 $d
     /tmp/ccXppZcm.s:7687   .text.mriPlatform_GetTargetXmlSize:0000000000000000 $t
     /tmp/ccXppZcm.s:7693   .text.mriPlatform_GetTargetXmlSize:0000000000000000 mriPlatform_GetTargetXmlSize
     /tmp/ccXppZcm.s:7708   .text.mriPlatform_GetTargetXml:0000000000000000 $t
     /tmp/ccXppZcm.s:7714   .text.mriPlatform_GetTargetXml:0000000000000000 mriPlatform_GetTargetXml
     /tmp/ccXppZcm.s:7728   .text.mriPlatform_GetTargetXml:0000000000000004 $d
     /tmp/ccXppZcm.s:8230   .rodata.g_targetXml:0000000000000000 g_targetXml
     /tmp/ccXppZcm.s:7733   .text.mriPlatform_ResetDevice:0000000000000000 $t
     /tmp/ccXppZcm.s:7739   .text.mriPlatform_ResetDevice:0000000000000000 mriPlatform_ResetDevice
     /tmp/ccXppZcm.s:7758   .text.mriFaultHandler:0000000000000000 $t
     /tmp/ccXppZcm.s:7764   .text.mriFaultHandler:0000000000000000 mriFaultHandler
     /tmp/ccXppZcm.s:7909   .text.mriFaultHandler:000000000000006c $d
     /tmp/ccXppZcm.s:7914   .text.mriPlatform_HandleFaultFromHighPriorityCode:0000000000000000 $t
     /tmp/ccXppZcm.s:7920   .text.mriPlatform_HandleFaultFromHighPriorityCode:0000000000000000 mriPlatform_HandleFaultFromHighPriorityCode
     /tmp/ccXppZcm.s:7933   .text.mriCortexMExceptionHandler:0000000000000000 $t
     /tmp/ccXppZcm.s:7939   .text.mriCortexMExceptionHandler:0000000000000000 mriCortexMExceptionHandler
     /tmp/ccXppZcm.s:8198   .text.mriCortexMExceptionHandler:00000000000000e0 $d
     /tmp/ccXppZcm.s:8302   .rodata.g_fakeStack:0000000000000000 g_fakeStack
     /tmp/ccXppZcm.s:8204   .rodata.debugEventToSignalMap.0:0000000000000000 $d
     /tmp/ccXppZcm.s:8221   .bss.g_contextEntries:0000000000000000 $d
     /tmp/ccXppZcm.s:8227   .rodata.g_targetXml:0000000000000000 $d
     /tmp/ccXppZcm.s:8279   .bss.mriCortexMState:0000000000000000 $d
     /tmp/ccXppZcm.s:8286   .bss.mriCortexMFlags:0000000000000000 $d
     /tmp/ccXppZcm.s:8293   .bss.mriCortexMDebuggerStack:0000000000000000 $d
     /tmp/ccXppZcm.s:8299   .rodata.g_fakeStack:0000000000000000 $d

UNDEFINED SYMBOLS
mriExceptionCode
mri_memset
mriContext_Set
mriContext_Get
mriGdbConsole_WriteString
mriGdbConsole_WriteHexValue
mriBuffer_WriteByteAsHex
mriBuffer_WriteChar
mriDebugException
mriContext_Init
mriPlatform_MemRead16
mriExceptionHandler
mriPlatform_CommHasReceiveData
mri_memmove
